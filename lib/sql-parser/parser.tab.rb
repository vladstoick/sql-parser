#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 343)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,    99,    99,    58,   152,    31,   112,    78,   239,   105,
    47,    58,    58,   153,   240,   154,   138,   230,    47,   231,
   232,    93,    92,   233,   106,   228,   108,   109,    75,   110,
   111,   219,   220,    76,    77,    65,    47,    21,    21,    21,
    79,   233,    47,    65,    65,    50,    51,    21,    35,    48,
    39,    41,    42,    43,    44,    21,    52,   197,    55,    48,
    47,    50,    51,    50,    51,   158,    35,    48,    39,    41,
    42,    43,    44,    21,    52,     7,    55,    73,     8,    21,
    75,    50,    51,   157,    35,    48,    39,    41,    42,    43,
    44,    48,    52,    47,    55,  -135,   162,    21,   158,    75,
   262,   263,    75,     8,    75,    50,    51,   178,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   179,    55,   180,
    31,   181,   165,   142,   143,   182,  -135,  -135,  -135,   162,
    21,   183,   184,   126,   186,    47,   187,    75,    50,    51,
    31,    35,    48,    39,    41,    42,    43,    44,    65,    52,
   118,    55,    21,    47,   193,   194,    71,   197,    31,    58,
    50,    51,   211,    35,    48,    39,    41,    42,    43,    44,
    71,    52,    21,    55,    71,   214,   215,    47,   221,     8,
    50,    51,    31,    35,    48,    39,    41,    42,    43,    44,
    21,    52,    94,    55,   126,    47,    91,    90,    50,    51,
    31,    35,    48,    39,    41,    42,    43,    44,   235,    52,
    89,    55,  -154,    47,    21,    88,    87,    86,    31,    85,
    84,    83,    50,    51,   -91,    35,    48,    39,    41,    42,
    43,    44,    21,    52,   250,    55,   251,   197,   252,   211,
    50,    51,    72,    35,    48,    39,    41,    42,    43,    44,
    21,    52,    47,    55,   235,    71,    57,   158,    50,    51,
   256,    35,    48,    39,    41,    42,    43,    44,    56,    52,
    47,    55,   258,   197,    75,    31,    12,   265,    11,   267,
   268,   165,   269,   270,   128,   271,     9,   140,   162,    21,
    47,   139,   144,   104,   134,    31,   148,    50,    51,    65,
    35,    48,    39,    41,    42,    43,    44,    21,    52,   150,
    55,   151,    47,   nil,   nil,    50,    51,    31,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,    21,    55,   nil,
   nil,   nil,    47,   nil,   nil,    50,    51,    31,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,   nil,    55,    21,
    47,   nil,   nil,   nil,   nil,    31,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,    21,
    55,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,    21,    52,   nil,
    55,   nil,   nil,   nil,   105,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   106,
    31,   108,   109,   nil,   110,   111,    13,    14,    15,    17,
   nil,   nil,   nil,    47,   nil,   nil,   198,   199,    31,   200,
   201,   202,   nil,     8,   nil,   nil,   203,   204,   205,   206,
   207,   208,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,    47,    52,
   nil,    55,   105,    31,   nil,   103,   nil,   nil,     8,   104,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   106,   nil,   108,
   109,    31,   110,   111,   nil,   nil,   nil,   nil,   nil,   nil,
    17,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,    21,    52,   nil,    55,   nil,   nil,   nil,
   nil,    50,    51,   nil,    35,    48,    39,    41,    42,    43,
    44,    47,    52,   nil,    55,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   nil,   nil,    47,    21,   nil,
   nil,   nil,   233,   nil,   nil,   nil,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,    21,    52,   nil,    55,
   nil,    47,   nil,   nil,    50,    51,   233,    35,    48,    39,
    41,    42,    43,    44,    21,    52,   nil,    55,   nil,   nil,
   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,    47,    52,   nil,    55,   nil,   158,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,    47,    55,
   nil,   165,   nil,    31,   nil,   nil,   nil,   nil,   162,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,    47,    52,   nil,
    55,   nil,    31,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,    47,    52,   nil,    55,   nil,    31,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    35,    48,    39,    41,    42,
    43,    44,   nil,    52,    47,    55,   nil,   nil,   nil,   158,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,   nil,   165,   nil,   233,   nil,   nil,   nil,   nil,
   162,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,    47,
    52,   nil,    55,   nil,   233,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   nil,
   233,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,    47,    52,   nil,    55,   nil,   233,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    47,    52,   nil,    55,   nil,   233,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,    47,
    52,   nil,    55,   nil,   233,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   nil,
   233,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,    47,    52,   nil,    55,   nil,   233,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    47,    52,   nil,    55,   nil,   158,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,   165,
    52,   nil,    55,    47,   nil,   nil,   162,    21,   158,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   nil,
    31,   nil,   165,   nil,   nil,   nil,   nil,   nil,   nil,   162,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,   nil,    55 ]

racc_action_check = [
   103,   140,    57,    12,   109,   103,    60,    25,   202,   191,
   252,   151,    71,   110,   202,   111,    91,   198,   265,   198,
   198,    52,    52,   265,   191,   195,   191,   191,    60,   191,
   191,   191,   191,    24,    24,    12,   256,   103,   140,    57,
    25,   256,   194,   151,    71,   103,   103,   252,   103,   103,
   103,   103,   103,   103,   103,   265,   103,   195,   103,   252,
   165,    91,    91,   265,   265,   165,   265,   265,   265,   265,
   265,   265,   265,   256,   265,     0,   265,    20,     0,   194,
   112,   256,   256,   117,   256,   256,   256,   256,   256,   256,
   256,   194,   256,   158,   256,    23,   165,   165,   158,    20,
   251,   251,    83,   158,   269,   165,   165,   128,   165,   165,
   165,   165,   165,   165,   165,    72,   165,   129,   165,   130,
    72,   131,   158,    97,    97,   132,    23,    23,    23,   158,
   158,   133,   137,    82,   146,   148,   147,    73,   158,   158,
   148,   158,   158,   158,   158,   158,   158,   158,   150,   158,
    70,   158,    72,    76,   156,   157,    68,   159,    76,   162,
    72,    72,   163,    72,    72,    72,    72,    72,    72,    72,
    67,    72,   148,    72,    66,   188,   189,    77,   192,    58,
   148,   148,    77,   148,   148,   148,   148,   148,   148,   148,
    76,   148,    55,   148,   196,    78,    49,    48,    76,    76,
    78,    76,    76,    76,    76,    76,    76,    76,   200,    76,
    47,    76,    45,    79,    77,    44,    43,    42,    79,    41,
    39,    36,    77,    77,    21,    77,    77,    77,    77,    77,
    77,    77,    78,    77,   220,    77,   221,   223,   224,   229,
    78,    78,    19,    78,    78,    78,    78,    78,    78,    78,
    79,    78,   118,    78,   231,    16,    11,   118,    79,    79,
   234,    79,    79,    79,    79,    79,    79,    79,     9,    79,
    84,    79,   239,   249,   250,    84,     7,   253,     5,   257,
   259,   118,   260,   262,    84,   263,     1,    95,   118,   118,
    85,    92,   100,   102,    89,    85,   104,   118,   118,   105,
   118,   118,   118,   118,   118,   118,   118,    84,   118,   106,
   118,   107,    86,   nil,   nil,    84,    84,    86,    84,    84,
    84,    84,    84,    84,    84,   nil,    84,    85,    84,   nil,
   nil,   nil,    87,   nil,   nil,    85,    85,    87,    85,    85,
    85,    85,    85,    85,    85,   nil,    85,   nil,    85,    86,
    88,   nil,   nil,   nil,   nil,    88,   nil,    86,    86,   nil,
    86,    86,    86,    86,    86,    86,    86,   nil,    86,    87,
    86,   nil,   nil,   nil,   nil,   nil,   nil,    87,    87,   nil,
    87,    87,    87,    87,    87,    87,    87,    88,    87,   nil,
    87,   nil,   nil,   nil,   119,    88,    88,   nil,    88,    88,
    88,    88,    88,    88,    88,     8,    88,   nil,    88,   119,
     8,   119,   119,   nil,   119,   119,     8,     8,     8,     8,
   nil,   nil,   nil,   235,   nil,   nil,   161,   161,   235,   161,
   161,   161,   nil,   235,   nil,   nil,   161,   161,   161,   161,
   161,   161,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     8,     8,   nil,     8,     8,     8,     8,     8,     8,     8,
   235,     8,   nil,     8,   nil,   nil,   nil,   nil,   235,   235,
   nil,   235,   235,   235,   235,   235,   235,   235,   233,   235,
   nil,   235,    59,   233,   nil,    59,   nil,   nil,   233,    59,
   nil,   nil,   nil,   nil,   nil,   nil,    13,    59,   nil,    59,
    59,    13,    59,    59,   nil,   nil,   nil,   nil,   nil,   nil,
    13,   nil,   nil,   nil,   nil,   233,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   233,   233,   nil,   233,   233,   233,   233,
   233,   233,   233,    13,   233,   nil,   233,   nil,   nil,   nil,
   nil,    13,    13,   nil,    13,    13,    13,    13,    13,    13,
    13,    14,    13,   nil,    13,   nil,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   232,    14,   nil,
   nil,   nil,   232,   nil,   nil,   nil,    14,    14,   nil,    14,
    14,    14,    14,    14,    14,    14,    15,    14,   nil,    14,
   nil,   230,   nil,   nil,    15,    15,   230,    15,    15,    15,
    15,    15,    15,    15,   232,    15,   nil,    15,   nil,   nil,
   nil,   nil,   232,   232,   nil,   232,   232,   232,   232,   232,
   232,   232,   219,   232,   nil,   232,   nil,   219,   230,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   230,   230,   nil,   230,
   230,   230,   230,   230,   230,   230,   nil,   230,   215,   230,
   nil,   219,   nil,   215,   nil,   nil,   nil,   nil,   219,   219,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   219,   219,   nil,
   219,   219,   219,   219,   219,   219,   219,    26,   219,   nil,
   219,   nil,    26,   nil,   nil,   215,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   215,   215,   nil,   215,   215,   215,   215,
   215,   215,   215,    31,   215,   nil,   215,   nil,    31,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,    26,    26,    26,    26,
    26,    26,   nil,    26,   211,    26,   nil,   nil,   nil,   211,
    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,    31,
   nil,    31,    31,    31,    31,    31,    31,    31,   nil,    31,
   208,    31,   nil,   211,   nil,   208,   nil,   nil,   nil,   nil,
   211,   211,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   211,
   211,   nil,   211,   211,   211,   211,   211,   211,   211,   207,
   211,   nil,   211,   nil,   207,   nil,   nil,   208,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   208,   208,   nil,   208,   208,
   208,   208,   208,   208,   208,   206,   208,   nil,   208,   nil,
   206,   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   207,   207,   nil,   207,   207,   207,
   207,   207,   207,   207,   205,   207,   nil,   207,   nil,   205,
   nil,   nil,   206,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   206,   206,   nil,   206,   206,   206,   206,   206,   206,   206,
   204,   206,   nil,   206,   nil,   204,   nil,   nil,   nil,   nil,
   nil,   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,
   205,   nil,   205,   205,   205,   205,   205,   205,   205,   203,
   205,   nil,   205,   nil,   203,   nil,   nil,   204,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   204,   204,   nil,   204,   204,
   204,   204,   204,   204,   204,   201,   204,   nil,   204,   nil,
   201,   nil,   nil,   nil,   nil,   nil,   203,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   203,   203,   nil,   203,   203,   203,
   203,   203,   203,   203,   199,   203,   nil,   203,   nil,   199,
   nil,   nil,   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   201,   201,   nil,   201,   201,   201,   201,   201,   201,   201,
   197,   201,   nil,   201,   nil,   197,   nil,   nil,   nil,   nil,
   nil,   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   199,
   199,   nil,   199,   199,   199,   199,   199,   199,   199,   197,
   199,   nil,   199,   193,   nil,   nil,   197,   197,   193,   nil,
   nil,   nil,   nil,   nil,   nil,   197,   197,   nil,   197,   197,
   197,   197,   197,   197,   197,   187,   197,   nil,   197,   nil,
   187,   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,   193,
   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   193,   193,
   nil,   193,   193,   193,   193,   193,   193,   193,   nil,   193,
   nil,   193,   187,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   187,   187,   nil,   187,   187,   187,   187,   187,   187,   187,
   nil,   187,   nil,   187 ]

racc_action_pointer = [
    63,   286,   nil,   nil,   nil,   276,   nil,   263,   400,   268,
   nil,   253,    -7,   491,   546,   564,   234,   nil,   nil,   235,
    57,   170,   nil,    76,   -17,   -12,   692,   nil,   nil,   nil,
   nil,   718,   nil,   nil,   nil,   nil,   167,   nil,   nil,   210,
   nil,   209,   207,   206,   205,   152,   nil,   156,   192,   136,
   nil,   nil,   -40,   nil,   nil,   128,   nil,    -3,   164,   475,
   -14,   nil,   nil,   nil,   nil,   nil,   153,   149,   135,   nil,
   119,     2,   110,    95,   nil,   nil,   148,   172,   190,   208,
   nil,   nil,   122,    60,   265,   285,   307,   327,   345,   289,
   nil,    11,   230,   nil,   nil,   280,   nil,   115,   nil,   nil,
   281,   nil,   279,    -5,   286,   257,   286,   288,   nil,   -22,
   -13,   -11,    38,   nil,   nil,   nil,   nil,    51,   247,   387,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    96,   106,
   108,   110,   114,   120,   nil,   nil,   nil,   127,   nil,   nil,
    -4,   nil,   nil,   nil,   nil,   nil,   123,   129,   130,   nil,
   106,     1,   nil,   nil,   nil,   nil,   121,   152,    88,   114,
   nil,   392,   149,   126,   nil,    55,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1050,   164,   169,
   nil,     2,   174,  1028,    37,    14,   183,   995,   -18,   969,
   198,   940,   -26,   914,   885,   859,   830,   804,   775,   nil,
   nil,   749,   nil,   nil,   nil,   663,   nil,   nil,   nil,   637,
   224,   231,   nil,   194,   231,   nil,   nil,   nil,   nil,   203,
   606,   244,   582,   473,   224,   418,   nil,   nil,   nil,   232,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   230,
   232,    94,     5,   241,   nil,   nil,    31,   268,   nil,   269,
   275,   nil,   278,   280,   nil,    13,   nil,   nil,   nil,    62,
   nil,   nil,   nil,   nil ]

racc_action_default = [
  -166,  -166,    -1,    -2,    -3,    -5,   -20,  -166,  -166,  -166,
    -4,  -166,  -166,  -166,  -166,  -166,   -34,   -35,   -36,   -38,
   -41,  -160,  -118,  -119,  -122,  -125,  -166,  -127,  -128,  -129,
  -130,  -166,  -132,  -133,  -134,  -136,  -166,  -138,  -139,  -166,
  -141,  -166,  -166,  -166,  -166,  -147,  -148,  -152,  -166,  -166,
  -158,  -159,  -166,  -163,  -164,  -166,   274,  -166,  -166,  -166,
   -46,   -47,   -48,   -50,   -51,   -91,   -28,   -30,   -32,   -33,
   -67,  -166,  -166,  -166,   -40,  -160,  -166,  -166,  -166,  -166,
  -126,  -135,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -150,
  -151,  -166,  -166,  -162,  -165,    -6,   -12,   -16,   -14,   -15,
  -166,   -21,  -166,  -166,  -166,  -166,  -166,  -166,   -55,   -57,
   -59,   -60,  -166,   -45,   -27,   -29,   -31,   -69,  -166,   -43,
   -37,   -39,  -120,  -121,  -123,  -124,  -131,  -137,  -166,  -166,
  -166,  -166,  -166,  -166,  -149,  -153,  -155,  -166,  -157,  -161,
  -166,   -13,   -17,   -18,   -19,   -22,  -166,   -25,  -166,   -52,
  -166,  -166,   -56,   -58,   -61,   -44,   -75,  -166,  -166,   -68,
   -77,  -166,  -166,   -94,   -96,  -166,   -99,  -100,  -101,  -103,
  -104,  -105,  -106,  -107,  -108,  -115,  -116,  -117,  -140,  -142,
  -143,  -144,  -145,  -146,  -156,   -11,   -23,  -166,  -166,   -85,
   -53,  -166,    -7,  -166,  -166,  -166,  -117,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,   -49,
   -90,  -166,   -98,   -24,   -26,  -166,   -54,   -62,   -63,  -166,
  -166,  -166,   -42,   -76,   -70,   -72,   -73,   -74,  -102,   -95,
  -166,  -166,  -166,  -166,  -166,  -166,   -81,   -82,   -87,  -166,
   -89,  -109,  -110,  -111,  -112,  -113,  -114,   -97,   -84,   -64,
  -166,    -8,  -166,  -166,   -80,   -86,  -166,  -166,   -88,  -166,
   -66,   -93,  -166,  -166,   -71,  -166,   -79,   -83,   -65,  -166,
    -9,   -10,   -78,   -92 ]

racc_goto_table = [
    74,    20,    98,    61,   188,    60,    20,    20,    20,    59,
   146,   159,    96,   101,   225,   226,   236,   122,   123,   124,
   125,   102,   141,   117,    82,   156,   192,   234,   222,   238,
   210,   241,   242,   243,   244,   245,   246,    81,    16,   216,
   113,   217,   218,    66,    67,    68,    95,   254,   259,    69,
   260,   195,   224,   121,    10,     5,   145,     4,   253,     3,
   255,   229,    61,   127,    60,    20,   247,   212,   119,     1,
     2,   248,   264,   226,   136,   137,    80,   129,   130,   131,
   132,   133,   135,   120,   266,    98,   223,    81,    81,    81,
    81,   257,   155,   272,   213,   185,   147,   nil,   149,   114,
   115,   116,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   249,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,
   nil,   189,    61,   190,    60,   nil,   nil,   nil,   191,   nil,
   nil,   196,   nil,   209,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   147,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   209,   nil,   nil,   nil,   nil,   nil,   227,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   189,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   209,   nil,   nil,   nil,    82,   nil,   189,   nil,
   261,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   273 ]

racc_goto_check = [
    25,    19,    12,    13,    20,    30,    19,    19,    19,    15,
    18,    39,     9,    16,    43,    44,    49,    60,    60,    62,
    62,    17,    11,    27,    19,    28,    29,    47,     8,    47,
    32,    47,    47,    47,    47,    47,    47,    61,    21,    36,
    25,    37,    38,    21,    21,    21,     7,    49,    40,    22,
    41,    39,    42,    25,     6,     5,    16,     4,    47,     3,
    47,    53,    13,    25,    30,    19,    54,    55,    15,     1,
     2,    20,    43,    44,    76,    64,    65,    19,    19,    19,
    19,    19,    75,    23,    47,    12,    39,    61,    61,    61,
    61,    20,    25,    47,    18,     9,    19,   nil,    30,    22,
    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
   nil,    19,    13,    30,    30,   nil,   nil,   nil,    15,   nil,
   nil,    19,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    13,   nil,   nil,   nil,    19,   nil,    19,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25 ]

racc_goto_pointer = [
   nil,    69,    70,    59,    57,    55,    49,   -11,  -164,   -45,
   nil,   -75,   -55,    -9,   nil,    -3,   -46,   -38,   -93,    -7,
  -144,    30,    33,    11,   nil,   -20,   nil,   -47,   -92,  -130,
    -7,   nil,  -132,   nil,   nil,   nil,  -152,  -150,  -149,  -107,
  -202,  -200,  -142,  -180,  -179,   nil,   nil,  -172,   nil,  -184,
   nil,   nil,   nil,  -136,  -145,   -98,   nil,   nil,   nil,   nil,
   -59,    11,   -59,   nil,   -16,    50,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    -9,   -17,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   100,   nil,   nil,   nil,   nil,
    97,   nil,    29,   160,     6,   nil,   nil,   nil,   nil,   177,
   nil,   nil,   nil,    18,    19,    37,    70,   nil,   nil,   nil,
    38,    62,   237,    63,    64,   107,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   176,   170,   161,   171,   nil,
   172,   173,   174,   163,   164,   166,   167,   168,   169,   175,
    22,    23,    24,    25,    26,    27,    28,    30,    32,    33,
    34,    36,    40,    46,    49,   nil,   nil,    53,    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 66, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  2, 68, :_reduce_4,
  0, 71, :_reduce_none,
  3, 71, :_reduce_6,
  0, 73, :_reduce_none,
  2, 73, :_reduce_8,
  4, 73, :_reduce_9,
  4, 73, :_reduce_10,
  3, 72, :_reduce_11,
  1, 72, :_reduce_none,
  2, 74, :_reduce_13,
  1, 75, :_reduce_none,
  1, 75, :_reduce_15,
  0, 76, :_reduce_16,
  1, 76, :_reduce_17,
  1, 76, :_reduce_18,
  3, 78, :_reduce_19,
  1, 70, :_reduce_none,
  4, 69, :_reduce_21,
  5, 69, :_reduce_22,
  3, 82, :_reduce_23,
  3, 83, :_reduce_24,
  1, 83, :_reduce_none,
  4, 81, :_reduce_26,
  4, 79, :_reduce_27,
  3, 79, :_reduce_28,
  4, 79, :_reduce_29,
  3, 79, :_reduce_30,
  4, 79, :_reduce_31,
  3, 79, :_reduce_32,
  3, 79, :_reduce_33,
  2, 79, :_reduce_34,
  1, 86, :_reduce_35,
  1, 86, :_reduce_36,
  3, 88, :_reduce_37,
  1, 88, :_reduce_none,
  3, 89, :_reduce_39,
  2, 89, :_reduce_40,
  1, 89, :_reduce_none,
  5, 87, :_reduce_42,
  2, 91, :_reduce_43,
  3, 80, :_reduce_44,
  2, 80, :_reduce_45,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 97, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  3, 98, :_reduce_52,
  4, 98, :_reduce_53,
  5, 99, :_reduce_54,
  1, 100, :_reduce_55,
  2, 100, :_reduce_56,
  1, 100, :_reduce_57,
  2, 100, :_reduce_58,
  1, 100, :_reduce_59,
  1, 100, :_reduce_60,
  2, 100, :_reduce_61,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  2, 102, :_reduce_64,
  4, 103, :_reduce_65,
  1, 105, :_reduce_none,
  0, 92, :_reduce_none,
  2, 92, :_reduce_68,
  0, 93, :_reduce_none,
  3, 93, :_reduce_70,
  3, 107, :_reduce_71,
  1, 107, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_76,
  1, 110, :_reduce_none,
  6, 111, :_reduce_78,
  5, 111, :_reduce_79,
  4, 113, :_reduce_80,
  3, 113, :_reduce_81,
  1, 114, :_reduce_none,
  3, 114, :_reduce_83,
  3, 85, :_reduce_84,
  1, 85, :_reduce_none,
  4, 115, :_reduce_86,
  3, 115, :_reduce_87,
  4, 116, :_reduce_88,
  3, 116, :_reduce_89,
  2, 117, :_reduce_90,
  1, 95, :_reduce_91,
  3, 106, :_reduce_92,
  1, 106, :_reduce_none,
  1, 104, :_reduce_none,
  3, 104, :_reduce_95,
  1, 118, :_reduce_none,
  3, 118, :_reduce_97,
  2, 119, :_reduce_98,
  1, 119, :_reduce_none,
  1, 120, :_reduce_none,
  1, 121, :_reduce_none,
  3, 121, :_reduce_102,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 123, :_reduce_109,
  3, 123, :_reduce_110,
  3, 123, :_reduce_111,
  3, 123, :_reduce_112,
  3, 123, :_reduce_113,
  3, 123, :_reduce_114,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 124, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  3, 125, :_reduce_120,
  3, 125, :_reduce_121,
  1, 125, :_reduce_none,
  3, 127, :_reduce_123,
  3, 127, :_reduce_124,
  1, 127, :_reduce_none,
  2, 128, :_reduce_126,
  1, 128, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 130, :_reduce_131,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 134, :_reduce_136,
  3, 77, :_reduce_137,
  1, 77, :_reduce_none,
  1, 136, :_reduce_none,
  4, 132, :_reduce_140,
  1, 132, :_reduce_none,
  4, 137, :_reduce_142,
  4, 137, :_reduce_143,
  4, 137, :_reduce_144,
  4, 137, :_reduce_145,
  4, 137, :_reduce_146,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 109, :_reduce_149,
  2, 109, :_reduce_150,
  2, 109, :_reduce_151,
  1, 109, :_reduce_152,
  3, 138, :_reduce_153,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  2, 141, :_reduce_156,
  1, 141, :_reduce_157,
  1, 129, :_reduce_158,
  1, 129, :_reduce_159,
  1, 90, :_reduce_160,
  3, 126, :_reduce_161,
  2, 126, :_reduce_162,
  1, 126, :_reduce_none,
  1, 142, :_reduce_none,
  2, 143, :_reduce_165 ]

racc_reduce_n = 166

racc_shift_n = 274

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :solidus => 52,
  :CURRENT_USER => 53,
  :period => 54,
  :COUNT => 55,
  :AVG => 56,
  :MAX => 57,
  :MIN => 58,
  :SUM => 59,
  :E => 60,
  :quote => 61,
  :character_string_literal => 62,
  :DATE => 63,
  :date_string => 64 }

racc_nt_base = 65

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "exact_numeric_literal",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_37(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_54(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_71(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_84(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_92(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_126(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 141 omitted

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_156(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
