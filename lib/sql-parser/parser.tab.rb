#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 345)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    48,   102,   102,    59,    74,    31,    80,   115,   245,   234,
     8,    48,    59,   108,   246,    59,   236,   258,   237,   238,
    48,     7,   147,   148,     8,    31,    76,   217,   109,    76,
   111,   112,   241,   113,   114,    66,   143,    21,    21,    21,
    81,   203,    48,   262,    66,    51,    52,    66,    21,    35,
    49,    39,    41,    42,    43,    44,    45,    21,    53,   264,
    56,    49,    53,    48,    56,    51,    52,   203,    31,    35,
    49,    39,    41,    42,    43,    44,    45,    17,    53,    21,
    56,    51,    52,    77,    78,    79,   108,    76,    53,   106,
    56,    48,    49,   107,    96,    95,   163,   268,   269,  -136,
    21,   109,   271,   111,   112,   273,   113,   114,    51,    52,
   274,   275,    35,    49,    39,    41,    42,    43,    44,    45,
   170,    53,   276,    56,    48,   277,    76,   167,    21,   239,
  -136,  -136,  -136,  -136,     9,    11,    51,    52,    12,    57,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
    58,    56,    72,   239,    73,   -91,    85,    86,    87,    88,
    89,    21,    90,    91,  -156,    92,    93,    94,    97,    51,
    52,     8,    72,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,    72,    56,    21,   239,    72,   121,    76,
   130,    76,   139,    51,    52,   144,   145,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   149,    56,   107,
   239,   153,    66,   155,   156,   157,   158,   159,    21,    76,
   162,   183,   184,   185,   186,   187,    51,    52,   188,   189,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   190,    56,    21,   239,   192,   193,    66,   199,   200,   203,
    51,    52,    59,   217,    35,    49,    39,    41,    42,    43,
    44,    45,    48,    53,   220,    56,   221,   239,   227,   130,
   241,   256,   257,   203,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   nil,    56,    21,
   239,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,   nil,
    53,   nil,    56,    48,   nil,   nil,   nil,   nil,   163,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,   170,    53,   nil,    56,    48,   nil,   nil,   167,
    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
   nil,    53,   nil,    56,    48,   nil,   nil,   nil,   nil,   163,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   170,    53,   nil,    56,    48,   nil,   nil,
   167,    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    17,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,   nil,    53,    48,    56,    21,   nil,
   nil,   239,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   nil,    56,   nil,    31,   nil,   nil,   nil,   nil,   nil,    13,
    14,    15,    17,    21,   nil,   nil,   nil,   nil,    48,   nil,
   nil,    51,    52,    31,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   nil,    53,    21,    56,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,    21,    53,   nil,    56,   nil,
   nil,   nil,   nil,    51,    52,   nil,   108,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   nil,    56,   nil,
    31,   109,   nil,   111,   112,     8,   113,   114,   225,   226,
   nil,   nil,   nil,   204,   205,    48,   206,   207,   208,   nil,
    31,   nil,   nil,   209,   210,   211,   212,   213,   214,    17,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    48,   nil,   nil,
    51,    52,    31,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    21,    53,   nil,    56,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    48,    53,    21,    56,   nil,   163,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   nil,    56,   nil,   239,
   nil,   170,   nil,   nil,   nil,   nil,   nil,   nil,   167,    21,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,    31,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,   nil,
    53,    21,    56,   nil,   nil,   nil,    48,   nil,   nil,    51,
    52,    31,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    21,    53,   nil,    56,   nil,    48,   nil,   nil,    51,
    52,    31,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    21,    56,   nil,   nil,   nil,    48,   nil,
   nil,    51,    52,   239,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,    21,    53,   nil,    56,   nil,   nil,   nil,
   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   nil,    53,    21,    56,   nil,   nil,   nil,
   nil,    48,   nil,    51,    52,   nil,    31,    35,    49,    39,
    41,    42,    43,    44,    45,   132,    53,   nil,    56,   nil,
   nil,    48,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    48,   nil,   nil,    51,    52,    31,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    21,    53,
   nil,    56,   nil,    48,   nil,   nil,    51,    52,    31,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,   nil,    53,
    21,    56,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,
    31,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
    21,    53,   nil,    56,   nil,    48,   nil,   nil,    51,    52,
    31,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
   nil,    53,    21,    56,   nil,   nil,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    21,    53,   nil,    56,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    48,    53,   nil,    56,   nil,   163,   nil,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,   nil,   nil,   nil,   nil,    31,   nil,   nil,
   nil,   170,   nil,   nil,   nil,   nil,   nil,   nil,   167,    21,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,    31,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    21,
    53,   nil,    56,   nil,   nil,   nil,   nil,    51,    52,   nil,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    48,
    53,    21,    56,   nil,   163,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   167,    21,   nil,   nil,   nil,
   nil,    48,   nil,   nil,    51,    52,    31,   nil,    35,    49,
    39,    41,    42,    43,    44,    45,   nil,    53,    21,    56,
   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    21,    53,
    48,    56,   nil,   nil,   nil,   163,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,   nil,    53,
   nil,    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   170,
   nil,   nil,   nil,   nil,   nil,   nil,   167,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,   nil,    53,   nil,
    56 ]

racc_action_check = [
   239,    58,   145,   156,    20,   239,    25,    61,   208,   201,
   239,   258,    12,   122,   208,    72,   204,   230,   204,   204,
    81,     0,   100,   100,     0,    81,    20,   235,   122,    61,
   122,   122,   237,   122,   122,   156,    94,   239,    58,   145,
    25,   201,   200,   240,    12,   239,   239,    72,   258,   239,
   239,   239,   239,   239,   239,   239,   239,    81,   239,   245,
   239,   258,   207,    14,   207,    81,    81,   255,    14,    81,
    81,    81,    81,    81,    81,    81,    81,    14,    81,   200,
    81,    94,    94,    24,    24,    24,    60,   256,   238,    60,
   238,   203,   200,    60,    53,    53,   203,   257,   257,    23,
    14,    60,   259,    60,    60,   263,    60,    60,    14,    14,
   265,   266,    14,    14,    14,    14,    14,    14,    14,    14,
   203,    14,   268,    14,   205,   269,   275,   203,   203,   205,
    23,    23,    23,    23,     1,     5,   203,   203,     7,     9,
   203,   203,   203,   203,   203,   203,   203,   203,   209,   203,
    11,   203,    16,   209,    19,    21,    36,    39,    41,    42,
    43,   205,    44,    45,    46,    48,    49,    50,    56,   205,
   205,    59,    67,   205,   205,   205,   205,   205,   205,   205,
   205,   210,   205,    68,   205,   209,   210,    69,    71,    74,
    84,    85,    92,   209,   209,    95,    98,   209,   209,   209,
   209,   209,   209,   209,   209,   211,   209,   103,   209,   105,
   211,   107,   108,   109,   110,   112,   113,   114,   210,   115,
   120,   132,   133,   134,   135,   136,   210,   210,   137,   138,
   210,   210,   210,   210,   210,   210,   210,   210,   212,   210,
   142,   210,   211,   212,   151,   152,   155,   161,   162,   164,
   211,   211,   167,   168,   211,   211,   211,   211,   211,   211,
   211,   211,   213,   211,   194,   211,   195,   213,   198,   202,
   206,   226,   227,   229,   nil,   212,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   212,   212,   nil,   nil,   212,   212,   212,
   212,   212,   212,   212,   212,   214,   212,   nil,   212,   213,
   214,   nil,   nil,   nil,   nil,   nil,   nil,   213,   213,   nil,
   nil,   213,   213,   213,   213,   213,   213,   213,   213,   nil,
   213,   nil,   213,   217,   nil,   nil,   nil,   nil,   217,   nil,
   nil,   nil,   214,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   214,   214,   nil,   nil,   214,   214,   214,   214,   214,   214,
   214,   214,   217,   214,   nil,   214,   221,   nil,   nil,   217,
   217,   221,   nil,   nil,   nil,   nil,   nil,   nil,   217,   217,
   nil,   nil,   217,   217,   217,   217,   217,   217,   217,   217,
   nil,   217,   nil,   217,   225,   nil,   nil,   nil,   nil,   225,
   nil,   nil,   nil,   221,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   221,   221,   nil,   nil,   221,   221,   221,   221,   221,
   221,   221,   221,   225,   221,   nil,   221,   106,   nil,   nil,
   225,   225,   106,   nil,   nil,   nil,   nil,   nil,   nil,   225,
   225,   nil,   nil,   225,   225,   225,   225,   225,   225,   225,
   225,    15,   225,   nil,   225,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   106,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   106,   106,   nil,   nil,   106,   106,   106,   106,
   106,   106,   106,   106,   nil,   106,   236,   106,    15,   nil,
   nil,   236,   nil,   nil,   nil,   nil,    15,    15,   nil,   nil,
    15,    15,    15,    15,    15,    15,    15,    15,     8,    15,
   nil,    15,   nil,     8,   nil,   nil,   nil,   nil,   nil,     8,
     8,     8,     8,   236,   nil,   nil,   nil,   nil,    80,   nil,
   nil,   236,   236,    80,   nil,   236,   236,   236,   236,   236,
   236,   236,   236,   nil,   236,     8,   236,   nil,   nil,   nil,
   nil,   nil,   nil,     8,     8,   nil,   nil,     8,     8,     8,
     8,     8,     8,     8,     8,    80,     8,   nil,     8,   nil,
   nil,   nil,   nil,    80,    80,   nil,   197,    80,    80,    80,
    80,    80,    80,    80,    80,   241,    80,   nil,    80,   nil,
   241,   197,   nil,   197,   197,   241,   197,   197,   197,   197,
   nil,   nil,   nil,   166,   166,    13,   166,   166,   166,   nil,
    13,   nil,   nil,   166,   166,   166,   166,   166,   166,    13,
   nil,   nil,   241,   nil,   nil,   nil,   nil,    73,   nil,   nil,
   241,   241,    73,   nil,   241,   241,   241,   241,   241,   241,
   241,   241,    13,   241,   nil,   241,   nil,   nil,   nil,   nil,
    13,    13,   nil,   nil,    13,    13,    13,    13,    13,    13,
    13,    13,   121,    13,    73,    13,   nil,   121,   nil,   nil,
   nil,   nil,    73,    73,   nil,   nil,    73,    73,    73,    73,
    73,    73,    73,    73,   262,    73,   nil,    73,   nil,   262,
   nil,   121,   nil,   nil,   nil,   nil,   nil,   nil,   121,   121,
   nil,   nil,   nil,   nil,    77,   nil,   nil,   121,   121,    77,
   nil,   121,   121,   121,   121,   121,   121,   121,   121,   nil,
   121,   262,   121,   nil,   nil,   nil,    78,   nil,   nil,   262,
   262,    78,   nil,   262,   262,   262,   262,   262,   262,   262,
   262,    77,   262,   nil,   262,   nil,    79,   nil,   nil,    77,
    77,    79,   nil,    77,    77,    77,    77,    77,    77,    77,
    77,   nil,    77,    78,    77,   nil,   nil,   nil,   271,   nil,
   nil,    78,    78,   271,   nil,    78,    78,    78,    78,    78,
    78,    78,    78,    79,    78,   nil,    78,   nil,   nil,   nil,
   nil,    79,    79,   nil,   nil,    79,    79,    79,    79,    79,
    79,    79,    79,   nil,    79,   271,    79,   nil,   nil,   nil,
   nil,    86,   nil,   271,   271,   nil,    86,   271,   271,   271,
   271,   271,   271,   271,   271,    86,   271,   nil,   271,   nil,
   nil,    87,   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    86,   nil,
   nil,   nil,   nil,   153,   nil,   nil,    86,    86,   153,   nil,
    86,    86,    86,    86,    86,    86,    86,    86,    87,    86,
   nil,    86,   nil,    88,   nil,   nil,    87,    87,    88,   nil,
    87,    87,    87,    87,    87,    87,    87,    87,   nil,    87,
   153,    87,   nil,   nil,   nil,    89,   nil,   nil,   153,   153,
    89,   nil,   153,   153,   153,   153,   153,   153,   153,   153,
    88,   153,   nil,   153,   nil,    90,   nil,   nil,    88,    88,
    90,   nil,    88,    88,    88,    88,    88,    88,    88,    88,
   nil,    88,    89,    88,   nil,   nil,   nil,   nil,   nil,   nil,
    89,    89,   nil,   nil,    89,    89,    89,    89,    89,    89,
    89,    89,    90,    89,   nil,    89,   nil,   nil,   nil,   nil,
    90,    90,   nil,   nil,    90,    90,    90,    90,    90,    90,
    90,    90,   163,    90,   nil,    90,   nil,   163,   nil,   nil,
   nil,   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    91,   nil,   nil,   nil,   nil,    91,   nil,   nil,
   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,   163,   163,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   163,   163,    26,
   nil,   163,   163,   163,   163,   163,   163,   163,   163,    91,
   163,   nil,   163,   nil,   nil,   nil,   nil,    91,    91,   nil,
   nil,    91,    91,    91,    91,    91,    91,    91,    91,   170,
    91,    26,    91,   nil,   170,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,    26,    26,    26,    26,    26,
    26,   193,    26,   nil,    26,   nil,   193,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   170,   170,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   170,   170,    31,   nil,   170,   170,
   170,   170,   170,   170,   170,   170,   nil,   170,   193,   170,
   nil,   nil,   nil,   nil,   nil,   nil,   193,   193,   nil,   nil,
   193,   193,   193,   193,   193,   193,   193,   193,    31,   193,
   199,   193,   nil,   nil,   nil,   199,    31,    31,   nil,   nil,
    31,    31,    31,    31,    31,    31,    31,    31,   nil,    31,
   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   199,
   nil,   nil,   nil,   nil,   nil,   nil,   199,   199,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   199,   199,   nil,   nil,   199,
   199,   199,   199,   199,   199,   199,   199,   nil,   199,   nil,
   199 ]

racc_action_pointer = [
     9,   134,   nil,   nil,   nil,   133,   nil,   125,   493,   139,
   nil,   147,     2,   590,    58,   436,   131,   nil,   nil,   147,
   -16,   100,   nil,    80,    33,   -13,   999,   nil,   nil,   nil,
   nil,  1076,   nil,   nil,   nil,   nil,   101,   nil,   nil,   147,
   nil,   148,   149,   150,   152,   153,   102,   nil,   110,   161,
   105,   nil,   nil,    31,   nil,   nil,   102,   nil,    -4,   156,
    79,   -13,   nil,   nil,   nil,   nil,   nil,   151,   162,   166,
   nil,   157,     5,   612,   147,   nil,   nil,   689,   711,   731,
   513,    15,   nil,   nil,   179,   149,   796,   816,   858,   880,
   900,   977,   187,   nil,    31,   132,   nil,   nil,   189,   nil,
    14,   nil,   nil,   196,   nil,   195,   412,   201,   170,   190,
   191,   nil,   189,   190,   191,   177,   nil,   nil,   nil,   nil,
   188,   647,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   210,   211,   212,   213,   214,   217,   218,   nil,
   nil,   nil,   235,   nil,   nil,    -3,   nil,   nil,   nil,   nil,
   nil,   233,   238,   838,   nil,   204,    -7,   nil,   nil,   nil,
   nil,   214,   245,   957,   206,   nil,   559,   242,   217,   nil,
  1034,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1056,   253,   259,   nil,   559,   264,  1115,
    37,    -2,   258,    86,   -19,   119,   260,    -1,   -26,   143,
   176,   200,   233,   257,   290,   nil,   nil,   318,   nil,   nil,
   nil,   351,   nil,   nil,   nil,   379,   261,   267,   nil,   230,
    10,   nil,   nil,   nil,   nil,    -9,   471,    22,    25,    -5,
     7,   570,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,    45,    91,     6,    66,
   nil,   nil,   669,    94,   nil,    99,   104,   nil,   117,   120,
   nil,   753,   nil,   nil,   nil,    84,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -168,  -168,    -1,    -2,    -3,    -5,   -20,  -168,  -168,  -168,
    -4,  -168,  -168,  -168,  -168,  -168,   -34,   -35,   -36,   -38,
   -41,  -162,  -118,  -119,  -123,  -126,  -168,  -128,  -129,  -130,
  -131,  -168,  -133,  -134,  -135,  -137,  -168,  -139,  -140,  -168,
  -142,  -168,  -168,  -168,  -168,  -168,  -149,  -150,  -154,  -168,
  -168,  -160,  -161,  -168,  -165,  -166,  -168,   280,  -168,  -168,
  -168,   -46,   -47,   -48,   -50,   -51,   -91,   -28,   -30,   -32,
   -33,   -67,  -168,  -168,  -168,   -40,  -162,  -168,  -168,  -168,
  -168,  -168,  -127,  -136,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -152,  -153,  -168,  -168,  -164,  -167,    -6,   -12,
   -16,   -14,   -15,  -168,   -21,  -168,  -168,  -168,  -168,  -168,
  -168,   -55,   -57,   -59,   -60,  -168,   -45,   -27,   -29,   -31,
   -69,  -168,   -43,   -37,   -39,  -120,  -121,  -122,  -124,  -125,
  -132,  -138,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -151,
  -155,  -157,  -168,  -159,  -163,  -168,   -13,   -17,   -18,   -19,
   -22,  -168,   -25,  -168,   -52,  -168,  -168,   -56,   -58,   -61,
   -44,   -75,  -168,  -168,   -68,   -77,  -168,  -168,   -94,   -96,
  -168,   -99,  -100,  -101,  -103,  -104,  -105,  -106,  -107,  -108,
  -115,  -116,  -117,  -141,  -143,  -144,  -145,  -146,  -147,  -148,
  -158,   -11,   -23,  -168,  -168,   -85,   -53,  -168,    -7,  -168,
  -168,  -168,  -117,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,   -49,   -90,  -168,   -98,   -24,
   -26,  -168,   -54,   -62,   -63,  -168,  -168,  -168,   -42,   -76,
   -70,   -72,   -73,   -74,  -102,   -95,  -168,  -168,  -168,  -168,
  -168,  -168,   -81,   -82,   -87,  -168,   -89,  -109,  -110,  -111,
  -112,  -113,  -114,   -97,   -84,   -64,  -168,    -8,  -168,  -168,
   -80,   -86,  -168,  -168,   -88,  -168,   -66,   -93,  -168,  -168,
   -71,  -168,   -79,   -83,   -65,  -168,    -9,   -10,   -78,   -92 ]

racc_goto_table = [
    75,    20,   101,    62,    83,   194,    20,    20,    20,    61,
    60,   151,   242,    99,   231,   230,   232,   104,   164,   128,
   129,   240,   235,   253,    84,   247,   248,   249,   250,   251,
   252,    16,   125,   126,   127,   218,    67,    68,    69,    70,
   142,   116,    82,   260,   140,     1,   141,     2,     3,     4,
     5,    10,   259,    98,   124,    83,    83,    83,    83,    83,
   201,   228,   150,    62,   146,   131,    20,   105,   123,    61,
   122,   120,   270,   254,   232,   161,   198,   216,   272,   133,
   134,   135,   136,   137,   138,   222,   223,   278,   224,   101,
   117,   118,   119,   263,   265,   160,   229,   266,   219,   152,
   191,   nil,   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   255,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   233,   nil,   195,    62,   nil,   nil,
   nil,   nil,   196,    61,   197,   nil,   202,   nil,   215,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   152,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   215,   nil,   nil,
   nil,   nil,   233,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   195,   nil,   261,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   215,   nil,
   nil,   nil,    84,   nil,   195,   nil,   267,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   279 ]

racc_goto_check = [
    25,    19,    12,    13,    51,    20,    19,    19,    19,    30,
    15,    18,    49,     9,    43,    42,    44,    16,    39,    62,
    62,    47,    54,    55,    19,    47,    47,    47,    47,    47,
    47,    21,    61,    61,    61,    56,    21,    21,    21,    22,
    64,    25,    65,    49,    75,     1,    76,     2,     3,     4,
     5,     6,    47,     7,    25,    51,    51,    51,    51,    51,
    39,     8,    16,    13,    11,    25,    19,    17,    23,    30,
    15,    27,    43,    20,    44,    28,    29,    32,    47,    19,
    19,    19,    19,    19,    19,    36,    37,    47,    38,    12,
    22,    22,    22,    20,    40,    25,    39,    41,    18,    19,
     9,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,    19,    13,   nil,   nil,
   nil,   nil,    30,    30,    15,   nil,    19,   nil,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,
   nil,   nil,    19,   nil,    19,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25 ]

racc_goto_pointer = [
   nil,    45,    47,    48,    49,    50,    46,    -5,  -137,   -45,
   nil,   -36,   -56,    -9,   nil,    -2,   -43,     7,   -95,    -7,
  -148,    23,    23,    -5,   nil,   -20,   nil,     0,   -45,   -85,
    -3,   nil,   -90,   nil,   nil,   nil,  -112,  -111,  -109,  -103,
  -162,  -159,  -185,  -186,  -184,   nil,   nil,  -184,   nil,  -194,
   nil,   -22,   nil,   nil,  -181,  -194,  -135,   nil,   nil,   nil,
   nil,   -45,   -61,   nil,   -54,    16,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -50,   -48,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   103,   nil,   nil,   nil,   nil,
   100,   nil,    29,   165,     6,   nil,   nil,   nil,   nil,   182,
   nil,   nil,   nil,    18,    19,    37,    71,   nil,   nil,   nil,
    38,    63,   243,    64,    65,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   181,   175,   166,   176,   nil,
   177,    23,   178,   179,   168,   169,   171,   172,   173,   174,
   180,    22,    24,    25,    26,    27,    28,    30,    32,    33,
    34,    36,    40,    47,    50,   nil,   nil,    54,    55 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 68, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  2, 70, :_reduce_4,
  0, 73, :_reduce_none,
  3, 73, :_reduce_6,
  0, 75, :_reduce_none,
  2, 75, :_reduce_8,
  4, 75, :_reduce_9,
  4, 75, :_reduce_10,
  3, 74, :_reduce_11,
  1, 74, :_reduce_none,
  2, 76, :_reduce_13,
  1, 77, :_reduce_none,
  1, 77, :_reduce_15,
  0, 78, :_reduce_16,
  1, 78, :_reduce_17,
  1, 78, :_reduce_18,
  3, 80, :_reduce_19,
  1, 72, :_reduce_none,
  4, 71, :_reduce_21,
  5, 71, :_reduce_22,
  3, 84, :_reduce_23,
  3, 85, :_reduce_24,
  1, 85, :_reduce_none,
  4, 83, :_reduce_26,
  4, 81, :_reduce_27,
  3, 81, :_reduce_28,
  4, 81, :_reduce_29,
  3, 81, :_reduce_30,
  4, 81, :_reduce_31,
  3, 81, :_reduce_32,
  3, 81, :_reduce_33,
  2, 81, :_reduce_34,
  1, 88, :_reduce_35,
  1, 88, :_reduce_36,
  3, 90, :_reduce_37,
  1, 90, :_reduce_none,
  3, 91, :_reduce_39,
  2, 91, :_reduce_40,
  1, 91, :_reduce_none,
  5, 89, :_reduce_42,
  2, 93, :_reduce_43,
  3, 82, :_reduce_44,
  2, 82, :_reduce_45,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 99, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  3, 100, :_reduce_52,
  4, 100, :_reduce_53,
  5, 101, :_reduce_54,
  1, 102, :_reduce_55,
  2, 102, :_reduce_56,
  1, 102, :_reduce_57,
  2, 102, :_reduce_58,
  1, 102, :_reduce_59,
  1, 102, :_reduce_60,
  2, 102, :_reduce_61,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  2, 104, :_reduce_64,
  4, 105, :_reduce_65,
  1, 107, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_68,
  0, 95, :_reduce_none,
  3, 95, :_reduce_70,
  3, 109, :_reduce_71,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  0, 96, :_reduce_none,
  2, 96, :_reduce_76,
  1, 112, :_reduce_none,
  6, 113, :_reduce_78,
  5, 113, :_reduce_79,
  4, 115, :_reduce_80,
  3, 115, :_reduce_81,
  1, 116, :_reduce_none,
  3, 116, :_reduce_83,
  3, 87, :_reduce_84,
  1, 87, :_reduce_none,
  4, 117, :_reduce_86,
  3, 117, :_reduce_87,
  4, 119, :_reduce_88,
  3, 119, :_reduce_89,
  2, 120, :_reduce_90,
  1, 97, :_reduce_91,
  3, 108, :_reduce_92,
  1, 108, :_reduce_none,
  1, 106, :_reduce_none,
  3, 106, :_reduce_95,
  1, 121, :_reduce_none,
  3, 121, :_reduce_97,
  2, 122, :_reduce_98,
  1, 122, :_reduce_none,
  1, 123, :_reduce_none,
  1, 124, :_reduce_none,
  3, 124, :_reduce_102,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  3, 126, :_reduce_109,
  3, 126, :_reduce_110,
  3, 126, :_reduce_111,
  3, 126, :_reduce_112,
  3, 126, :_reduce_113,
  3, 126, :_reduce_114,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 127, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  3, 128, :_reduce_120,
  3, 128, :_reduce_121,
  3, 128, :_reduce_122,
  1, 128, :_reduce_none,
  3, 129, :_reduce_124,
  3, 129, :_reduce_125,
  1, 129, :_reduce_none,
  2, 130, :_reduce_127,
  1, 130, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  3, 132, :_reduce_132,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 136, :_reduce_137,
  3, 79, :_reduce_138,
  1, 79, :_reduce_none,
  1, 138, :_reduce_none,
  4, 134, :_reduce_141,
  1, 134, :_reduce_none,
  4, 139, :_reduce_143,
  4, 139, :_reduce_144,
  4, 139, :_reduce_145,
  4, 139, :_reduce_146,
  4, 139, :_reduce_147,
  4, 139, :_reduce_148,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 111, :_reduce_151,
  2, 111, :_reduce_152,
  2, 111, :_reduce_153,
  1, 111, :_reduce_154,
  3, 140, :_reduce_155,
  1, 141, :_reduce_none,
  1, 142, :_reduce_none,
  2, 143, :_reduce_158,
  1, 143, :_reduce_159,
  1, 131, :_reduce_160,
  1, 131, :_reduce_161,
  1, 92, :_reduce_162,
  3, 118, :_reduce_163,
  2, 118, :_reduce_164,
  1, 118, :_reduce_none,
  1, 144, :_reduce_none,
  2, 145, :_reduce_167 ]

racc_reduce_n = 168

racc_shift_n = 280

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :modulo => 52,
  :solidus => 53,
  :CURRENT_USER => 54,
  :period => 55,
  :COUNT => 56,
  :LENGTH => 57,
  :AVG => 58,
  :MAX => 59,
  :MIN => 60,
  :SUM => 61,
  :E => 62,
  :quote => 63,
  :character_string_literal => 64,
  :DATE => 65,
  :date_string => 66 }

racc_nt_base = 67

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "modulo",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "LENGTH",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "exact_numeric_literal",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "general_literal",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_37(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_54(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_71(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_84(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_92(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Modulo.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_127(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_132(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Length.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_158(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
