#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 346)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    48,    80,    59,   259,    59,    31,   109,  -137,   246,    74,
     8,    48,   235,   218,   247,    59,   237,   242,   238,   239,
    48,   110,   263,   112,   113,    31,   114,   115,   226,   227,
   103,    76,   148,   149,    66,    81,    66,    21,  -137,  -137,
  -137,  -137,    48,   144,   204,    51,    52,    66,    21,    35,
    49,    39,    41,    42,    43,    44,    45,    21,    53,     7,
    56,    49,     8,    48,   265,    51,    52,    21,    31,    35,
    49,    39,    41,    42,    43,    44,    45,    17,    53,    21,
    56,    39,    41,    42,    43,    44,    45,   204,    51,    52,
    76,    48,    49,    77,    78,    79,   164,    53,   272,    56,
    21,   274,    53,   116,    56,    96,    95,   275,    51,    52,
   269,   270,    35,    49,    39,    41,    42,    43,    44,    45,
   171,    53,   276,    56,    48,    76,   277,   168,    21,   240,
   278,    76,     9,    11,    12,    57,    51,    52,    58,   109,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
    72,    56,    73,   240,   110,   -92,   112,   113,    85,   114,
   115,    21,    86,    87,    88,    89,    90,    91,  -157,    51,
    52,    92,    93,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,    94,    56,    21,   240,    97,     8,    72,
    72,    72,   122,    51,    52,    76,   131,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,    76,    56,   140,
   240,   145,   146,   150,   108,   154,    66,   156,    21,   157,
   158,   159,   160,    76,   163,   184,    51,    52,   185,   186,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   187,    56,    21,   240,   188,   189,   190,   191,   193,   194,
    51,    52,    66,   200,    35,    49,    39,    41,    42,    43,
    44,    45,    48,    53,   201,    56,   204,   240,    59,   218,
   221,   222,   228,   131,   242,    21,   257,   258,   204,   nil,
   nil,   nil,   103,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   nil,    56,    21,
   240,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    21,
    53,   nil,    56,    48,   nil,   nil,   nil,   nil,   164,   nil,
   nil,   nil,    21,    39,    41,    42,    43,    44,    45,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,   171,    53,   nil,    56,    48,   nil,   nil,   168,
    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
   nil,    53,   nil,    56,    48,   nil,   nil,   nil,   nil,   164,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   171,    53,   nil,    56,    48,   nil,   nil,
   168,    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    17,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,   nil,    53,    48,    56,    21,   nil,
   nil,   240,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   nil,    56,   nil,    31,   nil,   nil,   nil,   nil,   nil,    13,
    14,    15,    17,    21,   nil,   nil,   nil,   nil,    48,   nil,
   nil,    51,    52,    31,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   nil,    53,    21,    56,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,    21,    53,   nil,    56,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   nil,    56,   nil,
    31,   109,   nil,   nil,   107,     8,   nil,   nil,   108,   nil,
   nil,   nil,   nil,   nil,   nil,    48,   110,   nil,   112,   113,
    31,   114,   115,   nil,   nil,   nil,   nil,   nil,   nil,    17,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    48,   nil,   nil,
    51,    52,    31,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    21,    53,   nil,    56,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    48,    53,    21,    56,   nil,   164,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   nil,    56,   nil,   240,
   nil,   171,   nil,   nil,   nil,   nil,   nil,   nil,   168,    21,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,    31,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,   nil,
    53,    21,    56,   nil,   nil,   nil,    48,   nil,   nil,    51,
    52,    31,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    21,    53,   nil,    56,   nil,    48,   nil,   nil,    51,
    52,    31,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    21,    56,   nil,   nil,   nil,    48,   nil,
   nil,    51,    52,   240,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,    21,    53,   nil,    56,   nil,   nil,   nil,
   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   nil,    53,    21,    56,   nil,   nil,   nil,
   nil,    48,   nil,    51,    52,   nil,    31,    35,    49,    39,
    41,    42,    43,    44,    45,   133,    53,   nil,    56,   205,
   206,    48,   207,   208,   209,   nil,    31,   nil,   nil,   210,
   211,   212,   213,   214,   215,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    48,   nil,   nil,    51,    52,    31,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    21,    53,
   nil,    56,   nil,    48,   nil,   nil,    51,    52,    31,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,   nil,    53,
    21,    56,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,
    31,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
    21,    53,   nil,    56,   nil,    48,   nil,   nil,    51,    52,
    31,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
   nil,    53,    21,    56,   nil,   nil,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    21,    53,   nil,    56,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    48,    53,   nil,    56,   nil,   164,   nil,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,   nil,   nil,   nil,   nil,    31,   nil,   nil,
   nil,   171,   nil,   nil,   nil,   nil,   nil,   nil,   168,    21,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,    31,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    21,
    53,   nil,    56,   nil,   nil,   nil,   nil,    51,    52,   nil,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    48,
    53,    21,    56,   nil,   164,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   168,    21,   nil,   nil,   nil,
   nil,    48,   nil,   nil,    51,    52,    31,   nil,    35,    49,
    39,    41,    42,    43,    44,    45,   nil,    53,    21,    56,
   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    21,    53,
    48,    56,   nil,   nil,   nil,   164,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,   nil,    53,
   nil,    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   171,
   nil,   nil,   nil,   nil,   nil,   nil,   168,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,   nil,    53,   nil,
    56 ]

racc_action_check = [
   240,    25,    72,   231,   157,   240,   198,    23,   209,    20,
   240,   201,   202,   236,   209,    12,   205,   238,   205,   205,
    81,   198,   241,   198,   198,    81,   198,   198,   198,   198,
    58,    20,   100,   100,    72,    25,   157,   240,    23,    23,
    23,    23,   259,    94,   202,   240,   240,    12,   201,   240,
   240,   240,   240,   240,   240,   240,   240,    81,   240,     0,
   240,   201,     0,    14,   246,    81,    81,    58,    14,    81,
    81,    81,    81,    81,    81,    81,    81,    14,    81,   259,
    81,    58,    58,    58,    58,    58,    58,   256,    94,    94,
   257,   204,   259,    24,    24,    24,   204,   208,   260,   208,
    14,   264,   239,    61,   239,    53,    53,   266,    14,    14,
   258,   258,    14,    14,    14,    14,    14,    14,    14,    14,
   204,    14,   267,    14,   206,    61,   269,   204,   204,   206,
   270,   276,     1,     5,     7,     9,   204,   204,    11,   123,
   204,   204,   204,   204,   204,   204,   204,   204,   210,   204,
    16,   204,    19,   210,   123,    21,   123,   123,    36,   123,
   123,   206,    39,    41,    42,    43,    44,    45,    46,   206,
   206,    48,    49,   206,   206,   206,   206,   206,   206,   206,
   206,   211,   206,    50,   206,   210,   211,    56,    59,    67,
    68,    69,    71,   210,   210,    74,    84,   210,   210,   210,
   210,   210,   210,   210,   210,   212,   210,    85,   210,    92,
   212,    95,    98,   104,   106,   108,   109,   110,   211,   111,
   113,   114,   115,   116,   121,   133,   211,   211,   134,   135,
   211,   211,   211,   211,   211,   211,   211,   211,   213,   211,
   136,   211,   212,   213,   137,   138,   139,   143,   152,   153,
   212,   212,   156,   162,   212,   212,   212,   212,   212,   212,
   212,   212,   214,   212,   163,   212,   165,   214,   168,   169,
   195,   196,   199,   203,   207,   213,   227,   228,   230,   nil,
   nil,   nil,   146,   213,   213,   nil,   nil,   213,   213,   213,
   213,   213,   213,   213,   213,   215,   213,   nil,   213,   214,
   215,   nil,   nil,   nil,   nil,   nil,   nil,   214,   214,   nil,
   nil,   214,   214,   214,   214,   214,   214,   214,   214,   146,
   214,   nil,   214,   218,   nil,   nil,   nil,   nil,   218,   nil,
   nil,   nil,   215,   146,   146,   146,   146,   146,   146,   nil,
   215,   215,   nil,   nil,   215,   215,   215,   215,   215,   215,
   215,   215,   218,   215,   nil,   215,   222,   nil,   nil,   218,
   218,   222,   nil,   nil,   nil,   nil,   nil,   nil,   218,   218,
   nil,   nil,   218,   218,   218,   218,   218,   218,   218,   218,
   nil,   218,   nil,   218,   226,   nil,   nil,   nil,   nil,   226,
   nil,   nil,   nil,   222,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   222,   222,   nil,   nil,   222,   222,   222,   222,   222,
   222,   222,   222,   226,   222,   nil,   222,   107,   nil,   nil,
   226,   226,   107,   nil,   nil,   nil,   nil,   nil,   nil,   226,
   226,   nil,   nil,   226,   226,   226,   226,   226,   226,   226,
   226,    15,   226,   nil,   226,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   107,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   107,   107,   nil,   nil,   107,   107,   107,   107,
   107,   107,   107,   107,   nil,   107,   237,   107,    15,   nil,
   nil,   237,   nil,   nil,   nil,   nil,    15,    15,   nil,   nil,
    15,    15,    15,    15,    15,    15,    15,    15,     8,    15,
   nil,    15,   nil,     8,   nil,   nil,   nil,   nil,   nil,     8,
     8,     8,     8,   237,   nil,   nil,   nil,   nil,    80,   nil,
   nil,   237,   237,    80,   nil,   237,   237,   237,   237,   237,
   237,   237,   237,   nil,   237,     8,   237,   nil,   nil,   nil,
   nil,   nil,   nil,     8,     8,   nil,   nil,     8,     8,     8,
     8,     8,     8,     8,     8,    80,     8,   nil,     8,   nil,
   nil,   nil,   nil,    80,    80,   nil,   nil,    80,    80,    80,
    80,    80,    80,    80,    80,   242,    80,   nil,    80,   nil,
   242,    60,   nil,   nil,    60,   242,   nil,   nil,    60,   nil,
   nil,   nil,   nil,   nil,   nil,    13,    60,   nil,    60,    60,
    13,    60,    60,   nil,   nil,   nil,   nil,   nil,   nil,    13,
   nil,   nil,   242,   nil,   nil,   nil,   nil,    73,   nil,   nil,
   242,   242,    73,   nil,   242,   242,   242,   242,   242,   242,
   242,   242,    13,   242,   nil,   242,   nil,   nil,   nil,   nil,
    13,    13,   nil,   nil,    13,    13,    13,    13,    13,    13,
    13,    13,   122,    13,    73,    13,   nil,   122,   nil,   nil,
   nil,   nil,    73,    73,   nil,   nil,    73,    73,    73,    73,
    73,    73,    73,    73,   263,    73,   nil,    73,   nil,   263,
   nil,   122,   nil,   nil,   nil,   nil,   nil,   nil,   122,   122,
   nil,   nil,   nil,   nil,    77,   nil,   nil,   122,   122,    77,
   nil,   122,   122,   122,   122,   122,   122,   122,   122,   nil,
   122,   263,   122,   nil,   nil,   nil,    78,   nil,   nil,   263,
   263,    78,   nil,   263,   263,   263,   263,   263,   263,   263,
   263,    77,   263,   nil,   263,   nil,    79,   nil,   nil,    77,
    77,    79,   nil,    77,    77,    77,    77,    77,    77,    77,
    77,   nil,    77,    78,    77,   nil,   nil,   nil,   272,   nil,
   nil,    78,    78,   272,   nil,    78,    78,    78,    78,    78,
    78,    78,    78,    79,    78,   nil,    78,   nil,   nil,   nil,
   nil,    79,    79,   nil,   nil,    79,    79,    79,    79,    79,
    79,    79,    79,   nil,    79,   272,    79,   nil,   nil,   nil,
   nil,    86,   nil,   272,   272,   nil,    86,   272,   272,   272,
   272,   272,   272,   272,   272,    86,   272,   nil,   272,   167,
   167,    87,   167,   167,   167,   nil,    87,   nil,   nil,   167,
   167,   167,   167,   167,   167,   nil,   nil,   nil,    86,   nil,
   nil,   nil,   nil,   154,   nil,   nil,    86,    86,   154,   nil,
    86,    86,    86,    86,    86,    86,    86,    86,    87,    86,
   nil,    86,   nil,    88,   nil,   nil,    87,    87,    88,   nil,
    87,    87,    87,    87,    87,    87,    87,    87,   nil,    87,
   154,    87,   nil,   nil,   nil,    89,   nil,   nil,   154,   154,
    89,   nil,   154,   154,   154,   154,   154,   154,   154,   154,
    88,   154,   nil,   154,   nil,    90,   nil,   nil,    88,    88,
    90,   nil,    88,    88,    88,    88,    88,    88,    88,    88,
   nil,    88,    89,    88,   nil,   nil,   nil,   nil,   nil,   nil,
    89,    89,   nil,   nil,    89,    89,    89,    89,    89,    89,
    89,    89,    90,    89,   nil,    89,   nil,   nil,   nil,   nil,
    90,    90,   nil,   nil,    90,    90,    90,    90,    90,    90,
    90,    90,   164,    90,   nil,    90,   nil,   164,   nil,   nil,
   nil,   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    91,   nil,   nil,   nil,   nil,    91,   nil,   nil,
   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,   164,   164,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   164,   164,    26,
   nil,   164,   164,   164,   164,   164,   164,   164,   164,    91,
   164,   nil,   164,   nil,   nil,   nil,   nil,    91,    91,   nil,
   nil,    91,    91,    91,    91,    91,    91,    91,    91,   171,
    91,    26,    91,   nil,   171,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,    26,    26,    26,    26,    26,
    26,   194,    26,   nil,    26,   nil,   194,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   171,   171,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   171,   171,    31,   nil,   171,   171,
   171,   171,   171,   171,   171,   171,   nil,   171,   194,   171,
   nil,   nil,   nil,   nil,   nil,   nil,   194,   194,   nil,   nil,
   194,   194,   194,   194,   194,   194,   194,   194,    31,   194,
   200,   194,   nil,   nil,   nil,   200,    31,    31,   nil,   nil,
    31,    31,    31,    31,    31,    31,    31,    31,   nil,    31,
   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,
   nil,   nil,   nil,   nil,   nil,   nil,   200,   200,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   200,   200,   nil,   nil,   200,
   200,   200,   200,   200,   200,   200,   200,   nil,   200,   nil,
   200 ]

racc_action_pointer = [
    47,   132,   nil,   nil,   nil,   131,   nil,   121,   493,   135,
   nil,   135,     5,   590,    58,   436,   129,   nil,   nil,   145,
   -11,   100,   nil,   -12,    43,   -18,   999,   nil,   nil,   nil,
   nil,  1076,   nil,   nil,   nil,   nil,   103,   nil,   nil,   152,
   nil,   153,   154,   155,   156,   157,   106,   nil,   116,   167,
   121,   nil,   nil,    42,   nil,   nil,   121,   nil,    25,   173,
   574,    83,   nil,   nil,   nil,   nil,   nil,   168,   169,   170,
   nil,   161,    -8,   612,   153,   nil,   nil,   689,   711,   731,
   513,    15,   nil,   nil,   185,   165,   796,   816,   858,   880,
   900,   977,   204,   nil,    38,   148,   nil,   nil,   205,   nil,
    24,   nil,   nil,   nil,   202,   nil,   200,   412,   205,   174,
   194,   196,   nil,   194,   195,   196,   181,   nil,   nil,   nil,
   nil,   192,   647,   132,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   214,   217,   218,   229,   233,   234,   235,
   nil,   nil,   nil,   242,   nil,   nil,   277,   nil,   nil,   nil,
   nil,   nil,   237,   242,   838,   nil,   210,    -6,   nil,   nil,
   nil,   nil,   220,   261,   957,   223,   nil,   785,   258,   233,
   nil,  1034,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1056,   259,   264,   nil,    -1,   268,
  1115,     6,     1,   262,    86,   -19,   119,   264,    34,   -26,
   143,   176,   200,   233,   257,   290,   nil,   nil,   318,   nil,
   nil,   nil,   351,   nil,   nil,   nil,   379,   266,   272,   nil,
   235,    -4,   nil,   nil,   nil,   nil,   -23,   471,     7,    39,
    -5,   -14,   570,   nil,   nil,   nil,    24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,    48,   104,    37,
    62,   nil,   nil,   669,    90,   nil,    96,   115,   nil,   121,
   125,   nil,   753,   nil,   nil,   nil,    89,   nil,   nil,   nil,
   nil ]

racc_action_default = [
  -169,  -169,    -1,    -2,    -3,    -5,   -21,  -169,  -169,  -169,
    -4,  -169,  -169,  -169,  -169,  -169,   -35,   -36,   -37,   -39,
   -42,  -163,  -119,  -120,  -124,  -127,  -169,  -129,  -130,  -131,
  -132,  -169,  -134,  -135,  -136,  -138,  -169,  -140,  -141,  -169,
  -143,  -169,  -169,  -169,  -169,  -169,  -150,  -151,  -155,  -169,
  -169,  -161,  -162,  -169,  -166,  -167,  -169,   281,  -169,  -169,
  -169,   -47,   -48,   -49,   -51,   -52,   -92,   -29,   -31,   -33,
   -34,   -68,  -169,  -169,  -169,   -41,  -163,  -169,  -169,  -169,
  -169,  -169,  -128,  -137,  -169,  -169,  -169,  -169,  -169,  -169,
  -169,  -169,  -153,  -154,  -169,  -169,  -165,  -168,    -6,   -12,
   -17,   -14,   -15,   -16,  -169,   -22,  -169,  -169,  -169,  -169,
  -169,  -169,   -56,   -58,   -60,   -61,  -169,   -46,   -28,   -30,
   -32,   -70,  -169,   -44,   -38,   -40,  -121,  -122,  -123,  -125,
  -126,  -133,  -139,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
  -152,  -156,  -158,  -169,  -160,  -164,  -169,   -13,   -18,   -19,
   -20,   -23,  -169,   -26,  -169,   -53,  -169,  -169,   -57,   -59,
   -62,   -45,   -76,  -169,  -169,   -69,   -78,  -169,  -169,   -95,
   -97,  -169,  -100,  -101,  -102,  -104,  -105,  -106,  -107,  -108,
  -109,  -116,  -117,  -118,  -142,  -144,  -145,  -146,  -147,  -148,
  -149,  -159,   -11,   -24,  -169,  -169,   -86,   -54,  -169,    -7,
  -169,  -169,  -169,  -118,  -169,  -169,  -169,  -169,  -169,  -169,
  -169,  -169,  -169,  -169,  -169,  -169,   -50,   -91,  -169,   -99,
   -25,   -27,  -169,   -55,   -63,   -64,  -169,  -169,  -169,   -43,
   -77,   -71,   -73,   -74,   -75,  -103,   -96,  -169,  -169,  -169,
  -169,  -169,  -169,   -82,   -83,   -88,  -169,   -90,  -110,  -111,
  -112,  -113,  -114,  -115,   -98,   -85,   -65,  -169,    -8,  -169,
  -169,   -81,   -87,  -169,  -169,   -89,  -169,   -67,   -94,  -169,
  -169,   -72,  -169,   -80,   -84,   -66,  -169,    -9,   -10,   -79,
   -93 ]

racc_goto_table = [
    75,    20,   101,    62,    83,   102,    20,    20,    20,    60,
   165,    61,   152,    99,   232,   233,   105,   195,   243,   236,
    16,   129,   130,    70,    84,    67,    68,    69,   254,   241,
   126,   127,   128,   248,   249,   250,   251,   252,   253,   219,
   143,   117,    82,   141,     1,   142,     2,     3,     4,   261,
     5,    10,   202,    98,   125,    83,    83,    83,    83,    83,
   260,   229,   151,    62,   147,   132,    20,   106,   124,   123,
   121,    61,   271,   233,   118,   119,   120,   162,   199,   134,
   135,   136,   137,   138,   139,   255,   273,   217,   230,   223,
   101,   224,   225,   102,   266,   279,   161,   267,   231,   220,
   153,   192,   nil,   nil,   nil,   264,   nil,   nil,   155,   nil,
   nil,   nil,   nil,   nil,   256,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   234,   nil,   196,    62,   nil,
   nil,   nil,   nil,   nil,   198,   197,    61,   203,   nil,   216,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   245,   153,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   216,   nil,
   nil,   nil,   nil,   234,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   196,   nil,   262,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   216,
   nil,   nil,   nil,    84,   nil,   196,   nil,   268,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   280 ]

racc_goto_check = [
    26,    20,    12,    14,    52,    13,    20,    20,    20,    16,
    40,    31,    19,     9,    44,    45,    17,    21,    50,    55,
    22,    63,    63,    23,    20,    22,    22,    22,    56,    48,
    62,    62,    62,    48,    48,    48,    48,    48,    48,    57,
    65,    26,    66,    75,     1,    76,     2,     3,     4,    50,
     5,     6,    40,     7,    26,    52,    52,    52,    52,    52,
    48,     8,    17,    14,    11,    26,    20,    18,    24,    16,
    28,    31,    44,    45,    23,    23,    23,    29,    30,    20,
    20,    20,    20,    20,    20,    21,    48,    33,    40,    37,
    12,    38,    39,    13,    41,    48,    26,    42,    43,    19,
    20,     9,   nil,   nil,   nil,    21,   nil,   nil,    31,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,   nil,    20,    14,   nil,
   nil,   nil,   nil,   nil,    16,    31,    31,    20,   nil,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    52,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,
   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    20,   nil,    52,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,   nil,   nil,    20,   nil,    20,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    44,    46,    47,    48,    50,    46,    -5,  -138,   -45,
   nil,   -36,   -56,   -53,    -9,   nil,    -3,   -44,     7,   -95,
    -7,  -137,    12,     7,    -5,   nil,   -20,   nil,    -1,   -44,
   -84,    -1,   nil,   -81,   nil,   nil,   nil,  -109,  -107,  -106,
  -112,  -163,  -160,  -103,  -187,  -186,   nil,   nil,  -177,   nil,
  -189,   nil,   -22,   nil,   nil,  -185,  -190,  -132,   nil,   nil,
   nil,   nil,   -47,   -59,   nil,   -54,    16,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -51,   -49,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   104,   nil,   nil,   nil,   nil,
   100,   nil,    29,    30,   166,     6,   nil,   nil,   nil,   nil,
   183,   nil,   nil,   nil,    18,    19,    37,    71,   nil,   nil,
   nil,    38,    63,   244,    64,    65,   111,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    46,   182,   176,   167,   177,
   nil,   178,    23,   179,   180,   169,   170,   172,   173,   174,
   175,   181,    22,    24,    25,    26,    27,    28,    32,    33,
    34,    36,    40,    47,    50,   nil,   nil,    54,    55 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 68, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  2, 70, :_reduce_4,
  0, 73, :_reduce_none,
  3, 73, :_reduce_6,
  0, 75, :_reduce_none,
  2, 75, :_reduce_8,
  4, 75, :_reduce_9,
  4, 75, :_reduce_10,
  3, 74, :_reduce_11,
  1, 74, :_reduce_none,
  2, 76, :_reduce_13,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_16,
  0, 78, :_reduce_17,
  1, 78, :_reduce_18,
  1, 78, :_reduce_19,
  3, 81, :_reduce_20,
  1, 72, :_reduce_none,
  4, 71, :_reduce_22,
  5, 71, :_reduce_23,
  3, 85, :_reduce_24,
  3, 86, :_reduce_25,
  1, 86, :_reduce_none,
  4, 84, :_reduce_27,
  4, 82, :_reduce_28,
  3, 82, :_reduce_29,
  4, 82, :_reduce_30,
  3, 82, :_reduce_31,
  4, 82, :_reduce_32,
  3, 82, :_reduce_33,
  3, 82, :_reduce_34,
  2, 82, :_reduce_35,
  1, 89, :_reduce_36,
  1, 89, :_reduce_37,
  3, 91, :_reduce_38,
  1, 91, :_reduce_none,
  3, 92, :_reduce_40,
  2, 92, :_reduce_41,
  1, 92, :_reduce_none,
  5, 90, :_reduce_43,
  2, 94, :_reduce_44,
  3, 83, :_reduce_45,
  2, 83, :_reduce_46,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 100, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  3, 101, :_reduce_53,
  4, 101, :_reduce_54,
  5, 102, :_reduce_55,
  1, 103, :_reduce_56,
  2, 103, :_reduce_57,
  1, 103, :_reduce_58,
  2, 103, :_reduce_59,
  1, 103, :_reduce_60,
  1, 103, :_reduce_61,
  2, 103, :_reduce_62,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  2, 105, :_reduce_65,
  4, 106, :_reduce_66,
  1, 108, :_reduce_none,
  0, 95, :_reduce_none,
  2, 95, :_reduce_69,
  0, 96, :_reduce_none,
  3, 96, :_reduce_71,
  3, 110, :_reduce_72,
  1, 110, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  0, 97, :_reduce_none,
  2, 97, :_reduce_77,
  1, 113, :_reduce_none,
  6, 114, :_reduce_79,
  5, 114, :_reduce_80,
  4, 116, :_reduce_81,
  3, 116, :_reduce_82,
  1, 117, :_reduce_none,
  3, 117, :_reduce_84,
  3, 88, :_reduce_85,
  1, 88, :_reduce_none,
  4, 118, :_reduce_87,
  3, 118, :_reduce_88,
  4, 120, :_reduce_89,
  3, 120, :_reduce_90,
  2, 121, :_reduce_91,
  1, 98, :_reduce_92,
  3, 109, :_reduce_93,
  1, 109, :_reduce_none,
  1, 107, :_reduce_none,
  3, 107, :_reduce_96,
  1, 122, :_reduce_none,
  3, 122, :_reduce_98,
  2, 123, :_reduce_99,
  1, 123, :_reduce_none,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  3, 125, :_reduce_103,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 127, :_reduce_110,
  3, 127, :_reduce_111,
  3, 127, :_reduce_112,
  3, 127, :_reduce_113,
  3, 127, :_reduce_114,
  3, 127, :_reduce_115,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 128, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  3, 129, :_reduce_121,
  3, 129, :_reduce_122,
  3, 129, :_reduce_123,
  1, 129, :_reduce_none,
  3, 130, :_reduce_125,
  3, 130, :_reduce_126,
  1, 130, :_reduce_none,
  2, 131, :_reduce_128,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  3, 133, :_reduce_133,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 136, :_reduce_138,
  3, 79, :_reduce_139,
  1, 79, :_reduce_none,
  1, 138, :_reduce_none,
  4, 80, :_reduce_142,
  1, 80, :_reduce_none,
  4, 139, :_reduce_144,
  4, 139, :_reduce_145,
  4, 139, :_reduce_146,
  4, 139, :_reduce_147,
  4, 139, :_reduce_148,
  4, 139, :_reduce_149,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 112, :_reduce_152,
  2, 112, :_reduce_153,
  2, 112, :_reduce_154,
  1, 112, :_reduce_155,
  3, 140, :_reduce_156,
  1, 141, :_reduce_none,
  1, 142, :_reduce_none,
  2, 143, :_reduce_159,
  1, 143, :_reduce_160,
  1, 132, :_reduce_161,
  1, 132, :_reduce_162,
  1, 93, :_reduce_163,
  3, 119, :_reduce_164,
  2, 119, :_reduce_165,
  1, 119, :_reduce_none,
  1, 144, :_reduce_none,
  2, 145, :_reduce_168 ]

racc_reduce_n = 169

racc_shift_n = 281

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :modulo => 52,
  :solidus => 53,
  :CURRENT_USER => 54,
  :period => 55,
  :COUNT => 56,
  :LENGTH => 57,
  :AVG => 58,
  :MAX => 59,
  :MIN => 60,
  :SUM => 61,
  :E => 62,
  :quote => 63,
  :character_string_literal => 64,
  :DATE => 65,
  :date_string => 66 }

racc_nt_base = 67

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "modulo",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "LENGTH",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "set_function_specification",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "exact_numeric_literal",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "general_literal",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_25(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_38(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_55(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_72(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_85(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_93(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_103(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Modulo.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_128(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_133(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Length.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_159(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 166 omitted

# reduce 167 omitted

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
