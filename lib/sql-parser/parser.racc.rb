#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 347)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    48,  -151,    80,   247,   116,    31,    74,  -138,   159,   248,
   238,    59,   239,   240,     7,   160,   236,     8,   144,    53,
    48,    56,    53,    76,    56,    31,    76,    59,    76,    59,
    96,    95,  -151,  -151,  -151,  -151,    81,    21,  -138,  -138,
  -138,  -138,    48,    66,  -158,    51,    52,   241,   204,    35,
    49,    39,    41,    42,    43,    44,    45,    21,    53,    66,
    56,    66,    48,    51,    52,    51,    52,    31,   163,    35,
    49,    39,    41,    42,    43,    44,    45,    76,    53,    21,
    56,    77,    78,    79,   270,   271,   184,    51,    52,   148,
   149,    35,    49,    39,    41,    42,    43,    44,    45,    21,
    53,   185,    56,  -132,   186,   187,   103,    51,    52,   188,
   189,    35,    49,    39,    41,    42,    43,    44,    45,    48,
    53,   190,    56,   191,    31,   122,   193,   194,    72,    66,
    13,    14,    15,    17,  -132,  -132,  -132,  -132,    72,    48,
   200,   201,    72,    21,    31,   204,    59,   218,   221,     8,
   222,     8,   228,    97,    94,   131,    21,    39,    41,    42,
    43,    44,    45,    93,    51,    52,    92,   243,    35,    49,
    39,    41,    42,    43,    44,    45,    21,    53,  -158,    56,
    91,    90,    89,   103,    51,    52,    88,   109,    35,    49,
    39,    41,    42,    43,    44,    45,    48,    53,    87,    56,
    86,    31,   110,    85,   112,   113,     8,   114,   115,   226,
   227,   109,   258,   259,   204,   260,    48,   -93,    73,   218,
    21,    31,    72,   243,    58,   264,   110,    57,   112,   113,
   266,   114,   115,    21,    39,    41,    42,    43,    44,    45,
   204,    51,    52,    76,    12,    35,    49,    39,    41,    42,
    43,    44,    45,    21,    53,    48,    56,   273,    11,   275,
   164,    51,    52,   276,   277,    35,    49,    39,    41,    42,
    43,    44,    45,   278,    53,    48,    56,   279,   109,     9,
    31,   107,   140,    76,   171,   108,    76,   145,   146,   150,
   108,   168,    21,   110,   131,   112,   113,    48,   114,   115,
    51,    52,    31,   154,    35,    49,    39,    41,    42,    43,
    44,    45,    21,    53,    66,    56,   156,    48,   157,   158,
    51,    52,    31,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,   nil,    53,    21,    56,   nil,   nil,   nil,    48,
   nil,   nil,    51,    52,    31,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    21,    53,   nil,    56,   nil,    48,
   nil,   nil,    51,    52,    31,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,   nil,    53,    21,    56,   nil,   nil,
   nil,    48,   nil,   nil,    51,    52,    31,   nil,    35,    49,
    39,    41,    42,    43,    44,    45,    21,    53,   nil,    56,
   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,
    39,    41,    42,    43,    44,    45,   nil,    53,    21,    56,
   nil,   nil,   nil,   nil,    48,   nil,    51,    52,   nil,    31,
    35,    49,    39,    41,    42,    43,    44,    45,   133,    53,
   nil,    56,   205,   206,    48,   207,   208,   209,   nil,    31,
   nil,   nil,   210,   211,   212,   213,   214,   215,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,    48,   nil,   nil,    51,
    52,    31,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    21,    53,   nil,    56,   nil,    48,   nil,   nil,    51,
    52,    31,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    21,    56,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,    21,    53,   nil,    56,   nil,   nil,    48,
   nil,    51,    52,   nil,    31,    35,    49,    39,    41,    42,
    43,    44,    45,    17,    53,   nil,    56,   nil,   nil,    48,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,
    39,    41,    42,    43,    44,    45,    21,    53,   nil,    56,
   nil,   nil,    48,   nil,    51,    52,   nil,    31,    35,    49,
    39,    41,    42,    43,    44,    45,    17,    53,   nil,    56,
   nil,   nil,    48,   nil,   nil,   nil,   nil,   241,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,   241,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    21,
    53,   nil,    56,   nil,   nil,   nil,   nil,    51,    52,   nil,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    48,
    53,    21,    56,   nil,   164,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,   nil,    31,   nil,   171,   nil,
   nil,   nil,   nil,   nil,   nil,   168,    21,   nil,   nil,   nil,
   nil,    48,   nil,   nil,    51,    52,    31,   nil,    35,    49,
    39,    41,    42,    43,    44,    45,   nil,    53,    21,    56,
   nil,    48,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    21,    53,
   nil,    56,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    21,    53,
    48,    56,   nil,   nil,   nil,   164,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,   nil,    53,
    48,    56,   nil,   nil,   nil,   241,   nil,   nil,   nil,   171,
   nil,   nil,   nil,   nil,   nil,   nil,   168,    21,   nil,   nil,
   nil,   nil,    48,   nil,   nil,    51,    52,   241,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,    21,    53,   nil,
    56,   nil,    48,   nil,   nil,    51,    52,   241,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,   nil,    53,    21,
    56,   nil,   nil,   nil,    48,   nil,   nil,    51,    52,   241,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    21,
    53,   nil,    56,   nil,    48,   nil,   nil,    51,    52,   241,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,   nil,
    53,    21,    56,   nil,   nil,   nil,    48,   nil,   nil,    51,
    52,   241,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    21,    53,   nil,    56,   nil,    48,   nil,   nil,    51,
    52,   241,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    21,    56,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,    21,    53,    48,    56,   nil,   nil,   nil,
   164,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   nil,    53,    48,    56,   nil,   nil,   nil,
    31,   nil,   nil,   nil,   171,   nil,   nil,   nil,   nil,   nil,
   nil,   168,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    21,    53,    48,    56,   nil,   nil,   nil,   164,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,   nil,    53,    48,    56,   nil,   nil,   nil,    31,
   nil,   nil,   nil,   171,   nil,   nil,   nil,   nil,   nil,   nil,
   168,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    21,    53,    48,    56,   nil,   nil,   nil,   164,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,   nil,    56,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   nil,   nil,   nil,   164,   nil,   nil,   168,
    21,     8,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
   171,    53,   nil,    56,    48,   nil,   nil,   168,    21,    31,
   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,   nil,    53,
   nil,    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,   nil,    56 ]

racc_action_check = [
    89,   233,    25,   209,    61,    89,    20,    23,   114,   209,
   205,   157,   205,   205,     0,   115,   202,     0,    94,   240,
    91,   240,   208,   116,   208,    91,    61,    72,    20,    12,
    53,    53,   233,   233,   233,   233,    25,    89,    23,    23,
    23,    23,   264,   157,   233,    89,    89,   264,   202,    89,
    89,    89,    89,    89,    89,    89,    89,    91,    89,    72,
    89,    12,   260,    94,    94,    91,    91,   260,   121,    91,
    91,    91,    91,    91,    91,    91,    91,    74,    91,   264,
    91,    24,    24,    24,   259,   259,   133,   264,   264,   100,
   100,   264,   264,   264,   264,   264,   264,   264,   264,   260,
   264,   134,   264,   234,   135,   136,   146,   260,   260,   137,
   138,   260,   260,   260,   260,   260,   260,   260,   260,     8,
   260,   139,   260,   143,     8,    71,   152,   153,    69,   156,
     8,     8,     8,     8,   234,   234,   234,   234,    68,   243,
   162,   163,    67,   146,   243,   165,   168,   169,   195,   243,
   196,    59,   199,    56,    50,   203,     8,   146,   146,   146,
   146,   146,   146,    49,     8,     8,    48,   207,     8,     8,
     8,     8,     8,     8,     8,     8,   243,     8,    46,     8,
    45,    44,    43,    58,   243,   243,    42,   198,   243,   243,
   243,   243,   243,   243,   243,   243,   241,   243,    41,   243,
    39,   241,   198,    36,   198,   198,   241,   198,   198,   198,
   198,   123,   227,   228,   230,   231,    73,    21,    19,   237,
    58,    73,    16,   239,    11,   242,   123,     9,   123,   123,
   247,   123,   123,   241,    58,    58,    58,    58,    58,    58,
   257,   241,   241,   258,     7,   241,   241,   241,   241,   241,
   241,   241,   241,    73,   241,   122,   241,   261,     5,   265,
   122,    73,    73,   267,   268,    73,    73,    73,    73,    73,
    73,    73,    73,   270,    73,    77,    73,   271,    60,     1,
    77,    60,    92,   277,   122,    60,    85,    95,    98,   104,
   106,   122,   122,    60,    84,    60,    60,    78,    60,    60,
   122,   122,    78,   108,   122,   122,   122,   122,   122,   122,
   122,   122,    77,   122,   109,   122,   110,    79,   111,   113,
    77,    77,    79,   nil,    77,    77,    77,    77,    77,    77,
    77,    77,   nil,    77,    78,    77,   nil,   nil,   nil,    80,
   nil,   nil,    78,    78,    80,   nil,    78,    78,    78,    78,
    78,    78,    78,    78,    79,    78,   nil,    78,   nil,    81,
   nil,   nil,    79,    79,    81,   nil,    79,    79,    79,    79,
    79,    79,    79,    79,   nil,    79,    80,    79,   nil,   nil,
   nil,   107,   nil,   nil,    80,    80,   107,   nil,    80,    80,
    80,    80,    80,    80,    80,    80,    81,    80,   nil,    80,
   nil,   nil,   nil,   nil,    81,    81,   nil,   nil,    81,    81,
    81,    81,    81,    81,    81,    81,   nil,    81,   107,    81,
   nil,   nil,   nil,   nil,    86,   nil,   107,   107,   nil,    86,
   107,   107,   107,   107,   107,   107,   107,   107,    86,   107,
   nil,   107,   167,   167,    87,   167,   167,   167,   nil,    87,
   nil,   nil,   167,   167,   167,   167,   167,   167,   nil,   nil,
   nil,    86,   nil,   nil,   nil,   nil,    88,   nil,   nil,    86,
    86,    88,   nil,    86,    86,    86,    86,    86,    86,    86,
    86,    87,    86,   nil,    86,   nil,    90,   nil,   nil,    87,
    87,    90,   nil,    87,    87,    87,    87,    87,    87,    87,
    87,   nil,    87,    88,    87,   nil,   nil,   nil,   nil,   nil,
   nil,    88,    88,   nil,   nil,    88,    88,    88,    88,    88,
    88,    88,    88,    90,    88,   nil,    88,   nil,   nil,    13,
   nil,    90,    90,   nil,    13,    90,    90,    90,    90,    90,
    90,    90,    90,    13,    90,   nil,    90,   nil,   nil,    14,
   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,    13,   nil,   nil,    13,    13,
    13,    13,    13,    13,    13,    13,    14,    13,   nil,    13,
   nil,   nil,    15,   nil,    14,    14,   nil,    15,    14,    14,
    14,    14,    14,    14,    14,    14,    15,    14,   nil,    14,
   nil,   nil,   238,   nil,   nil,   nil,   nil,   238,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   273,   nil,   nil,    15,    15,   273,
   nil,    15,    15,    15,    15,    15,    15,    15,    15,   238,
    15,   nil,    15,   nil,   nil,   nil,   nil,   238,   238,   nil,
   nil,   238,   238,   238,   238,   238,   238,   238,   238,   226,
   238,   273,   238,   nil,   226,   nil,   nil,   nil,   nil,   273,
   273,   nil,   nil,   273,   273,   273,   273,   273,   273,   273,
   273,    26,   273,   nil,   273,   nil,    26,   nil,   226,   nil,
   nil,   nil,   nil,   nil,   nil,   226,   226,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   226,   226,    31,   nil,   226,   226,
   226,   226,   226,   226,   226,   226,   nil,   226,    26,   226,
   nil,   222,   nil,   nil,   nil,   nil,   222,   nil,   nil,   nil,
    26,    26,    26,    26,    26,    26,    26,    26,    31,    26,
   nil,    26,   nil,   nil,   nil,   nil,    31,    31,   nil,   nil,
    31,    31,    31,    31,    31,    31,    31,    31,   222,    31,
   218,    31,   nil,   nil,   nil,   218,   222,   222,   nil,   nil,
   222,   222,   222,   222,   222,   222,   222,   222,   nil,   222,
   215,   222,   nil,   nil,   nil,   215,   nil,   nil,   nil,   218,
   nil,   nil,   nil,   nil,   nil,   nil,   218,   218,   nil,   nil,
   nil,   nil,   214,   nil,   nil,   218,   218,   214,   nil,   218,
   218,   218,   218,   218,   218,   218,   218,   215,   218,   nil,
   218,   nil,   213,   nil,   nil,   215,   215,   213,   nil,   215,
   215,   215,   215,   215,   215,   215,   215,   nil,   215,   214,
   215,   nil,   nil,   nil,   212,   nil,   nil,   214,   214,   212,
   nil,   214,   214,   214,   214,   214,   214,   214,   214,   213,
   214,   nil,   214,   nil,   211,   nil,   nil,   213,   213,   211,
   nil,   213,   213,   213,   213,   213,   213,   213,   213,   nil,
   213,   212,   213,   nil,   nil,   nil,   210,   nil,   nil,   212,
   212,   210,   nil,   212,   212,   212,   212,   212,   212,   212,
   212,   211,   212,   nil,   212,   nil,   206,   nil,   nil,   211,
   211,   206,   nil,   211,   211,   211,   211,   211,   211,   211,
   211,   nil,   211,   210,   211,   nil,   nil,   nil,   nil,   nil,
   nil,   210,   210,   nil,   nil,   210,   210,   210,   210,   210,
   210,   210,   210,   206,   210,   204,   210,   nil,   nil,   nil,
   204,   206,   206,   nil,   nil,   206,   206,   206,   206,   206,
   206,   206,   206,   nil,   206,   201,   206,   nil,   nil,   nil,
   201,   nil,   nil,   nil,   204,   nil,   nil,   nil,   nil,   nil,
   nil,   204,   204,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   204,   204,   nil,   nil,   204,   204,   204,   204,   204,   204,
   204,   204,   201,   204,   200,   204,   nil,   nil,   nil,   200,
   201,   201,   nil,   nil,   201,   201,   201,   201,   201,   201,
   201,   201,   nil,   201,   194,   201,   nil,   nil,   nil,   194,
   nil,   nil,   nil,   200,   nil,   nil,   nil,   nil,   nil,   nil,
   200,   200,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,
   200,   nil,   nil,   200,   200,   200,   200,   200,   200,   200,
   200,   194,   200,   171,   200,   nil,   nil,   nil,   171,   194,
   194,   nil,   nil,   194,   194,   194,   194,   194,   194,   194,
   194,   nil,   194,   nil,   194,   nil,   nil,   nil,   nil,   nil,
   nil,   164,   nil,   nil,   nil,   nil,   164,   nil,   nil,   171,
   171,   164,   nil,   nil,   nil,   nil,   nil,   nil,   171,   171,
   nil,   nil,   171,   171,   171,   171,   171,   171,   171,   171,
   164,   171,   nil,   171,   154,   nil,   nil,   164,   164,   154,
   nil,   nil,   nil,   nil,   nil,   nil,   164,   164,   nil,   nil,
   164,   164,   164,   164,   164,   164,   164,   164,   nil,   164,
   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   154,
   154,   nil,   nil,   154,   154,   154,   154,   154,   154,   154,
   154,   nil,   154,   nil,   154 ]

racc_action_pointer = [
     2,   279,   nil,   nil,   nil,   256,   nil,   231,   114,   227,
   nil,   221,    19,   524,   544,   587,   201,   nil,   nil,   211,
   -14,   162,   nil,   -12,    31,   -17,   686,   nil,   nil,   nil,
   nil,   706,   nil,   nil,   nil,   nil,   148,   nil,   nil,   190,
   nil,   188,   176,   172,   171,   170,   116,   nil,   111,   158,
    92,   nil,   nil,   -33,   nil,   nil,    87,   nil,   178,   136,
   271,   -16,   nil,   nil,   nil,   nil,   nil,   121,   117,   107,
   nil,    94,    17,   211,    35,   nil,   nil,   270,   292,   312,
   334,   354,   nil,   nil,   283,   244,   419,   439,   461,    -5,
   481,    15,   277,   nil,    13,   224,   nil,   nil,   281,   nil,
    81,   nil,   nil,   nil,   278,   nil,   276,   376,   293,   272,
   293,   295,   nil,   293,   -18,   -11,   -19,   nil,   nil,   nil,
   nil,    36,   250,   204,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    90,    93,    94,    98,    99,   110,
   nil,   nil,   nil,   118,   nil,   nil,   101,   nil,   nil,   nil,
   nil,   nil,   115,   120,  1129,   nil,    87,     1,   nil,   nil,
   nil,   nil,   107,   138,  1096,   102,   nil,   408,   136,   111,
   nil,  1068,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1029,   137,   143,   nil,   180,   148,
  1009,   970,     5,   144,   950,   -25,   911,   157,   -41,   -31,
   891,   869,   849,   827,   807,   785,   nil,   nil,   765,   nil,
   nil,   nil,   726,   nil,   nil,   nil,   664,   202,   208,   nil,
   171,   208,   nil,   -18,    84,   nil,   nil,   183,   607,   213,
   -44,   191,   189,   134,   nil,   nil,   nil,   190,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,   201,    78,
    57,   221,   nil,   nil,    37,   248,   nil,   252,   257,   nil,
   268,   272,   nil,   629,   nil,   nil,   nil,   241,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -170,  -170,    -1,    -2,    -3,    -5,   -21,  -170,  -170,  -170,
    -4,  -170,  -170,  -170,  -170,  -170,   -35,   -36,   -37,   -39,
   -42,  -164,  -120,  -121,  -125,  -128,  -170,  -130,  -131,  -132,
  -133,  -170,  -135,  -136,  -137,  -139,  -170,  -141,  -142,  -170,
  -144,  -170,  -170,  -170,  -170,  -170,  -151,  -152,  -156,  -170,
  -170,  -162,  -163,  -170,  -167,  -168,  -170,   282,  -170,  -170,
  -170,   -47,   -48,   -49,   -51,   -52,   -93,   -29,   -31,   -33,
   -34,   -68,  -170,  -170,  -170,   -41,  -164,  -170,  -170,  -170,
  -170,  -170,  -129,  -138,  -170,  -170,  -170,  -170,  -170,  -170,
  -170,  -170,  -154,  -155,  -170,  -170,  -166,  -169,    -6,   -12,
   -17,   -14,   -15,   -16,  -170,   -22,  -170,  -170,  -170,  -170,
  -170,  -170,   -56,   -58,   -60,   -61,  -170,   -46,   -28,   -30,
   -32,   -70,  -170,   -44,   -38,   -40,  -122,  -123,  -124,  -126,
  -127,  -134,  -140,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
  -153,  -157,  -159,  -170,  -161,  -165,  -170,   -13,   -18,   -19,
   -20,   -23,  -170,   -26,  -170,   -53,  -170,  -170,   -57,   -59,
   -62,   -45,   -77,  -170,  -170,   -69,   -79,  -170,  -170,   -96,
   -98,  -170,  -101,  -102,  -103,  -105,  -106,  -107,  -108,  -109,
  -110,  -117,  -118,  -119,  -143,  -145,  -146,  -147,  -148,  -149,
  -150,  -160,   -11,   -24,  -170,  -170,   -87,   -54,  -170,    -7,
  -170,  -170,  -170,  -119,  -170,  -170,  -170,  -170,  -170,  -170,
  -170,  -170,  -170,  -170,  -170,  -170,   -50,   -92,  -170,  -100,
   -25,   -27,  -170,   -55,   -63,   -64,  -170,  -170,  -170,   -43,
   -78,   -71,   -73,   -74,   -75,   -76,  -104,   -97,  -170,  -170,
  -170,  -170,  -170,  -170,   -83,   -84,   -89,  -170,   -91,  -111,
  -112,  -113,  -114,  -115,  -116,   -99,   -86,   -65,  -170,    -8,
  -170,  -170,   -82,   -88,  -170,  -170,   -90,  -170,   -67,   -95,
  -170,  -170,   -72,  -170,   -81,   -85,   -66,  -170,    -9,   -10,
   -80,   -94 ]

racc_goto_table = [
    75,    20,   101,   126,   127,   128,    20,    20,    20,    83,
    62,    60,   152,   165,    61,   102,    99,   195,   233,   232,
   244,   105,    16,   237,    84,   129,   130,    67,    68,    69,
   255,   219,   143,    82,   141,    70,     1,   142,     2,     3,
   242,   117,     4,     5,   249,   250,   251,   252,   253,   254,
    10,    98,   262,   229,   125,   202,   147,   106,   124,   121,
    83,    83,    83,    83,    83,   132,    20,   151,   162,   199,
    62,   123,   261,   217,    61,   223,   224,   233,   272,   134,
   135,   136,   137,   138,   139,   256,   118,   119,   120,   225,
   101,   230,   267,   268,   231,   nil,   161,   nil,   274,   220,
   153,   nil,   nil,   102,   192,   nil,   265,   280,   nil,   nil,
   nil,   155,   nil,   nil,   nil,   nil,   nil,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   235,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   234,   nil,   196,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    62,   198,   203,   197,    61,
   nil,   nil,   nil,   nil,   nil,   nil,   216,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    83,   nil,   235,   153,   nil,   nil,
   nil,   246,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   234,   216,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   196,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   263,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    84,   nil,   196,   216,   269,   nil,
   nil,   nil,   nil,    83,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   281 ]

racc_goto_check = [
    26,    20,    12,    46,    46,    46,    20,    20,    20,    53,
    14,    16,    19,    40,    31,    13,     9,    21,    45,    44,
    51,    17,    22,    56,    20,    63,    63,    22,    22,    22,
    57,    58,    65,    66,    75,    23,     1,    76,     2,     3,
    49,    26,     4,     5,    49,    49,    49,    49,    49,    49,
     6,     7,    51,     8,    26,    40,    11,    18,    24,    28,
    53,    53,    53,    53,    53,    26,    20,    17,    29,    30,
    14,    16,    49,    33,    31,    37,    38,    45,    44,    20,
    20,    20,    20,    20,    20,    21,    23,    23,    23,    39,
    12,    40,    41,    42,    43,   nil,    26,   nil,    49,    19,
    20,   nil,   nil,    13,     9,   nil,    21,    49,   nil,   nil,
   nil,    31,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    14,    16,    20,    31,    31,
   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,   nil,    46,    20,   nil,   nil,
   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    20,   nil,    20,    14,    26,   nil,
   nil,   nil,   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    36,    38,    39,    42,    43,    45,    -7,  -146,   -42,
   nil,   -44,   -56,   -43,    -2,   nil,    -1,   -39,    -3,   -95,
    -7,  -137,    14,    19,   -15,   nil,   -20,   nil,   -12,   -53,
   -93,     2,   nil,   -95,   nil,   nil,   nil,  -123,  -122,  -109,
  -109,  -166,  -165,  -107,  -182,  -183,   -74,   nil,   nil,  -166,
   nil,  -187,   nil,   -17,   nil,   nil,  -181,  -188,  -140,   nil,
   nil,   nil,   nil,   -55,   nil,   -62,     7,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -60,   -57,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   104,   nil,   nil,   nil,   nil,
   100,   nil,    29,    30,   166,     6,   nil,   nil,   nil,   nil,
   183,   nil,   nil,   nil,    18,    19,    37,    71,   nil,   nil,
   nil,    38,    63,   245,    64,    65,   111,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    46,    22,   182,   176,   167,
   177,   nil,   178,    23,   179,   180,   169,   170,   172,   173,
   174,   175,   181,    24,    25,    26,    27,    28,    32,    33,
    34,    36,    40,    47,    50,   nil,   nil,    54,    55 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 68, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  2, 70, :_reduce_4,
  0, 73, :_reduce_none,
  3, 73, :_reduce_6,
  0, 75, :_reduce_none,
  2, 75, :_reduce_8,
  4, 75, :_reduce_9,
  4, 75, :_reduce_10,
  3, 74, :_reduce_11,
  1, 74, :_reduce_none,
  2, 76, :_reduce_13,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_16,
  0, 78, :_reduce_17,
  1, 78, :_reduce_18,
  1, 78, :_reduce_19,
  3, 81, :_reduce_20,
  1, 72, :_reduce_none,
  4, 71, :_reduce_22,
  5, 71, :_reduce_23,
  3, 85, :_reduce_24,
  3, 86, :_reduce_25,
  1, 86, :_reduce_none,
  4, 84, :_reduce_27,
  4, 82, :_reduce_28,
  3, 82, :_reduce_29,
  4, 82, :_reduce_30,
  3, 82, :_reduce_31,
  4, 82, :_reduce_32,
  3, 82, :_reduce_33,
  3, 82, :_reduce_34,
  2, 82, :_reduce_35,
  1, 89, :_reduce_36,
  1, 89, :_reduce_37,
  3, 91, :_reduce_38,
  1, 91, :_reduce_none,
  3, 92, :_reduce_40,
  2, 92, :_reduce_41,
  1, 92, :_reduce_none,
  5, 90, :_reduce_43,
  2, 94, :_reduce_44,
  3, 83, :_reduce_45,
  2, 83, :_reduce_46,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 100, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  3, 101, :_reduce_53,
  4, 101, :_reduce_54,
  5, 102, :_reduce_55,
  1, 103, :_reduce_56,
  2, 103, :_reduce_57,
  1, 103, :_reduce_58,
  2, 103, :_reduce_59,
  1, 103, :_reduce_60,
  1, 103, :_reduce_61,
  2, 103, :_reduce_62,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  2, 105, :_reduce_65,
  4, 106, :_reduce_66,
  1, 108, :_reduce_none,
  0, 95, :_reduce_none,
  2, 95, :_reduce_69,
  0, 96, :_reduce_none,
  3, 96, :_reduce_71,
  3, 110, :_reduce_72,
  1, 110, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  0, 97, :_reduce_none,
  2, 97, :_reduce_78,
  1, 114, :_reduce_none,
  6, 115, :_reduce_80,
  5, 115, :_reduce_81,
  4, 117, :_reduce_82,
  3, 117, :_reduce_83,
  1, 118, :_reduce_none,
  3, 118, :_reduce_85,
  3, 88, :_reduce_86,
  1, 88, :_reduce_none,
  4, 119, :_reduce_88,
  3, 119, :_reduce_89,
  4, 121, :_reduce_90,
  3, 121, :_reduce_91,
  2, 122, :_reduce_92,
  1, 98, :_reduce_93,
  3, 109, :_reduce_94,
  1, 109, :_reduce_none,
  1, 107, :_reduce_none,
  3, 107, :_reduce_97,
  1, 123, :_reduce_none,
  3, 123, :_reduce_99,
  2, 124, :_reduce_100,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  1, 126, :_reduce_none,
  3, 126, :_reduce_104,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 128, :_reduce_111,
  3, 128, :_reduce_112,
  3, 128, :_reduce_113,
  3, 128, :_reduce_114,
  3, 128, :_reduce_115,
  3, 128, :_reduce_116,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 129, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  3, 113, :_reduce_122,
  3, 113, :_reduce_123,
  3, 113, :_reduce_124,
  1, 113, :_reduce_none,
  3, 130, :_reduce_126,
  3, 130, :_reduce_127,
  1, 130, :_reduce_none,
  2, 131, :_reduce_129,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  3, 133, :_reduce_134,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 136, :_reduce_139,
  3, 79, :_reduce_140,
  1, 79, :_reduce_none,
  1, 138, :_reduce_none,
  4, 80, :_reduce_143,
  1, 80, :_reduce_none,
  4, 139, :_reduce_145,
  4, 139, :_reduce_146,
  4, 139, :_reduce_147,
  4, 139, :_reduce_148,
  4, 139, :_reduce_149,
  4, 139, :_reduce_150,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 112, :_reduce_153,
  2, 112, :_reduce_154,
  2, 112, :_reduce_155,
  1, 112, :_reduce_156,
  3, 140, :_reduce_157,
  1, 141, :_reduce_none,
  1, 142, :_reduce_none,
  2, 143, :_reduce_160,
  1, 143, :_reduce_161,
  1, 132, :_reduce_162,
  1, 132, :_reduce_163,
  1, 93, :_reduce_164,
  3, 120, :_reduce_165,
  2, 120, :_reduce_166,
  1, 120, :_reduce_none,
  1, 144, :_reduce_none,
  2, 145, :_reduce_169 ]

racc_reduce_n = 170

racc_shift_n = 282

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :modulo => 52,
  :solidus => 53,
  :CURRENT_USER => 54,
  :period => 55,
  :COUNT => 56,
  :LENGTH => 57,
  :AVG => 58,
  :MAX => 59,
  :MIN => 60,
  :SUM => 61,
  :E => 62,
  :quote => 63,
  :character_string_literal => 64,
  :DATE => 65,
  :date_string => 66 }

racc_nt_base = 67

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "modulo",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "LENGTH",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "set_function_specification",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "exact_numeric_literal",
  "numeric_value_expression",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "general_literal",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_25(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_38(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_55(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_72(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_94(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_104(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Modulo.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_129(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_134(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Length.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_160(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
