#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 335)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,   224,    97,   154,   144,    97,   235,   102,     8,    76,
   109,    63,   236,   146,   135,   147,    71,   226,    47,   227,
   228,    31,   148,   103,   149,   105,   106,   161,   107,   108,
   217,   218,    73,   194,   158,    21,    47,    73,    73,    31,
    73,   150,    77,    50,    51,    73,    35,    48,    39,    41,
    42,    43,    44,    21,    52,   153,    55,    50,    51,   115,
     7,    50,    51,     8,    35,    48,    39,    41,    42,    43,
    44,    21,    52,    47,    55,    73,    31,   102,  -129,    50,
    51,     8,    35,    48,    39,    41,    42,    43,    44,   174,
    52,    47,    55,   103,    31,   105,   106,   175,   107,   108,
    13,    14,    15,    17,    91,    90,   139,   140,    21,  -129,
  -129,  -129,    74,    75,   176,   177,    50,    51,   178,    35,
    48,    39,    41,    42,    43,    44,    21,    52,    47,    55,
   179,    31,   180,    69,    50,    51,     8,    35,    48,    39,
    41,    42,    43,    44,   182,    52,    47,    55,   183,   229,
    69,    63,    63,   189,   190,    69,   194,   206,   209,    92,
   212,   213,    89,    21,    47,    21,   223,   229,    88,   123,
    87,    50,    51,  -148,    35,    48,    39,    41,    42,    43,
    44,    21,    52,   231,    55,    86,    85,    84,    83,    50,
    51,    82,    35,    48,    39,    41,    42,    43,    44,    21,
    52,    81,    55,     8,   -85,    70,    69,    50,    51,   246,
    35,    48,    39,    41,    42,    43,    44,   102,    52,    47,
    55,   100,    31,   194,   247,   101,   209,    63,   231,    57,
    56,    17,   251,   103,    12,   105,   106,    47,   107,   108,
    31,   253,   194,    73,    21,   258,    11,   260,   261,    17,
   262,     9,   123,    73,    21,   131,    73,   136,   137,   101,
    63,   nil,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,    21,    52,    47,    55,   nil,   154,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    47,    55,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   161,   nil,   nil,    17,   nil,   nil,   nil,   158,    21,
    47,   nil,   nil,    31,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,    21,    52,   nil,
    55,   nil,   nil,   nil,    47,    50,    51,   229,    35,    48,
    39,    41,    42,    43,    44,    21,    52,   nil,    55,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,   nil,    52,    47,    55,   nil,   154,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,   nil,
    55,    47,   161,   nil,    31,   nil,   nil,   nil,   nil,   158,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,   nil,    31,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,    47,    55,   nil,    31,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,   nil,    52,    47,    55,   nil,    31,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,   nil,
    52,    47,    55,   nil,    31,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,   nil,    31,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,    47,    55,   nil,    31,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,   nil,    52,    47,    55,   nil,   229,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,   nil,
    52,    47,    55,   nil,    31,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,   nil,    31,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,    47,    55,   nil,   229,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,   nil,    52,    47,    55,   nil,   229,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,   nil,
    52,    47,    55,   nil,   229,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,   nil,   229,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,    47,    55,   nil,   229,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,   nil,    52,    47,    55,   nil,   229,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,   nil,
    52,    47,    55,   nil,   229,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    47,   nil,   nil,   154,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,   nil,    55,    47,   161,
   nil,   154,   nil,   nil,   nil,   nil,   158,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,   161,    52,    47,    55,   nil,
    31,   nil,   158,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,   nil,    35,    48,    39,    41,    42,    43,
    44,   nil,    52,    47,    55,   nil,   229,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    47,    55,   nil,   154,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,    47,    55,
   nil,    31,   nil,   nil,   nil,   nil,   158,    21,   nil,   nil,
   125,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,    47,    55,   nil,
    31,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,   nil,    35,    48,    39,    41,    42,    43,
    44,   nil,    52,    47,    55,   nil,   154,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   161,    52,    47,    55,   nil,    31,   nil,   158,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,   nil,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,   nil,    55,   195,
   196,   nil,   197,   198,   199,   nil,   nil,   nil,   nil,   200,
   201,   202,   203,   204,   205 ]

racc_action_check = [
   154,   192,    57,   154,   101,   137,   199,   187,   154,    25,
    59,   102,   199,   103,    89,   104,    20,   195,    83,   195,
   195,    83,   106,   187,   107,   187,   187,   154,   187,   187,
   187,   187,    59,   192,   154,   154,    84,    57,    20,    84,
   137,   108,    25,   154,   154,   109,   154,   154,   154,   154,
   154,   154,   154,    83,   154,   114,   154,    89,    89,    68,
     0,    83,    83,     0,    83,    83,    83,    83,    83,    83,
    83,    84,    83,   231,    83,   262,   231,   116,    23,    84,
    84,   231,    84,    84,    84,    84,    84,    84,    84,   125,
    84,     8,    84,   116,     8,   116,   116,   126,   116,   116,
     8,     8,     8,     8,    52,    52,    95,    95,   231,    23,
    23,    23,    24,    24,   127,   128,   231,   231,   129,   231,
   231,   231,   231,   231,   231,   231,     8,   231,   229,   231,
   130,   229,   134,    66,     8,     8,   229,     8,     8,     8,
     8,     8,     8,     8,   142,     8,   228,     8,   143,   228,
    65,   146,   147,   152,   153,    64,   155,   158,   159,    55,
   184,   185,    49,   229,   226,   190,   191,   226,    48,   193,
    47,   229,   229,    45,   229,   229,   229,   229,   229,   229,
   229,   228,   229,   197,   229,    44,    43,    42,    41,   228,
   228,    39,   228,   228,   228,   228,   228,   228,   228,   226,
   228,    36,   228,   206,    21,    19,    16,   226,   226,   218,
   226,   226,   226,   226,   226,   226,   226,    58,   226,    13,
   226,    58,    13,   219,   220,    58,   225,    12,   227,    11,
     9,    13,   230,    58,     7,    58,    58,    14,    58,    58,
    14,   235,   245,   246,   247,   248,     5,   252,   254,    14,
   255,     1,    80,    81,    13,    87,    71,    90,    93,    99,
    69,   nil,    13,    13,   nil,    13,    13,    13,    13,    13,
    13,    13,    14,    13,   217,    13,   nil,   217,   nil,   nil,
    14,    14,   nil,    14,    14,    14,    14,    14,    14,    14,
   nil,    14,    15,    14,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   217,   nil,   nil,    15,   nil,   nil,   nil,   217,   217,
   213,   nil,   nil,   213,   nil,   nil,   nil,   217,   217,   nil,
   217,   217,   217,   217,   217,   217,   217,    15,   217,   nil,
   217,   nil,   nil,   nil,   258,    15,    15,   258,    15,    15,
    15,    15,    15,    15,    15,   213,    15,   nil,    15,   nil,
   nil,   nil,   nil,   213,   213,   nil,   213,   213,   213,   213,
   213,   213,   213,   nil,   213,   209,   213,   nil,   209,   258,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   258,   nil,
   258,   258,   258,   258,   258,   258,   258,   nil,   258,   nil,
   258,    70,   209,   nil,    70,   nil,   nil,   nil,   nil,   209,
   209,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,   209,
   nil,   209,   209,   209,   209,   209,   209,   209,   nil,   209,
    74,   209,   nil,    74,   nil,   nil,    70,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    70,    70,   nil,    70,    70,    70,
    70,    70,    70,    70,   nil,    70,    75,    70,   nil,    75,
   nil,   nil,   nil,   nil,   nil,    74,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    74,    74,   nil,    74,    74,    74,    74,
    74,    74,    74,   nil,    74,    76,    74,   nil,    76,   nil,
   nil,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,
    75,   nil,    75,    75,    75,    75,    75,    75,    75,   nil,
    75,    77,    75,   nil,    77,   nil,   nil,   nil,   nil,   nil,
    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,    76,
   nil,    76,    76,    76,    76,    76,    76,    76,   nil,    76,
    86,    76,   nil,    86,   nil,   nil,    77,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    77,    77,   nil,    77,    77,    77,
    77,    77,    77,    77,   nil,    77,    85,    77,   nil,    85,
   nil,   nil,   nil,   nil,   nil,    86,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    86,    86,   nil,    86,    86,    86,    86,
    86,    86,    86,   nil,    86,   205,    86,   nil,   205,   nil,
   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    85,
    85,   nil,    85,    85,    85,    85,    85,    85,    85,   nil,
    85,    26,    85,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,   205,
   nil,   205,   205,   205,   205,   205,   205,   205,   nil,   205,
    31,   205,   nil,    31,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,    26,
    26,    26,    26,    26,   nil,    26,   204,    26,   nil,   204,
   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    31,    31,   nil,    31,    31,    31,    31,
    31,    31,    31,   nil,    31,   203,    31,   nil,   203,   nil,
   nil,   204,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,
   204,   nil,   204,   204,   204,   204,   204,   204,   204,   nil,
   204,   202,   204,   nil,   202,   nil,   nil,   nil,   nil,   nil,
   203,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,   203,
   nil,   203,   203,   203,   203,   203,   203,   203,   nil,   203,
   201,   203,   nil,   201,   nil,   nil,   202,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   202,   202,   nil,   202,   202,   202,
   202,   202,   202,   202,   nil,   202,   200,   202,   nil,   200,
   nil,   nil,   nil,   nil,   nil,   201,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   201,   201,   nil,   201,   201,   201,   201,
   201,   201,   201,   nil,   201,   198,   201,   nil,   198,   nil,
   nil,   200,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,
   200,   nil,   200,   200,   200,   200,   200,   200,   200,   nil,
   200,   196,   200,   nil,   196,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,   198,
   nil,   198,   198,   198,   198,   198,   198,   198,   nil,   198,
   nil,   198,   194,   nil,   nil,   194,   196,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   196,   196,   nil,   196,   196,   196,
   196,   196,   196,   196,   nil,   196,   nil,   196,   189,   194,
   nil,   189,   nil,   nil,   nil,   nil,   194,   194,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   194,   194,   nil,   194,   194,
   194,   194,   194,   194,   194,   189,   194,   183,   194,   nil,
   183,   nil,   189,   189,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   189,   189,   nil,   189,   189,   189,   189,   189,   189,
   189,   nil,   189,   251,   189,   nil,   251,   nil,   nil,   nil,
   nil,   nil,   183,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   183,   183,   nil,   183,   183,   183,   183,   183,   183,   183,
   nil,   183,   161,   183,   nil,   161,   nil,   nil,   251,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   251,   251,   nil,   251,
   251,   251,   251,   251,   251,   251,   nil,   251,    82,   251,
   nil,    82,   nil,   nil,   nil,   nil,   161,   161,   nil,   nil,
    82,   nil,   nil,   nil,   nil,   161,   161,   nil,   161,   161,
   161,   161,   161,   161,   161,   nil,   161,   144,   161,   nil,
   144,   nil,   nil,    82,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    82,    82,   nil,    82,    82,    82,    82,    82,    82,
    82,   nil,    82,   115,    82,   nil,   115,   nil,   nil,   nil,
   nil,   nil,   144,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   144,   144,   nil,   144,   144,   144,   144,   144,   144,   144,
   115,   144,   100,   144,   nil,   100,   nil,   115,   115,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   115,   115,   nil,   115,
   115,   115,   115,   115,   115,   115,   nil,   115,   nil,   115,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   100,   100,   nil,   100,   100,
   100,   100,   100,   100,   100,   nil,   100,   nil,   100,   157,
   157,   nil,   157,   157,   157,   nil,   nil,   nil,   nil,   157,
   157,   157,   157,   157,   157 ]

racc_action_pointer = [
    50,   251,   nil,   nil,   nil,   244,   nil,   223,    86,   230,
   nil,   226,   187,   214,   232,   287,   187,   nil,   nil,   201,
    -2,   152,   nil,    61,    64,    -8,   606,   nil,   nil,   nil,
   nil,   635,   nil,   nil,   nil,   nil,   149,   nil,   nil,   183,
   nil,   180,   179,   178,   177,   115,   nil,   118,   163,   104,
   nil,   nil,    45,   nil,   nil,    97,   nil,    -3,   213,    -8,
   nil,   nil,   nil,   nil,   136,   131,   114,   nil,    30,   220,
   386,   216,   nil,   nil,   415,   441,   470,   496,   nil,   nil,
   243,   213,   993,    13,    31,   551,   525,   250,   nil,     9,
   198,   nil,   nil,   254,   nil,   100,   nil,   nil,   nil,   247,
  1077,    -4,   -29,    -8,    -6,   nil,    -2,     0,    17,     5,
   nil,   nil,   nil,   nil,    25,  1048,    73,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    80,    88,   105,   106,   109,
   121,   nil,   nil,   nil,   127,   nil,   nil,     0,   nil,   nil,
   nil,   nil,   135,   144,  1022,   nil,   111,   112,   nil,   nil,
   nil,   nil,   122,   151,    -5,   115,   nil,  1107,   149,   124,
   nil,   967,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   912,   151,   157,   nil,     3,   nil,   883,
   125,   157,    -8,   160,   857,   -16,   826,   175,   800,   -26,
   771,   745,   716,   690,   661,   580,   190,   nil,   nil,   360,
   nil,   nil,   nil,   305,   nil,   nil,   nil,   269,   201,   182,
   220,   nil,   nil,   nil,   nil,   192,   159,   220,   141,   123,
   198,    68,   nil,   nil,   nil,   203,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   201,   203,   204,   211,   nil,
   nil,   938,   238,   nil,   239,   246,   nil,   nil,   329,   nil,
   nil,   nil,    35,   nil,   nil ]

racc_action_default = [
  -160,  -160,    -1,    -2,    -3,    -5,   -16,  -160,  -160,  -160,
    -4,  -160,  -160,  -160,  -160,  -160,   -30,   -31,   -32,   -34,
   -37,  -154,  -112,  -113,  -116,  -119,  -160,  -121,  -122,  -123,
  -124,  -160,  -126,  -127,  -128,  -130,  -160,  -132,  -133,  -160,
  -135,  -160,  -160,  -160,  -160,  -141,  -142,  -146,  -160,  -160,
  -152,  -153,  -160,  -157,  -158,  -160,   265,  -160,  -160,   -42,
   -43,   -45,   -46,   -85,   -24,   -26,   -28,   -29,   -62,  -160,
  -160,  -160,   -36,  -154,  -160,  -160,  -160,  -160,  -120,  -129,
  -160,  -160,  -160,  -160,  -160,  -160,  -160,  -144,  -145,  -160,
  -160,  -156,  -159,    -6,    -8,   -12,   -10,   -11,   -17,  -160,
  -160,  -160,  -160,  -160,  -160,   -50,   -52,   -54,   -55,  -160,
   -41,   -23,   -25,   -27,   -64,  -160,   -39,   -33,   -35,  -114,
  -115,  -117,  -118,  -125,  -131,  -160,  -160,  -160,  -160,  -160,
  -160,  -143,  -147,  -149,  -160,  -151,  -155,  -160,    -9,   -13,
   -14,   -18,  -160,   -21,  -160,   -47,  -160,  -160,   -51,   -53,
   -56,   -40,   -69,  -160,  -160,   -63,   -71,  -160,  -160,   -88,
   -90,  -160,   -93,   -94,   -95,   -97,   -98,   -99,  -100,  -101,
  -102,  -109,  -110,  -111,  -134,  -136,  -137,  -138,  -139,  -140,
  -150,    -7,   -19,  -160,  -160,   -79,   -48,  -160,   -38,  -160,
  -160,  -160,  -160,  -111,  -160,  -160,  -160,  -160,  -160,  -160,
  -160,  -160,  -160,  -160,  -160,  -160,  -160,   -44,   -84,  -160,
   -92,   -20,   -22,  -160,   -49,   -57,   -58,  -160,  -160,   -70,
   -65,   -67,   -68,   -15,   -96,   -89,  -160,  -160,  -160,  -160,
  -160,  -160,   -75,   -76,   -81,  -160,   -83,  -103,  -104,  -105,
  -106,  -107,  -108,   -91,   -78,   -59,  -160,  -160,  -160,   -74,
   -80,  -160,  -160,   -82,  -160,   -61,   -87,   -66,  -160,   -73,
   -77,   -60,  -160,   -72,   -86 ]

racc_goto_table = [
    72,    20,   142,    58,   184,    59,    20,    20,    20,   155,
    94,   207,   230,   222,   234,   221,   237,   238,   239,   240,
   241,   242,   232,    98,    80,    16,   121,   122,   119,   120,
    64,    65,    66,   114,   152,   188,    93,    96,    67,   110,
   208,   214,   248,   215,   250,   216,    10,   254,   192,    79,
   207,   118,   249,   255,   220,     5,     4,     3,     1,   225,
   116,   124,    59,    20,   141,   243,   210,   259,     2,   134,
   222,    78,   257,   244,   263,   126,   127,   128,   129,   130,
   207,   132,    99,   219,   133,   211,   111,   112,   113,   151,
   181,   252,   138,   143,   117,   145,   nil,    79,    79,    79,
    79,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   245,   nil,   nil,   nil,   nil,   nil,    96,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   185,   187,   186,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   193,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   143,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,   nil,   185,   nil,   256,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   264 ]

racc_goto_check = [
    11,    18,    17,    14,    19,    28,    18,    18,    18,    37,
     8,    12,    45,    42,    45,    41,    45,    45,    45,    45,
    45,    45,    47,    15,    18,    20,    60,    60,    58,    58,
    20,    20,    20,    25,    26,    27,     7,    11,    21,    11,
    30,    34,    45,    35,    45,    36,     6,    38,    37,    59,
    12,    11,    47,    39,    40,     5,     4,     3,     1,    51,
    14,    11,    28,    18,    15,    52,    53,    45,     2,    62,
    42,    63,    41,    19,    45,    18,    18,    18,    18,    18,
    12,    74,    16,    37,    75,    17,    21,    21,    21,    11,
     8,    19,    10,    18,    22,    28,   nil,    59,    59,    59,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,   nil,   nil,   nil,   nil,   nil,    11,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    14,    28,
    28,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,    18,   nil,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    11 ]

racc_goto_pointer = [
   nil,    58,    68,    57,    56,    55,    41,   -21,   -47,   nil,
    -3,   -20,  -147,   nil,    -9,   -35,    24,   -98,    -7,  -140,
    17,    22,    24,   nil,   nil,   -35,   -80,  -117,    -7,   nil,
  -118,   nil,   nil,   nil,  -146,  -144,  -142,  -106,  -199,  -193,
  -136,  -175,  -177,   nil,   nil,  -184,   nil,  -175,   nil,   nil,
   nil,  -135,  -144,   -95,   nil,   nil,   nil,   nil,   -46,    23,
   -50,   nil,   -20,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    -8,    -5,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,    95,
   nil,    37,   156,     6,   nil,   nil,   nil,   nil,   173,   nil,
   nil,   nil,    18,    19,    68,   nil,   nil,   nil,    38,    60,
   233,    61,    62,   104,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    29,   172,   166,   157,   167,   nil,   168,   169,
   170,   159,   160,   162,   163,   164,   165,   171,    22,    23,
    24,    25,    26,    27,    28,    30,    32,    33,    34,    36,
    40,    45,    46,    49,   nil,   nil,    53,    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 64, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  2, 66, :_reduce_4,
  0, 69, :_reduce_none,
  3, 69, :_reduce_6,
  3, 70, :_reduce_7,
  1, 70, :_reduce_none,
  2, 71, :_reduce_9,
  1, 72, :_reduce_none,
  1, 72, :_reduce_11,
  0, 73, :_reduce_12,
  1, 73, :_reduce_13,
  1, 73, :_reduce_14,
  3, 75, :_reduce_15,
  1, 68, :_reduce_none,
  4, 67, :_reduce_17,
  5, 67, :_reduce_18,
  3, 79, :_reduce_19,
  3, 80, :_reduce_20,
  1, 80, :_reduce_none,
  4, 78, :_reduce_22,
  4, 76, :_reduce_23,
  3, 76, :_reduce_24,
  4, 76, :_reduce_25,
  3, 76, :_reduce_26,
  4, 76, :_reduce_27,
  3, 76, :_reduce_28,
  3, 76, :_reduce_29,
  2, 76, :_reduce_30,
  1, 83, :_reduce_31,
  1, 83, :_reduce_32,
  3, 85, :_reduce_33,
  1, 85, :_reduce_none,
  3, 86, :_reduce_35,
  2, 86, :_reduce_36,
  1, 86, :_reduce_none,
  4, 84, :_reduce_38,
  2, 87, :_reduce_39,
  3, 77, :_reduce_40,
  2, 77, :_reduce_41,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 93, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  3, 94, :_reduce_47,
  4, 94, :_reduce_48,
  5, 95, :_reduce_49,
  1, 96, :_reduce_50,
  2, 96, :_reduce_51,
  1, 96, :_reduce_52,
  2, 96, :_reduce_53,
  1, 96, :_reduce_54,
  1, 96, :_reduce_55,
  2, 96, :_reduce_56,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 98, :_reduce_59,
  4, 99, :_reduce_60,
  1, 101, :_reduce_none,
  0, 88, :_reduce_none,
  2, 88, :_reduce_63,
  0, 89, :_reduce_none,
  3, 89, :_reduce_65,
  3, 103, :_reduce_66,
  1, 103, :_reduce_none,
  1, 104, :_reduce_none,
  0, 90, :_reduce_none,
  2, 90, :_reduce_70,
  1, 106, :_reduce_none,
  6, 107, :_reduce_72,
  5, 107, :_reduce_73,
  4, 109, :_reduce_74,
  3, 109, :_reduce_75,
  1, 110, :_reduce_none,
  3, 110, :_reduce_77,
  3, 82, :_reduce_78,
  1, 82, :_reduce_none,
  4, 111, :_reduce_80,
  3, 111, :_reduce_81,
  4, 112, :_reduce_82,
  3, 112, :_reduce_83,
  2, 113, :_reduce_84,
  1, 91, :_reduce_85,
  3, 102, :_reduce_86,
  1, 102, :_reduce_none,
  1, 100, :_reduce_none,
  3, 100, :_reduce_89,
  1, 114, :_reduce_none,
  3, 114, :_reduce_91,
  2, 115, :_reduce_92,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_96,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 119, :_reduce_103,
  3, 119, :_reduce_104,
  3, 119, :_reduce_105,
  3, 119, :_reduce_106,
  3, 119, :_reduce_107,
  3, 119, :_reduce_108,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 120, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  3, 121, :_reduce_114,
  3, 121, :_reduce_115,
  1, 121, :_reduce_none,
  3, 123, :_reduce_117,
  3, 123, :_reduce_118,
  1, 123, :_reduce_none,
  2, 124, :_reduce_120,
  1, 124, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 126, :_reduce_125,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 130, :_reduce_130,
  3, 105, :_reduce_131,
  1, 105, :_reduce_none,
  1, 132, :_reduce_none,
  4, 128, :_reduce_134,
  1, 128, :_reduce_none,
  4, 133, :_reduce_136,
  4, 133, :_reduce_137,
  4, 133, :_reduce_138,
  4, 133, :_reduce_139,
  4, 133, :_reduce_140,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  3, 134, :_reduce_143,
  2, 134, :_reduce_144,
  2, 134, :_reduce_145,
  1, 134, :_reduce_146,
  3, 135, :_reduce_147,
  1, 136, :_reduce_none,
  1, 137, :_reduce_none,
  2, 138, :_reduce_150,
  1, 138, :_reduce_151,
  1, 125, :_reduce_152,
  1, 125, :_reduce_153,
  1, 74, :_reduce_154,
  3, 122, :_reduce_155,
  2, 122, :_reduce_156,
  1, 122, :_reduce_none,
  1, 139, :_reduce_none,
  2, 140, :_reduce_159 ]

racc_reduce_n = 160

racc_shift_n = 265

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :INSERT => 10,
  :INTO => 11,
  :VALUES => 12,
  :SELECT => 13,
  :DISTINCTROW => 14,
  :DISTINCT => 15,
  :ALL => 16,
  :asterisk => 17,
  :AS => 18,
  :FROM => 19,
  :CROSS => 20,
  :JOIN => 21,
  :INNER => 22,
  :LEFT => 23,
  :OUTER => 24,
  :RIGHT => 25,
  :FULL => 26,
  :ON => 27,
  :USING => 28,
  :WHERE => 29,
  :GROUP => 30,
  :HAVING => 31,
  :NOT => 32,
  :BETWEEN => 33,
  :AND => 34,
  :IN => 35,
  :LIKE => 36,
  :IS => 37,
  :NULL => 38,
  :EXISTS => 39,
  :identifier => 40,
  :OR => 41,
  :equals_operator => 42,
  :not_equals_operator => 43,
  :less_than_operator => 44,
  :greater_than_operator => 45,
  :less_than_or_equals_operator => 46,
  :greater_than_or_equals_operator => 47,
  :plus_sign => 48,
  :minus_sign => 49,
  :solidus => 50,
  :CURRENT_USER => 51,
  :period => 52,
  :COUNT => 53,
  :AVG => 54,
  :MAX => 55,
  :MIN => 56,
  :SUM => 57,
  :E => 58,
  :quote => 59,
  :character_string_literal => 60,
  :DATE => 61,
  :date_string => 62 }

racc_nt_base = 63

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_20(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_96(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_120(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_150(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
