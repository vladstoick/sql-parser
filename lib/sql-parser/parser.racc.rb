#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 352)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -16,  -152,    75,    75,    61,   152,  -139,   -16,   -16,   -16,
    61,    75,    75,   247,    61,     7,   258,   286,     8,    48,
    83,    77,   259,   249,   252,   250,   251,    53,  -133,    56,
   287,   120,  -152,  -152,  -152,  -152,    68,  -139,  -139,  -139,
  -139,   288,    68,    79,  -159,   215,    68,    48,    59,    59,
    51,    52,   175,    79,    84,    95,    21,    59,    59,  -133,
  -133,  -133,  -133,   289,    51,    52,   290,   -16,    35,    49,
    39,    41,    42,    43,    44,    45,   182,    53,    79,    56,
    48,  -133,     9,   179,    21,   252,    11,    53,  -134,    56,
   281,   282,    51,    52,    99,    98,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,    12,    56,    57,    31,
   156,   157,  -133,  -133,  -133,  -133,    59,    21,    17,  -134,
  -134,  -134,  -134,    60,    76,    51,    52,   -94,    88,    35,
    49,    39,    41,    42,    43,    44,    45,    48,    53,    89,
    56,    21,   252,    80,    81,    82,    90,    91,    92,    51,
    52,    93,   113,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,    94,    56,  -159,   252,   114,    95,   116,
   117,    96,   118,   119,    21,    97,   100,     8,    59,   130,
    79,   139,    51,    52,    79,   148,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   153,    56,    21,   252,
   154,   158,   112,   162,    68,   164,    51,    52,   165,   166,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   167,    56,   168,   252,    79,    59,    59,    59,   174,   195,
   196,    21,   197,   198,   199,   200,   201,   202,   204,    51,
    52,   205,    68,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   211,    56,    21,   252,   212,   215,    61,
   229,   232,   233,    51,    52,   239,   139,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   254,    56,   269,
   252,   270,   215,   271,   229,   254,   275,   277,    21,   215,
    79,   284,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   nil,    56,    21,   175,   nil,   nil,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,   nil,    53,    48,    56,   nil,   182,   nil,    31,
   nil,   nil,   nil,   nil,   179,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,   nil,    53,    48,    56,   nil,
   nil,    21,   175,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    48,    56,   nil,   182,   nil,    31,   nil,
   nil,   nil,   nil,   179,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   nil,    56,   nil,    31,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
    48,    53,   nil,    56,   nil,   252,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    48,    56,   nil,   nil,    21,    31,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    52,    17,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,    48,    53,   nil,
    56,   nil,    31,   nil,   nil,   nil,   nil,     8,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
    48,    53,   nil,    56,    21,    31,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   nil,    56,   nil,    31,
   nil,   nil,   nil,   nil,     8,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,   106,    53,   nil,
    56,    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    17,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   nil,    56,    21,    31,
   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   nil,    56,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,    21,    31,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   nil,    56,   nil,
    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   nil,    56,    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,    48,    53,   nil,    56,   nil,    31,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,    48,    53,   nil,    56,    21,
    31,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,   nil,
    53,   nil,    56,    48,   nil,   nil,   nil,   nil,    31,   nil,
   nil,   nil,    21,   nil,    13,    14,    15,    17,   nil,   nil,
    51,    52,   nil,   nil,    35,    49,    39,    41,    42,    43,
    44,    45,   106,    53,   nil,    56,   nil,    31,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
    48,    53,   nil,    56,   nil,    31,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   141,   nil,   nil,    51,    52,   nil,
   nil,    35,    49,    39,    41,    42,    43,    44,    45,    48,
    53,   nil,    56,   nil,    31,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,    48,    53,   nil,
    56,   nil,    31,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,
    39,    41,    42,    43,    44,    45,    48,    53,   nil,    56,
   nil,    31,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   nil,    56,   nil,    31,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,    42,
    43,    44,    45,   nil,    53,   nil,    56,    48,   nil,   nil,
   nil,    21,   175,   nil,   nil,   nil,   nil,     8,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    48,    56,   nil,   182,   nil,    31,   nil,
   nil,   nil,   nil,   179,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,    41,
    42,    43,    44,    45,    48,    53,   nil,    56,   nil,    31,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
    48,    53,   nil,    56,   nil,   175,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,   nil,    53,    48,    56,   nil,   179,    21,    31,   nil,
   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,    35,
    49,    39,    41,    42,    43,    44,    45,   nil,    53,   nil,
    56,    48,   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,
   nil,   nil,    35,    49,    39,    41,    42,    43,    44,    45,
   182,    53,   nil,    56,    48,   nil,   nil,   179,    21,    31,
   nil,   nil,   nil,   nil,   nil,   nil,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,    48,    53,
   nil,    56,   nil,   252,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
    52,   nil,   nil,    35,    49,    39,    41,    42,    43,    44,
    45,    48,    53,   nil,    56,    21,   175,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,   nil,   nil,    35,    49,    39,
    41,    42,    43,    44,    45,   nil,    53,   nil,    56,   nil,
   182,   nil,   nil,   nil,   nil,   nil,   nil,   179,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   113,    51,    52,   nil,   nil,
    35,    49,    39,    41,    42,    43,    44,    45,   nil,    53,
   114,    56,   116,   117,   nil,   118,   119,   237,   238,   113,
   nil,   nil,   111,   nil,   nil,   nil,   112,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   114,   nil,   116,   117,   nil,   118,
   119,   216,   217,   nil,   218,   219,   220,   nil,   nil,   nil,
   nil,   221,   222,   223,   224,   225,   226 ]

racc_action_check = [
   106,   244,    16,    69,    12,    97,    23,   106,   106,   106,
    75,    71,    70,   213,   165,     0,   220,   276,     0,   275,
    25,    20,   220,   216,   275,   216,   216,   251,   104,   251,
   278,    63,   244,   244,   244,   244,    12,    23,    23,    23,
    23,   279,    75,    20,   244,   213,   165,   130,    16,    69,
    97,    97,   130,    63,    25,   106,   275,    71,    70,   104,
   104,   104,   104,   281,   275,   275,   282,   106,   275,   275,
   275,   275,   275,   275,   275,   275,   130,   275,   288,   275,
   217,   245,     1,   130,   130,   217,     5,   219,   105,   219,
   270,   270,   130,   130,    53,    53,   130,   130,   130,   130,
   130,   130,   130,   130,    15,   130,     7,   130,     9,    15,
   103,   103,   245,   245,   245,   245,    10,   217,    15,   105,
   105,   105,   105,    11,    19,   217,   217,    21,    36,   217,
   217,   217,   217,   217,   217,   217,   217,   221,   217,    39,
   217,    15,   221,    24,    24,    24,    41,    42,    43,    15,
    15,    44,   131,    15,    15,    15,    15,    15,    15,    15,
    15,   222,    15,    45,    15,    46,   222,   131,    48,   131,
   131,    49,   131,   131,   221,    50,    56,    61,    72,    74,
    77,    87,   221,   221,    88,    95,   221,   221,   221,   221,
   221,   221,   221,   221,   223,   221,    98,   221,   222,   223,
   101,   108,   110,   112,   113,   114,   222,   222,   115,   117,
   222,   222,   222,   222,   222,   222,   222,   222,   224,   222,
   118,   222,   119,   224,   120,   122,   124,   126,   129,   141,
   142,   223,   143,   144,   145,   146,   147,   151,   160,   223,
   223,   161,   164,   223,   223,   223,   223,   223,   223,   223,
   223,   225,   223,   173,   223,   224,   225,   174,   176,   179,
   180,   206,   207,   224,   224,   210,   214,   224,   224,   224,
   224,   224,   224,   224,   224,   226,   224,   218,   224,   238,
   226,   239,   241,   242,   248,   250,   253,   258,   225,   268,
   269,   272,   nil,   nil,   nil,   nil,   225,   225,   nil,   nil,
   225,   225,   225,   225,   225,   225,   225,   225,   229,   225,
   nil,   225,   226,   229,   nil,   nil,   nil,   nil,   nil,   nil,
   226,   226,   nil,   nil,   226,   226,   226,   226,   226,   226,
   226,   226,   nil,   226,   233,   226,   nil,   229,   nil,   233,
   nil,   nil,   nil,   nil,   229,   229,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   229,   229,   nil,   nil,   229,   229,   229,
   229,   229,   229,   229,   229,   nil,   229,   237,   229,   nil,
   nil,   233,   237,   nil,   nil,   nil,   nil,   nil,   nil,   233,
   233,   nil,   nil,   233,   233,   233,   233,   233,   233,   233,
   233,   nil,   233,    26,   233,   nil,   237,   nil,    26,   nil,
   nil,   nil,   nil,   237,   237,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   237,   237,   nil,   nil,   237,   237,   237,   237,
   237,   237,   237,   237,   111,   237,   nil,   237,   nil,   111,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,    26,    26,    26,    26,    26,    26,    26,
   249,    26,   nil,    26,   nil,   249,   nil,   nil,   nil,   nil,
   nil,   111,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   111,
   111,   nil,   nil,   111,   111,   111,   111,   111,   111,   111,
   111,   nil,   111,    14,   111,   nil,   nil,   249,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   249,   249,    14,   nil,   249,
   249,   249,   249,   249,   249,   249,   249,   252,   249,   nil,
   249,   nil,   252,   nil,   nil,   nil,   nil,   252,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,    14,
   nil,   nil,    14,    14,    14,    14,    14,    14,    14,    14,
    31,    14,   nil,    14,   252,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   252,   252,   nil,   nil,   252,   252,   252,   252,
   252,   252,   252,   252,   254,   252,   nil,   252,   nil,   254,
   nil,   nil,   nil,   nil,   254,   nil,   nil,    31,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,    31,   nil,   nil,    31,
    31,    31,    31,    31,    31,    31,    31,    60,    31,   nil,
    31,   254,    60,   nil,   nil,   nil,   nil,   nil,   nil,   254,
   254,   nil,   nil,   254,   254,   254,   254,   254,   254,   254,
   254,    13,   254,   nil,   254,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    60,    13,   nil,   nil,   nil,   nil,
   nil,   nil,    60,    60,   nil,   nil,    60,    60,    60,    60,
    60,    60,    60,    60,   271,    60,   nil,    60,    13,   271,
   nil,   nil,   nil,   nil,   nil,   nil,    13,    13,   nil,   nil,
    13,    13,    13,    13,    13,    13,    13,    13,    76,    13,
   nil,    13,   nil,    76,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   271,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   271,
   271,   nil,   nil,   271,   271,   271,   271,   271,   271,   271,
   271,    80,   271,   nil,   271,    76,    80,   nil,   nil,   nil,
   nil,   nil,   nil,    76,    76,   nil,   nil,    76,    76,    76,
    76,    76,    76,    76,    76,    81,    76,   nil,    76,   nil,
    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    80,    80,   nil,   nil,
    80,    80,    80,    80,    80,    80,    80,    80,    82,    80,
   nil,    80,    81,    82,   nil,   nil,   nil,   nil,   nil,   nil,
    81,    81,   nil,   nil,    81,    81,    81,    81,    81,    81,
    81,    81,    83,    81,   nil,    81,   nil,    83,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    82,    82,   nil,   nil,    82,    82,    82,
    82,    82,    82,    82,    82,    84,    82,   nil,    82,    83,
    84,   nil,   nil,   nil,   nil,   nil,   nil,    83,    83,   nil,
   nil,    83,    83,    83,    83,    83,    83,    83,    83,   nil,
    83,   nil,    83,     8,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,    84,   nil,     8,     8,     8,     8,   nil,   nil,
    84,    84,   nil,   nil,    84,    84,    84,    84,    84,    84,
    84,    84,   154,    84,   nil,    84,   nil,   154,   nil,   nil,
     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,     8,
   nil,   nil,     8,     8,     8,     8,     8,     8,     8,     8,
    89,     8,   nil,     8,   nil,    89,   nil,   nil,   nil,   154,
   nil,   nil,   nil,   nil,    89,   nil,   nil,   154,   154,   nil,
   nil,   154,   154,   154,   154,   154,   154,   154,   154,   162,
   154,   nil,   154,   nil,   162,   nil,   nil,    89,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    89,    89,   nil,   nil,    89,
    89,    89,    89,    89,    89,    89,    89,    90,    89,   nil,
    89,   nil,    90,   nil,   nil,   nil,   162,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   162,   162,   nil,   nil,   162,   162,
   162,   162,   162,   162,   162,   162,    91,   162,   nil,   162,
   nil,    91,   nil,   nil,    90,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    90,    90,   nil,   nil,    90,    90,    90,    90,
    90,    90,    90,    90,    92,    90,   nil,    90,   nil,    92,
   nil,   nil,   nil,    91,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    91,    91,   nil,   nil,    91,    91,    91,    91,    91,
    91,    91,    91,   nil,    91,   nil,    91,   175,   nil,   nil,
   nil,    92,   175,   nil,   nil,   nil,   nil,   175,   nil,    92,
    92,   nil,   nil,    92,    92,    92,    92,    92,    92,    92,
    92,   nil,    92,    93,    92,   nil,   175,   nil,    93,   nil,
   nil,   nil,   nil,   175,   175,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   175,   175,   nil,   nil,   175,   175,   175,   175,
   175,   175,   175,   175,    94,   175,   nil,   175,   nil,    94,
    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    93,    93,
   nil,   nil,    93,    93,    93,    93,    93,    93,    93,    93,
   182,    93,   nil,    93,   nil,   182,   nil,   nil,   nil,   nil,
   nil,    94,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,
    94,   nil,   nil,    94,    94,    94,    94,    94,    94,    94,
    94,   nil,    94,   205,    94,   nil,   182,   182,   205,   nil,
   nil,   nil,   nil,   nil,   nil,   182,   182,   nil,   nil,   182,
   182,   182,   182,   182,   182,   182,   182,   nil,   182,   nil,
   182,   211,   nil,   nil,   nil,   nil,   211,   nil,   nil,   nil,
   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,   205,
   nil,   nil,   205,   205,   205,   205,   205,   205,   205,   205,
   211,   205,   nil,   205,   212,   nil,   nil,   211,   211,   212,
   nil,   nil,   nil,   nil,   nil,   nil,   211,   211,   nil,   nil,
   211,   211,   211,   211,   211,   211,   211,   211,   284,   211,
   nil,   211,   nil,   284,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   212,
   212,   nil,   nil,   212,   212,   212,   212,   212,   212,   212,
   212,   215,   212,   nil,   212,   284,   215,   nil,   nil,   nil,
   nil,   nil,   nil,   284,   284,   nil,   nil,   284,   284,   284,
   284,   284,   284,   284,   284,   nil,   284,   nil,   284,   nil,
   215,   nil,   nil,   nil,   nil,   nil,   nil,   215,   215,   nil,
   nil,   nil,   nil,   nil,   nil,   209,   215,   215,   nil,   nil,
   215,   215,   215,   215,   215,   215,   215,   215,   nil,   215,
   209,   215,   209,   209,   nil,   209,   209,   209,   209,    62,
   nil,   nil,    62,   nil,   nil,   nil,    62,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    62,   nil,    62,    62,   nil,    62,
    62,   178,   178,   nil,   178,   178,   178,   nil,   nil,   nil,
   nil,   178,   178,   178,   178,   178,   178 ]

racc_action_pointer = [
     3,    82,   nil,   nil,   nil,    84,   nil,    93,   848,   108,
    49,   120,    -6,   616,   478,    99,   -19,   nil,   nil,   117,
     1,    72,   nil,   -13,    93,     1,   388,   nil,   nil,   nil,
   nil,   535,   nil,   nil,   nil,   nil,    73,   nil,   nil,   129,
   nil,   136,   137,   138,   141,   153,   103,   nil,   113,   166,
   113,   nil,   nil,    31,   nil,   nil,   110,   nil,   nil,   nil,
   592,   162,  1352,    11,   nil,   nil,   nil,   nil,   nil,   -18,
    -9,   -10,   111,   nil,   148,     0,   673,   138,   nil,   nil,
   706,   730,   763,   787,   820,   nil,   nil,   170,   142,   905,
   962,   991,  1019,  1078,  1109,   180,   nil,     0,   133,   nil,
   nil,   193,   nil,   102,     9,    69,     0,   nil,   190,   nil,
   188,   419,   193,   162,   182,   185,   nil,   183,   194,   196,
   182,   nil,   158,   nil,   159,   nil,   160,   nil,   nil,   196,
    42,   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   218,   219,   221,   222,   223,   224,   225,   nil,   nil,
   nil,   232,   nil,   nil,   877,   nil,   nil,   nil,   nil,   nil,
   227,   234,   934,   nil,   200,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   220,   254,  1052,   215,   nil,  1347,   249,
   224,   nil,  1135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1168,   250,   255,   nil,  1328,
   261,  1196,  1229,     2,   255,  1286,   -12,    75,   267,    24,
   -18,   132,   156,   189,   213,   246,   270,   nil,   nil,   303,
   nil,   nil,   nil,   329,   nil,   nil,   nil,   362,   269,   276,
   nil,   239,   276,   nil,   -18,    62,   nil,   nil,   248,   445,
   275,   -36,   502,   250,   559,   nil,   nil,   nil,   247,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   246,   248,
    84,   649,   255,   nil,   nil,    14,     6,   nil,    19,    34,
   nil,    58,    61,   nil,  1253,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -173,  -173,    -1,    -2,    -3,    -5,   -22,  -173,  -173,  -173,
  -172,  -173,  -173,  -173,  -173,  -173,  -172,   -37,   -38,   -40,
   -43,  -165,  -121,  -122,  -126,  -129,  -173,  -131,  -132,  -133,
  -134,  -173,  -136,  -137,  -138,  -140,  -173,  -142,  -143,  -173,
  -145,  -173,  -173,  -173,  -173,  -173,  -152,  -153,  -157,  -173,
  -173,  -163,  -164,  -173,  -168,  -169,  -173,   293,    -4,  -171,
  -173,  -173,  -173,   -48,   -49,   -50,   -52,   -53,   -94,  -172,
  -172,  -172,  -172,   -36,   -69,  -173,  -173,  -173,   -42,  -165,
  -173,  -173,  -173,  -173,  -173,  -130,  -139,  -173,  -173,  -173,
  -173,  -173,  -173,  -173,  -173,  -155,  -156,  -173,  -173,  -167,
  -170,    -6,   -12,   -18,   -14,   -15,  -157,   -17,  -173,   -23,
  -173,  -173,  -173,  -173,  -173,  -173,   -57,   -59,   -61,   -62,
  -173,   -47,  -172,   -30,  -172,   -32,  -172,   -34,   -35,   -71,
  -173,   -45,   -39,   -41,  -123,  -124,  -125,  -127,  -128,  -135,
  -141,  -173,  -173,  -173,  -173,  -173,  -173,  -173,  -154,  -158,
  -160,  -173,  -162,  -166,  -173,   -13,   -19,   -20,   -21,   -24,
  -173,   -27,  -173,   -54,  -173,  -173,   -58,   -60,   -63,   -46,
   -29,   -31,   -33,   -78,  -173,  -173,   -70,   -80,  -173,  -173,
   -97,   -99,  -173,  -102,  -103,  -104,  -106,  -107,  -108,  -109,
  -110,  -111,  -118,  -119,  -120,  -144,  -146,  -147,  -148,  -149,
  -150,  -151,  -161,   -11,   -25,  -173,  -173,   -88,   -55,  -173,
    -7,  -173,  -173,  -173,  -120,  -173,  -173,  -173,  -173,  -173,
  -173,  -173,  -173,  -173,  -173,  -173,  -173,   -51,   -93,  -173,
  -101,   -26,   -28,  -173,   -56,   -64,   -65,  -173,  -173,  -173,
   -44,   -79,   -72,   -74,   -75,   -76,   -77,  -105,   -98,  -173,
  -173,  -173,  -173,  -173,  -173,   -84,   -85,   -90,  -173,   -92,
  -112,  -113,  -114,  -115,  -116,  -117,  -100,   -87,   -66,  -173,
    -8,  -173,  -173,   -83,   -89,  -173,  -173,   -91,  -173,   -68,
   -96,  -173,  -173,   -73,  -173,   -82,   -86,   -67,  -173,    -9,
   -10,   -81,   -95 ]

racc_goto_table = [
    78,    20,   104,    62,    64,   105,    20,    20,    20,   107,
   176,   160,    63,   102,   255,   266,    86,    58,   206,   230,
    16,   244,   243,    73,    87,    69,    70,    71,   151,   134,
   135,   136,   137,   138,    85,   149,     1,   150,     2,    72,
     3,     4,   109,   121,     5,    10,   273,   101,   240,   155,
    86,   110,   132,   129,   173,   213,   253,   133,   210,   228,
   260,   261,   262,   263,   264,   265,   131,    64,   140,    20,
    86,    86,    86,    86,    86,    63,   123,   125,   127,   128,
   244,   283,   142,   143,   144,   145,   146,   147,   272,   267,
   159,   241,   122,   124,   126,   234,   104,   235,   236,   105,
   169,   278,   279,   107,   161,   231,   242,   203,   248,   nil,
   276,   nil,   nil,   163,   285,   nil,   nil,   268,   nil,   nil,
   nil,   nil,   nil,   291,   nil,   nil,   nil,   nil,   nil,   170,
   nil,   171,   nil,   172,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    86,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   245,   207,   209,    64,   nil,   nil,
   nil,   246,   nil,   nil,   208,    63,   nil,   nil,   214,   nil,
   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   161,   nil,
   nil,   nil,    86,   nil,   nil,   nil,   nil,   nil,   nil,   257,
   227,   nil,   nil,   245,   nil,   nil,   nil,   nil,   nil,   nil,
   246,   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   274,   227,   nil,   nil,    87,   nil,   207,   nil,   280,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    86,   nil,   nil,   nil,   nil,   nil,   nil,   292 ]

racc_goto_check = [
    28,    22,    13,    18,    16,    14,    22,    22,    22,    15,
    42,    21,    33,    10,    52,    58,    54,     7,    23,    59,
    24,    47,    46,     7,    22,    24,    24,    24,    66,    15,
    15,    15,    64,    64,    67,    76,     1,    77,     2,    25,
     3,     4,    19,    28,     5,     6,    52,     8,     9,    12,
    54,    20,    26,    30,    31,    42,    50,    28,    32,    35,
    50,    50,    50,    50,    50,    50,    18,    16,    28,    22,
    54,    54,    54,    54,    54,    33,     7,     7,     7,     7,
    47,    46,    22,    22,    22,    22,    22,    22,    50,    23,
    19,    42,    25,    25,    25,    39,    13,    40,    41,    14,
    28,    43,    44,    15,    22,    21,    45,    10,    57,   nil,
    23,   nil,   nil,    33,    50,   nil,   nil,    42,   nil,   nil,
   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,     7,
   nil,     7,   nil,     7,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,    22,    18,    16,   nil,   nil,
   nil,    15,   nil,   nil,    33,    33,   nil,   nil,    22,   nil,
   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,    54,
    16,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    54,    16,   nil,   nil,    22,   nil,    22,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,    28 ]

racc_goto_pointer = [
   nil,    36,    38,    40,    41,    44,    40,     7,   -13,  -162,
   -47,   nil,   -54,   -58,   -55,   -51,    -8,   nil,    -9,   -20,
   -11,  -100,    -7,  -144,    12,    23,   -24,   nil,   -20,   nil,
   -21,   -75,  -115,     0,   nil,  -120,   nil,   nil,   nil,  -114,
  -112,  -111,  -120,  -168,  -167,  -106,  -190,  -191,   nil,   nil,
  -161,   nil,  -204,   nil,   -10,   nil,   nil,  -107,  -214,  -163,
   nil,   nil,   nil,   nil,   -51,   nil,   -69,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -62,   -60,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   108,   nil,   nil,   nil,   nil,
   nil,   103,   nil,    29,    30,    22,   177,     6,   nil,   nil,
   nil,   nil,   194,   nil,   nil,   nil,    18,    19,    37,    74,
   nil,   nil,   nil,    38,    65,   256,    66,    67,   115,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   193,   187,
   178,   188,   nil,   189,    23,   190,   191,   180,   181,   183,
   184,   185,   186,   192,    24,    25,    26,    27,    28,    32,
    33,    34,    36,    40,    47,    50,   nil,   nil,    54,    55 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 69, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  3, 71, :_reduce_4,
  0, 74, :_reduce_none,
  3, 74, :_reduce_6,
  0, 77, :_reduce_none,
  2, 77, :_reduce_8,
  4, 77, :_reduce_9,
  4, 77, :_reduce_10,
  3, 76, :_reduce_11,
  1, 76, :_reduce_none,
  2, 78, :_reduce_13,
  1, 79, :_reduce_none,
  1, 79, :_reduce_none,
  1, 79, :_reduce_16,
  1, 79, :_reduce_none,
  0, 80, :_reduce_18,
  1, 80, :_reduce_19,
  1, 80, :_reduce_20,
  3, 84, :_reduce_21,
  1, 73, :_reduce_none,
  4, 72, :_reduce_23,
  5, 72, :_reduce_24,
  3, 88, :_reduce_25,
  3, 89, :_reduce_26,
  1, 89, :_reduce_none,
  4, 87, :_reduce_28,
  5, 85, :_reduce_29,
  4, 85, :_reduce_30,
  5, 85, :_reduce_31,
  4, 85, :_reduce_32,
  5, 85, :_reduce_33,
  4, 85, :_reduce_34,
  4, 85, :_reduce_35,
  3, 85, :_reduce_36,
  1, 92, :_reduce_37,
  1, 92, :_reduce_38,
  3, 94, :_reduce_39,
  1, 94, :_reduce_none,
  3, 95, :_reduce_41,
  2, 95, :_reduce_42,
  1, 95, :_reduce_none,
  5, 93, :_reduce_44,
  2, 97, :_reduce_45,
  3, 86, :_reduce_46,
  2, 86, :_reduce_47,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 103, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 104, :_reduce_54,
  4, 104, :_reduce_55,
  5, 105, :_reduce_56,
  1, 106, :_reduce_57,
  2, 106, :_reduce_58,
  1, 106, :_reduce_59,
  2, 106, :_reduce_60,
  1, 106, :_reduce_61,
  1, 106, :_reduce_62,
  2, 106, :_reduce_63,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  2, 108, :_reduce_66,
  4, 109, :_reduce_67,
  1, 111, :_reduce_none,
  0, 98, :_reduce_none,
  2, 98, :_reduce_70,
  0, 99, :_reduce_none,
  3, 99, :_reduce_72,
  3, 113, :_reduce_73,
  1, 113, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  0, 100, :_reduce_none,
  2, 100, :_reduce_79,
  1, 116, :_reduce_none,
  6, 117, :_reduce_81,
  5, 117, :_reduce_82,
  4, 119, :_reduce_83,
  3, 119, :_reduce_84,
  1, 120, :_reduce_none,
  3, 120, :_reduce_86,
  3, 91, :_reduce_87,
  1, 91, :_reduce_none,
  4, 121, :_reduce_89,
  3, 121, :_reduce_90,
  4, 123, :_reduce_91,
  3, 123, :_reduce_92,
  2, 124, :_reduce_93,
  1, 101, :_reduce_94,
  3, 112, :_reduce_95,
  1, 112, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_98,
  1, 125, :_reduce_none,
  3, 125, :_reduce_100,
  2, 126, :_reduce_101,
  1, 126, :_reduce_none,
  1, 127, :_reduce_none,
  1, 128, :_reduce_none,
  3, 128, :_reduce_105,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 130, :_reduce_112,
  3, 130, :_reduce_113,
  3, 130, :_reduce_114,
  3, 130, :_reduce_115,
  3, 130, :_reduce_116,
  3, 130, :_reduce_117,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 131, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 83, :_reduce_123,
  3, 83, :_reduce_124,
  3, 83, :_reduce_125,
  1, 83, :_reduce_none,
  3, 132, :_reduce_127,
  3, 132, :_reduce_128,
  1, 132, :_reduce_none,
  2, 133, :_reduce_130,
  1, 133, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 135, :_reduce_135,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 138, :_reduce_140,
  3, 81, :_reduce_141,
  1, 81, :_reduce_none,
  1, 140, :_reduce_none,
  4, 82, :_reduce_144,
  1, 82, :_reduce_none,
  4, 141, :_reduce_146,
  4, 141, :_reduce_147,
  4, 141, :_reduce_148,
  4, 141, :_reduce_149,
  4, 141, :_reduce_150,
  4, 141, :_reduce_151,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  3, 115, :_reduce_154,
  2, 115, :_reduce_155,
  2, 115, :_reduce_156,
  1, 115, :_reduce_157,
  3, 142, :_reduce_158,
  1, 143, :_reduce_none,
  1, 144, :_reduce_none,
  2, 145, :_reduce_161,
  1, 145, :_reduce_162,
  1, 134, :_reduce_163,
  1, 134, :_reduce_164,
  1, 96, :_reduce_165,
  3, 122, :_reduce_166,
  2, 122, :_reduce_167,
  1, 122, :_reduce_none,
  1, 146, :_reduce_none,
  2, 147, :_reduce_170,
  1, 75, :_reduce_none,
  0, 75, :_reduce_none ]

racc_reduce_n = 173

racc_shift_n = 293

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :modulo => 52,
  :solidus => 53,
  :CURRENT_USER => 54,
  :period => 55,
  :COUNT => 56,
  :LENGTH => 57,
  :AVG => 58,
  :MAX => 59,
  :MIN => 60,
  :SUM => 61,
  :E => 62,
  :quote => 63,
  :character_string_literal => 64,
  :DATE => 65,
  :date_string => 66,
  :semicolon => 67 }

racc_nt_base = 68

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "modulo",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "LENGTH",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "semicolon",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "semicolon_not_req",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "set_function_specification",
  "numeric_value_expression",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "exact_numeric_literal",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "general_literal",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_39(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_56(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_73(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_87(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_95(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_105(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Modulo.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_130(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_135(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Length.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_161(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

# reduce 171 omitted

# reduce 172 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
