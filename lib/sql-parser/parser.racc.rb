#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 342)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,    97,    97,   227,   102,    31,   109,    76,    71,   238,
    47,   229,   147,   230,   231,   239,   135,     7,    47,   103,
     8,   105,   106,    31,   107,   108,   217,   218,    73,   148,
    73,   139,   140,    74,    75,   194,    47,    21,    21,    21,
    77,   232,    47,    91,    90,    50,    51,    21,    35,    48,
    39,    41,    42,    43,    44,    21,    52,   149,    55,    48,
    47,    50,    51,    50,    51,    31,    35,    48,    39,    41,
    42,    43,    44,    21,    52,   150,    55,    73,    47,    21,
   153,    50,    51,    31,    35,    48,    39,    41,    42,    43,
    44,    48,    52,    63,    55,   174,    47,    21,   261,   262,
   175,    31,   176,   177,   178,    50,    51,   179,    35,    48,
    39,    41,    42,    43,    44,    21,    52,   180,    55,   115,
    47,   182,   183,    50,    51,    31,    35,    48,    39,    41,
    42,    43,    44,    21,    52,    69,    55,    63,    47,    63,
   189,    50,    51,    31,    35,    48,    39,    41,    42,    43,
    44,   190,    52,    69,    55,   194,    47,    21,   206,   209,
    69,    31,   212,   213,   219,    50,    51,  -134,    35,    48,
    39,    41,    42,    43,    44,    21,    52,    92,    55,   226,
    47,    89,   123,    50,    51,    31,    35,    48,    39,    41,
    42,    43,    44,    21,    52,    88,    55,    87,  -134,  -134,
  -134,    50,    51,   234,    35,    48,    39,    41,    42,    43,
    44,  -153,    52,    47,    55,    86,    85,    21,    31,    84,
    83,    82,    81,     8,   102,    50,    51,   125,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   -90,    55,   103,
    31,   105,   106,    70,   107,   108,   249,   250,   194,   251,
    21,   209,    69,   234,    63,    57,   255,    56,    50,    51,
   257,    35,    48,    39,    41,    42,    43,    44,    47,    52,
   194,    55,    21,    31,    73,    12,   264,    11,     8,   266,
    50,    51,   267,    35,    48,    39,    41,    42,    43,    44,
    47,    52,   268,    55,   269,    31,   270,     9,    73,    73,
   131,    13,    14,    15,    17,    21,   123,   136,   137,   101,
    73,   144,    63,    50,    51,   146,    35,    48,    39,    41,
    42,    43,    44,    47,    52,   nil,    55,    21,    31,   nil,
   nil,   nil,   nil,     8,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   nil,
   232,   195,   196,   nil,   197,   198,   199,   nil,   nil,   nil,
    21,   200,   201,   202,   203,   204,   205,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,    47,    52,
   nil,    55,    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,    17,    35,    48,    39,    41,    42,    43,    44,
    47,    52,   nil,    55,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    17,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,    47,    52,   nil,    55,    21,    31,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,    17,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   nil,
   232,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,    47,    52,
   nil,    55,    21,   154,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    47,    52,   nil,    55,   nil,   232,   nil,   161,   nil,   nil,
   nil,   nil,   nil,   nil,   158,    21,   nil,   nil,   nil,   nil,
    47,   nil,   nil,    50,    51,    31,    35,    48,    39,    41,
    42,    43,    44,   nil,    52,   nil,    55,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,    21,    55,   nil,
   154,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   nil,
    31,   nil,   nil,   nil,   161,   nil,   nil,   nil,   nil,   nil,
   nil,   158,    21,    47,   nil,   nil,   nil,   nil,    31,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    21,    55,   nil,    47,   nil,   nil,   nil,   nil,
   232,   nil,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
   232,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    21,    47,   nil,   nil,   nil,   nil,   232,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    21,    55,   nil,   nil,   nil,    47,   nil,   nil,
    50,    51,   232,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
   232,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,   nil,    47,    21,   nil,   nil,   nil,   232,   nil,
   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,    21,    52,   nil,    55,   nil,    47,   nil,   nil,
    50,    51,   232,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
   232,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,    21,    52,    47,    55,   nil,   nil,   nil,   154,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   161,   nil,   154,   nil,   nil,   nil,   nil,
   158,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,   161,
    52,   nil,    55,    47,   nil,   nil,   158,    21,    31,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,    47,    55,   nil,
   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,   nil,   158,    21,   154,   nil,   nil,   nil,   nil,
     8,   nil,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,    47,    52,   nil,    55,   nil,    31,   nil,   161,
   nil,   nil,   nil,   nil,   nil,   nil,   158,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,    21,
   154,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,   nil,
    55,   nil,   nil,   nil,   161,   nil,   nil,   nil,   nil,   nil,
   nil,   158,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,   102,    55,   nil,   100,   nil,   nil,   nil,   101,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   103,   nil,   105,
   106,   nil,   107,   108 ]

racc_action_check = [
    83,   137,    57,   192,   187,    83,    59,    25,    20,   199,
   190,   195,   104,   195,   195,   199,    89,     0,    85,   187,
     0,   187,   187,    85,   187,   187,   187,   187,    59,   106,
    20,    95,    95,    24,    24,   192,   255,    83,   137,    57,
    25,   255,   251,    52,    52,    83,    83,   190,    83,    83,
    83,    83,    83,    83,    83,    85,    83,   107,    83,   190,
    70,    89,    89,    85,    85,    70,    85,    85,    85,    85,
    85,    85,    85,   255,    85,   108,    85,   109,   100,   251,
   114,   255,   255,   100,   255,   255,   255,   255,   255,   255,
   255,   251,   255,    69,   255,   125,    74,    70,   250,   250,
   126,    74,   127,   128,   129,    70,    70,   130,    70,    70,
    70,    70,    70,    70,    70,   100,    70,   134,    70,    68,
    75,   142,   143,   100,   100,    75,   100,   100,   100,   100,
   100,   100,   100,    74,   100,    66,   100,   146,    76,   147,
   152,    74,    74,    76,    74,    74,    74,    74,    74,    74,
    74,   153,    74,    65,    74,   155,    77,    75,   158,   159,
    64,    77,   184,   185,   188,    75,    75,    23,    75,    75,
    75,    75,    75,    75,    75,    76,    75,    55,    75,   191,
    86,    49,   193,    76,    76,    86,    76,    76,    76,    76,
    76,    76,    76,    77,    76,    48,    76,    47,    23,    23,
    23,    77,    77,   197,    77,    77,    77,    77,    77,    77,
    77,    45,    77,    82,    77,    44,    43,    86,    82,    42,
    41,    39,    36,   206,   116,    86,    86,    82,    86,    86,
    86,    86,    86,    86,    86,    84,    86,    21,    86,   116,
    84,   116,   116,    19,   116,   116,   218,   219,   221,   222,
    82,   228,    16,   230,    12,    11,   233,     9,    82,    82,
   238,    82,    82,    82,    82,    82,    82,    82,   234,    82,
   248,    82,    84,   234,   249,     7,   252,     5,   234,   256,
    84,    84,   258,    84,    84,    84,    84,    84,    84,    84,
     8,    84,   259,    84,   261,     8,   262,     1,    81,   268,
    87,     8,     8,     8,     8,   234,    80,    90,    93,    99,
    71,   101,   102,   234,   234,   103,   234,   234,   234,   234,
   234,   234,   234,   232,   234,   nil,   234,     8,   232,   nil,
   nil,   nil,   nil,   232,   nil,     8,     8,   nil,     8,     8,
     8,     8,     8,     8,     8,   231,     8,   nil,     8,   nil,
   231,   157,   157,   nil,   157,   157,   157,   nil,   nil,   nil,
   232,   157,   157,   157,   157,   157,   157,   nil,   232,   232,
   nil,   232,   232,   232,   232,   232,   232,   232,    13,   232,
   nil,   232,   231,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   231,   231,    13,   231,   231,   231,   231,   231,   231,   231,
    14,   231,   nil,   231,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    14,    13,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13,    13,   nil,    13,    13,    13,    13,
    13,    13,    13,    15,    13,   nil,    13,    14,    15,   nil,
   nil,   nil,   nil,   nil,   nil,    14,    14,    15,    14,    14,
    14,    14,    14,    14,    14,   229,    14,   nil,    14,   nil,
   229,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,    15,
   nil,    15,    15,    15,    15,    15,    15,    15,   217,    15,
   nil,    15,   229,   217,   nil,   nil,   nil,   nil,   nil,   nil,
   229,   229,   nil,   229,   229,   229,   229,   229,   229,   229,
   264,   229,   nil,   229,   nil,   264,   nil,   217,   nil,   nil,
   nil,   nil,   nil,   nil,   217,   217,   nil,   nil,   nil,   nil,
   213,   nil,   nil,   217,   217,   213,   217,   217,   217,   217,
   217,   217,   217,   nil,   217,   nil,   217,   264,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   264,   264,   nil,   264,   264,
   264,   264,   264,   264,   264,   209,   264,   213,   264,   nil,
   209,   nil,   nil,   nil,   nil,   213,   213,   nil,   213,   213,
   213,   213,   213,   213,   213,    26,   213,   nil,   213,   nil,
    26,   nil,   nil,   nil,   209,   nil,   nil,   nil,   nil,   nil,
   nil,   209,   209,    31,   nil,   nil,   nil,   nil,    31,   nil,
   209,   209,   nil,   209,   209,   209,   209,   209,   209,   209,
   nil,   209,    26,   209,   nil,   205,   nil,   nil,   nil,   nil,
   205,   nil,   nil,    26,    26,    26,    26,    26,    26,    26,
    31,    26,   nil,    26,   nil,   204,   nil,   nil,    31,    31,
   204,    31,    31,    31,    31,    31,    31,    31,   nil,    31,
   nil,    31,   205,   203,   nil,   nil,   nil,   nil,   203,   nil,
   205,   205,   nil,   205,   205,   205,   205,   205,   205,   205,
   nil,   205,   204,   205,   nil,   nil,   nil,   202,   nil,   nil,
   204,   204,   202,   204,   204,   204,   204,   204,   204,   204,
   203,   204,   nil,   204,   nil,   201,   nil,   nil,   203,   203,
   201,   203,   203,   203,   203,   203,   203,   203,   nil,   203,
   nil,   203,   nil,   200,   202,   nil,   nil,   nil,   200,   nil,
   nil,   nil,   202,   202,   nil,   202,   202,   202,   202,   202,
   202,   202,   201,   202,   nil,   202,   nil,   198,   nil,   nil,
   201,   201,   198,   201,   201,   201,   201,   201,   201,   201,
   200,   201,   nil,   201,   nil,   196,   nil,   nil,   200,   200,
   196,   200,   200,   200,   200,   200,   200,   200,   nil,   200,
   nil,   200,   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   198,   198,   nil,   198,   198,   198,   198,   198,
   198,   198,   196,   198,   194,   198,   nil,   nil,   nil,   194,
   196,   196,   nil,   196,   196,   196,   196,   196,   196,   196,
   nil,   196,   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,
   189,   nil,   nil,   194,   nil,   189,   nil,   nil,   nil,   nil,
   194,   194,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,
   194,   nil,   194,   194,   194,   194,   194,   194,   194,   189,
   194,   nil,   194,   183,   nil,   nil,   189,   189,   183,   nil,
   nil,   nil,   nil,   nil,   nil,   189,   189,   nil,   189,   189,
   189,   189,   189,   189,   189,   nil,   189,   161,   189,   nil,
   nil,   nil,   161,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   183,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,   183,
   nil,   183,   183,   183,   183,   183,   183,   183,   nil,   183,
   154,   183,   nil,   161,   161,   154,   nil,   nil,   nil,   nil,
   154,   nil,   161,   161,   nil,   161,   161,   161,   161,   161,
   161,   161,   144,   161,   nil,   161,   nil,   144,   nil,   154,
   nil,   nil,   nil,   nil,   nil,   nil,   154,   154,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   154,   154,   nil,   154,   154,
   154,   154,   154,   154,   154,   115,   154,   nil,   154,   144,
   115,   nil,   nil,   nil,   nil,   nil,   nil,   144,   144,   nil,
   144,   144,   144,   144,   144,   144,   144,   nil,   144,   nil,
   144,   nil,   nil,   nil,   115,   nil,   nil,   nil,   nil,   nil,
   nil,   115,   115,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   115,   115,   nil,   115,   115,   115,   115,   115,   115,   115,
   nil,   115,    58,   115,   nil,    58,   nil,   nil,   nil,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,   nil,    58,
    58,   nil,    58,    58 ]

racc_action_pointer = [
     5,   297,   nil,   nil,   nil,   275,   nil,   262,   285,   257,
   nil,   252,   212,   373,   395,   428,   231,   nil,   nil,   236,
   -12,   183,   nil,   148,   -17,   -12,   580,   nil,   nil,   nil,
   nil,   598,   nil,   nil,   nil,   nil,   168,   nil,   nil,   211,
   nil,   210,   209,   206,   205,   151,   nil,   143,   190,   121,
   nil,   nil,   -18,   nil,   nil,   113,   nil,    -3,  1025,   -14,
   nil,   nil,   nil,   nil,   139,   132,   114,   nil,    88,    51,
    55,   268,   nil,   nil,    91,   115,   133,   151,   nil,   nil,
   295,   256,   208,    -5,   230,    13,   175,   295,   nil,    11,
   246,   nil,   nil,   301,   nil,    23,   nil,   nil,   nil,   295,
    73,   301,   270,   292,   -11,   nil,     3,    31,    49,    35,
   nil,   nil,   nil,   nil,    48,   970,   217,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    84,    89,    91,    92,    93,
    96,   nil,   nil,   nil,   112,   nil,   nil,    -4,   nil,   nil,
   nil,   nil,   110,   115,   937,   nil,    95,    97,   nil,   nil,
   nil,   nil,   107,   148,   915,   112,   nil,   317,   148,   123,
   nil,   882,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   858,   151,   156,   nil,    -3,   160,   825,
     5,   168,    -8,   171,   799,   -24,   760,   193,   742,   -25,
   718,   700,   682,   658,   640,   620,   208,   nil,   nil,   560,
   nil,   nil,   nil,   525,   nil,   nil,   nil,   483,   236,   242,
   nil,   205,   242,   nil,   nil,   nil,   nil,   nil,   215,   450,
   243,   340,   318,   220,   263,   nil,   nil,   nil,   220,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,   232,
    92,    37,   240,   nil,   nil,    31,   268,   nil,   271,   285,
   nil,   289,   291,   nil,   505,   nil,   nil,   nil,   257,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -165,  -165,    -1,    -2,    -3,    -5,   -20,  -165,  -165,  -165,
    -4,  -165,  -165,  -165,  -165,  -165,   -34,   -35,   -36,   -38,
   -41,  -159,  -117,  -118,  -121,  -124,  -165,  -126,  -127,  -128,
  -129,  -165,  -131,  -132,  -133,  -135,  -165,  -137,  -138,  -165,
  -140,  -165,  -165,  -165,  -165,  -146,  -147,  -151,  -165,  -165,
  -157,  -158,  -165,  -162,  -163,  -165,   273,  -165,  -165,   -46,
   -47,   -49,   -50,   -90,   -28,   -30,   -32,   -33,   -66,  -165,
  -165,  -165,   -40,  -159,  -165,  -165,  -165,  -165,  -125,  -134,
  -165,  -165,  -165,  -165,  -165,  -165,  -165,  -149,  -150,  -165,
  -165,  -161,  -164,    -6,   -12,   -16,   -14,   -15,   -21,  -165,
  -165,  -165,  -165,  -165,  -165,   -54,   -56,   -58,   -59,  -165,
   -45,   -27,   -29,   -31,   -68,  -165,   -43,   -37,   -39,  -119,
  -120,  -122,  -123,  -130,  -136,  -165,  -165,  -165,  -165,  -165,
  -165,  -148,  -152,  -154,  -165,  -156,  -160,  -165,   -13,   -17,
   -18,   -22,  -165,   -25,  -165,   -51,  -165,  -165,   -55,   -57,
   -60,   -44,   -74,  -165,  -165,   -67,   -76,  -165,  -165,   -93,
   -95,  -165,   -98,   -99,  -100,  -102,  -103,  -104,  -105,  -106,
  -107,  -114,  -115,  -116,  -139,  -141,  -142,  -143,  -144,  -145,
  -155,   -11,   -23,  -165,  -165,   -84,   -52,  -165,    -7,  -165,
  -165,  -165,  -165,  -116,  -165,  -165,  -165,  -165,  -165,  -165,
  -165,  -165,  -165,  -165,  -165,  -165,  -165,   -48,   -89,  -165,
   -97,   -24,   -26,  -165,   -53,   -61,   -62,  -165,  -165,  -165,
   -42,   -75,   -69,   -71,   -72,   -73,   -19,  -101,   -94,  -165,
  -165,  -165,  -165,  -165,  -165,   -80,   -81,   -86,  -165,   -88,
  -108,  -109,  -110,  -111,  -112,  -113,   -96,   -83,   -63,  -165,
    -8,  -165,  -165,   -79,   -85,  -165,  -165,   -87,  -165,   -65,
   -92,  -165,  -165,   -70,  -165,   -78,   -82,   -64,  -165,    -9,
   -10,   -77,   -91 ]

racc_goto_table = [
    72,    20,    96,    58,   184,    59,    20,    20,    20,   155,
    94,   224,   235,   142,   207,    98,    79,   119,   120,   223,
    67,    16,   121,   122,    80,    99,    64,    65,    66,   138,
   114,   152,   188,   220,   208,   214,   215,   216,    93,   110,
   258,   259,   222,    10,     5,   253,     4,     3,   192,   228,
   246,   118,   210,   207,     1,     2,   141,   133,   134,    78,
   116,   124,    59,    20,    79,    79,    79,    79,   111,   112,
   113,   132,   224,   247,   117,   126,   127,   128,   129,   130,
   263,   nil,    96,   221,   nil,   nil,   207,   nil,   nil,   151,
   181,   nil,   nil,   143,   256,   145,   211,   233,   nil,   237,
   nil,   240,   241,   242,   243,   244,   245,   nil,   nil,   nil,
   nil,   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   252,   nil,   254,   nil,   nil,   225,   nil,   185,   187,   186,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   193,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   265,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   271,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   143,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   225,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    80,   nil,   185,   nil,   260,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   272 ]

racc_goto_check = [
    25,    19,    12,    15,    20,    30,    19,    19,    19,    39,
     9,    44,    49,    18,    13,    16,    61,    60,    60,    43,
    22,    21,    62,    62,    19,    17,    21,    21,    21,    11,
    27,    28,    29,     8,    32,    36,    37,    38,     7,    25,
    40,    41,    42,     6,     5,    49,     4,     3,    39,    53,
    54,    25,    55,    13,     1,     2,    16,    76,    64,    65,
    15,    25,    30,    19,    61,    61,    61,    61,    22,    22,
    22,    75,    44,    20,    23,    19,    19,    19,    19,    19,
    43,   nil,    12,    39,   nil,   nil,    13,   nil,   nil,    25,
     9,   nil,   nil,    19,    20,    30,    18,    47,   nil,    47,
   nil,    47,    47,    47,    47,    47,    47,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,    47,   nil,   nil,    12,   nil,    19,    15,    30,
    30,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,    19,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25 ]

racc_goto_pointer = [
   nil,    54,    55,    47,    46,    44,    38,   -19,  -155,   -47,
   nil,   -66,   -55,  -144,   nil,    -9,   -43,   -33,   -87,    -7,
  -140,    13,     4,     4,   nil,   -20,   nil,   -38,   -83,  -120,
    -7,   nil,  -124,   nil,   nil,   nil,  -152,  -151,  -150,  -106,
  -209,  -208,  -148,  -171,  -179,   nil,   nil,   -99,   nil,  -185,
   nil,   nil,   nil,  -145,  -159,  -109,   nil,   nil,   nil,   nil,
   -57,   -10,   -54,   nil,   -31,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -18,   -32,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,
    95,   nil,    29,   156,     6,   nil,   nil,   nil,   nil,   173,
   nil,   nil,   nil,    18,    19,    37,    68,   nil,   nil,   nil,
    38,    60,   236,    61,    62,   104,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   172,   166,   157,   167,   nil,
   168,   169,   170,   159,   160,   162,   163,   164,   165,   171,
    22,    23,    24,    25,    26,    27,    28,    30,    32,    33,
    34,    36,    40,    46,    49,   nil,   nil,    53,    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 66, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  2, 68, :_reduce_4,
  0, 71, :_reduce_none,
  3, 71, :_reduce_6,
  0, 73, :_reduce_none,
  2, 73, :_reduce_8,
  4, 73, :_reduce_9,
  4, 73, :_reduce_10,
  3, 72, :_reduce_11,
  1, 72, :_reduce_none,
  2, 74, :_reduce_13,
  1, 75, :_reduce_none,
  1, 75, :_reduce_15,
  0, 76, :_reduce_16,
  1, 76, :_reduce_17,
  1, 76, :_reduce_18,
  3, 78, :_reduce_19,
  1, 70, :_reduce_none,
  4, 69, :_reduce_21,
  5, 69, :_reduce_22,
  3, 82, :_reduce_23,
  3, 83, :_reduce_24,
  1, 83, :_reduce_none,
  4, 81, :_reduce_26,
  4, 79, :_reduce_27,
  3, 79, :_reduce_28,
  4, 79, :_reduce_29,
  3, 79, :_reduce_30,
  4, 79, :_reduce_31,
  3, 79, :_reduce_32,
  3, 79, :_reduce_33,
  2, 79, :_reduce_34,
  1, 86, :_reduce_35,
  1, 86, :_reduce_36,
  3, 88, :_reduce_37,
  1, 88, :_reduce_none,
  3, 89, :_reduce_39,
  2, 89, :_reduce_40,
  1, 89, :_reduce_none,
  5, 87, :_reduce_42,
  2, 91, :_reduce_43,
  3, 80, :_reduce_44,
  2, 80, :_reduce_45,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 97, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  3, 98, :_reduce_51,
  4, 98, :_reduce_52,
  5, 99, :_reduce_53,
  1, 100, :_reduce_54,
  2, 100, :_reduce_55,
  1, 100, :_reduce_56,
  2, 100, :_reduce_57,
  1, 100, :_reduce_58,
  1, 100, :_reduce_59,
  2, 100, :_reduce_60,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  2, 102, :_reduce_63,
  4, 103, :_reduce_64,
  1, 105, :_reduce_none,
  0, 92, :_reduce_none,
  2, 92, :_reduce_67,
  0, 93, :_reduce_none,
  3, 93, :_reduce_69,
  3, 107, :_reduce_70,
  1, 107, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_75,
  1, 110, :_reduce_none,
  6, 111, :_reduce_77,
  5, 111, :_reduce_78,
  4, 113, :_reduce_79,
  3, 113, :_reduce_80,
  1, 114, :_reduce_none,
  3, 114, :_reduce_82,
  3, 85, :_reduce_83,
  1, 85, :_reduce_none,
  4, 115, :_reduce_85,
  3, 115, :_reduce_86,
  4, 116, :_reduce_87,
  3, 116, :_reduce_88,
  2, 117, :_reduce_89,
  1, 95, :_reduce_90,
  3, 106, :_reduce_91,
  1, 106, :_reduce_none,
  1, 104, :_reduce_none,
  3, 104, :_reduce_94,
  1, 118, :_reduce_none,
  3, 118, :_reduce_96,
  2, 119, :_reduce_97,
  1, 119, :_reduce_none,
  1, 120, :_reduce_none,
  1, 121, :_reduce_none,
  3, 121, :_reduce_101,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 123, :_reduce_108,
  3, 123, :_reduce_109,
  3, 123, :_reduce_110,
  3, 123, :_reduce_111,
  3, 123, :_reduce_112,
  3, 123, :_reduce_113,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 124, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  3, 125, :_reduce_119,
  3, 125, :_reduce_120,
  1, 125, :_reduce_none,
  3, 127, :_reduce_122,
  3, 127, :_reduce_123,
  1, 127, :_reduce_none,
  2, 128, :_reduce_125,
  1, 128, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 130, :_reduce_130,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 134, :_reduce_135,
  3, 77, :_reduce_136,
  1, 77, :_reduce_none,
  1, 136, :_reduce_none,
  4, 132, :_reduce_139,
  1, 132, :_reduce_none,
  4, 137, :_reduce_141,
  4, 137, :_reduce_142,
  4, 137, :_reduce_143,
  4, 137, :_reduce_144,
  4, 137, :_reduce_145,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 109, :_reduce_148,
  2, 109, :_reduce_149,
  2, 109, :_reduce_150,
  1, 109, :_reduce_151,
  3, 138, :_reduce_152,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  2, 141, :_reduce_155,
  1, 141, :_reduce_156,
  1, 129, :_reduce_157,
  1, 129, :_reduce_158,
  1, 90, :_reduce_159,
  3, 126, :_reduce_160,
  2, 126, :_reduce_161,
  1, 126, :_reduce_none,
  1, 142, :_reduce_none,
  2, 143, :_reduce_164 ]

racc_reduce_n = 165

racc_shift_n = 273

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :solidus => 52,
  :CURRENT_USER => 53,
  :period => 54,
  :COUNT => 55,
  :AVG => 56,
  :MAX => 57,
  :MIN => 58,
  :SUM => 59,
  :E => 60,
  :quote => 61,
  :character_string_literal => 62,
  :DATE => 63,
  :date_string => 64 }

racc_nt_base = 65

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "exact_numeric_literal",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_37(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_53(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_70(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_83(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_91(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_101(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 121 omitted

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_125(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_130(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_155(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
