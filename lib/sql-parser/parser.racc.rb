#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 341)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,    97,    97,   226,   102,    31,   109,    76,    71,   237,
     7,  -133,    63,     8,   135,   238,   260,   261,    47,   103,
   146,   105,   106,    31,   107,   108,   217,   218,    73,   228,
    73,   229,   230,   139,   140,   194,    47,    21,    73,    73,
    77,   231,  -133,  -133,  -133,    50,    51,   147,    35,    48,
    39,    41,    42,    43,    44,    21,    52,   148,    55,    50,
    51,    74,    75,    50,    51,   149,    35,    48,    39,    41,
    42,    43,    44,    21,    52,   150,    55,    91,    90,    73,
   153,    50,    51,    69,    35,    48,    39,    41,    42,    43,
    44,    47,    52,   174,    55,   102,    31,   175,   176,   177,
   178,     8,   179,   180,    69,   182,   183,    69,    63,    47,
   103,    63,   105,   106,    31,   107,   108,   189,   190,   194,
    13,    14,    15,    17,   206,   209,    92,   212,    21,   213,
   219,    89,    21,    47,   225,    88,    50,    51,   231,    35,
    48,    39,    41,    42,    43,    44,    21,    52,   123,    55,
    87,  -152,   233,    86,    50,    51,    85,    35,    48,    39,
    41,    42,    43,    44,    47,    52,    84,    55,    83,    31,
    21,    82,    81,     8,     8,   -89,    70,    69,    50,    51,
   248,    35,    48,    39,    41,    42,    43,    44,    47,    52,
   249,    55,   194,   231,   250,   209,    63,   233,    57,    56,
   254,    21,    12,   256,   194,    73,    21,   263,    11,    50,
    51,   265,    35,    48,    39,    41,    42,    43,    44,   266,
    52,    47,    55,   267,   268,    21,    31,   269,     9,    73,
    73,   123,    73,    50,    51,    17,    35,    48,    39,    41,
    42,    43,    44,    47,    52,   131,    55,    63,    31,   195,
   196,   136,   197,   198,   199,   137,   101,    17,    21,   200,
   201,   202,   203,   204,   205,   115,    50,    51,   144,    35,
    48,    39,    41,    42,    43,    44,    47,    52,   nil,    55,
    21,    31,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,
    17,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    47,   nil,   nil,   nil,   nil,   154,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,   nil,    35,    48,    39,    41,    42,    43,
    44,   161,    52,   nil,    55,    47,   nil,   nil,   158,    21,
    31,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,    47,    52,   nil,
    55,   nil,   231,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    47,    52,   nil,    55,    21,   154,   nil,   nil,   nil,   nil,
   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,    47,    52,   nil,    55,   nil,    31,   nil,   161,
   nil,   nil,   nil,   nil,   nil,   nil,   158,    21,   nil,   nil,
   nil,   nil,    47,   nil,   nil,    50,    51,    31,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,   nil,    55,    21,
    47,   nil,   nil,   nil,   nil,    31,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,    21,
    55,   nil,   nil,   nil,    47,   nil,   nil,    50,    51,    31,
    35,    48,    39,    41,    42,    43,    44,    21,    52,   nil,
    55,   nil,    47,   nil,   nil,    50,    51,    31,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,   nil,    55,   nil,
    47,    21,   nil,   nil,   nil,    31,   nil,   nil,   nil,    50,
    51,   nil,    35,    48,    39,    41,    42,    43,    44,    21,
    52,   nil,    55,   nil,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,    21,    52,   nil,
    55,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   102,
    31,   nil,   100,   nil,   nil,   nil,   101,   nil,   nil,   125,
   nil,   nil,   nil,    47,   103,   nil,   105,   106,   231,   107,
   108,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    21,   nil,   nil,   nil,    31,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
    31,    35,    48,    39,    41,    42,    43,    44,    21,    52,
   nil,    55,   nil,    47,   nil,   nil,   nil,   nil,   231,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,   nil,    55,
   nil,    47,    21,   nil,   nil,   nil,   231,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
   231,    35,    48,    39,    41,    42,    43,    44,    21,    52,
   nil,    55,   nil,    47,   nil,   nil,    50,    51,   231,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,   nil,    55,
   nil,    47,    21,   nil,   nil,   nil,   231,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
   231,    35,    48,    39,    41,    42,    43,    44,    21,    52,
   nil,    55,   nil,    47,   nil,   nil,    50,    51,   231,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,   nil,    55,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,    47,    55,   nil,   nil,   nil,   154,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   161,   nil,   154,   nil,   nil,   nil,   nil,   158,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,   161,    52,   nil,
    55,    47,   nil,   nil,   158,    21,    31,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,   nil,    52,    47,    55,   nil,   nil,   nil,
   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,    47,    55,
   nil,   158,    21,   154,   nil,   nil,   nil,   nil,     8,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
    47,    52,   nil,    55,   nil,    31,   nil,   161,   nil,   nil,
   nil,   nil,   nil,   nil,   158,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,    35,    48,    39,    41,
    42,    43,    44,    47,    52,   nil,    55,    21,   154,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,    47,    52,   nil,    55,   nil,
    31,   nil,   161,   nil,   nil,   nil,   nil,   nil,   nil,   158,
    21,   nil,   nil,   nil,   nil,    47,   nil,   nil,    50,    51,
    31,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    21,    55,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,   nil,    55 ]

racc_action_check = [
    84,    57,   137,   192,   187,    84,    59,    25,    20,   199,
     0,    23,   102,     0,    89,   199,   249,   249,    83,   187,
   103,   187,   187,    83,   187,   187,   187,   187,    59,   195,
    20,   195,   195,    95,    95,   192,   254,    84,    57,   137,
    25,   254,    23,    23,    23,    84,    84,   104,    84,    84,
    84,    84,    84,    84,    84,    83,    84,   106,    84,    89,
    89,    24,    24,    83,    83,   107,    83,    83,    83,    83,
    83,    83,    83,   254,    83,   108,    83,    52,    52,   109,
   114,   254,   254,    66,   254,   254,   254,   254,   254,   254,
   254,   233,   254,   125,   254,   116,   233,   126,   127,   128,
   129,   233,   130,   134,    65,   142,   143,    64,   146,     8,
   116,   147,   116,   116,     8,   116,   116,   152,   153,   155,
     8,     8,     8,     8,   158,   159,    55,   184,   233,   185,
   188,    49,   190,   230,   191,    48,   233,   233,   230,   233,
   233,   233,   233,   233,   233,   233,     8,   233,   193,   233,
    47,    45,   197,    44,     8,     8,    43,     8,     8,     8,
     8,     8,     8,     8,   231,     8,    42,     8,    41,   231,
   230,    39,    36,   206,   231,    21,    19,    16,   230,   230,
   218,   230,   230,   230,   230,   230,   230,   230,   228,   230,
   219,   230,   221,   228,   222,   227,    12,   229,    11,     9,
   232,   231,     7,   237,   247,   248,   250,   251,     5,   231,
   231,   255,   231,   231,   231,   231,   231,   231,   231,   257,
   231,    13,   231,   258,   260,   228,    13,   261,     1,    81,
   267,    80,    71,   228,   228,    13,   228,   228,   228,   228,
   228,   228,   228,    14,   228,    87,   228,    69,    14,   157,
   157,    90,   157,   157,   157,    93,    99,    14,    13,   157,
   157,   157,   157,   157,   157,    68,    13,    13,   101,    13,
    13,    13,    13,    13,    13,    13,    15,    13,   nil,    13,
    14,    15,   nil,   nil,   nil,   nil,   nil,   nil,    14,    14,
    15,    14,    14,    14,    14,    14,    14,    14,   nil,    14,
   nil,    14,   217,   nil,   nil,   nil,   nil,   217,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,    15,   nil,    15,    15,    15,    15,    15,    15,
    15,   217,    15,   nil,    15,   213,   nil,   nil,   217,   217,
   213,   nil,   nil,   nil,   nil,   nil,   nil,   217,   217,   nil,
   217,   217,   217,   217,   217,   217,   217,   263,   217,   nil,
   217,   nil,   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   213,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   213,   213,   nil,   213,   213,   213,   213,   213,   213,   213,
   209,   213,   nil,   213,   263,   209,   nil,   nil,   nil,   nil,
   nil,   nil,   263,   263,   nil,   263,   263,   263,   263,   263,
   263,   263,    86,   263,   nil,   263,   nil,    86,   nil,   209,
   nil,   nil,   nil,   nil,   nil,   nil,   209,   209,   nil,   nil,
   nil,   nil,    74,   nil,   nil,   209,   209,    74,   209,   209,
   209,   209,   209,   209,   209,   nil,   209,   nil,   209,    86,
    75,   nil,   nil,   nil,   nil,    75,   nil,    86,    86,   nil,
    86,    86,    86,    86,    86,    86,    86,   nil,    86,    74,
    86,   nil,   nil,   nil,    76,   nil,   nil,    74,    74,    76,
    74,    74,    74,    74,    74,    74,    74,    75,    74,   nil,
    74,   nil,    77,   nil,   nil,    75,    75,    77,    75,    75,
    75,    75,    75,    75,    75,   nil,    75,   nil,    75,   nil,
    85,    76,   nil,   nil,   nil,    85,   nil,   nil,   nil,    76,
    76,   nil,    76,    76,    76,    76,    76,    76,    76,    77,
    76,   nil,    76,   nil,   nil,   nil,   nil,    77,    77,   nil,
    77,    77,    77,    77,    77,    77,    77,    85,    77,   nil,
    77,   nil,   nil,   nil,   nil,    85,    85,   nil,    85,    85,
    85,    85,    85,    85,    85,    82,    85,   nil,    85,    58,
    82,   nil,    58,   nil,   nil,   nil,    58,   nil,   nil,    82,
   nil,   nil,   nil,   205,    58,   nil,    58,    58,   205,    58,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,    82,   nil,   nil,   nil,    26,   nil,   nil,   nil,
    82,    82,   nil,    82,    82,    82,    82,    82,    82,    82,
   205,    82,   nil,    82,   nil,    31,   nil,   nil,   205,   205,
    31,   205,   205,   205,   205,   205,   205,   205,    26,   205,
   nil,   205,   nil,   204,   nil,   nil,   nil,   nil,   204,    26,
    26,    26,    26,    26,    26,    26,   nil,    26,   nil,    26,
   nil,   203,    31,   nil,   nil,   nil,   203,   nil,   nil,   nil,
    31,    31,   nil,    31,    31,    31,    31,    31,    31,    31,
   204,    31,   nil,    31,   nil,   202,   nil,   nil,   204,   204,
   202,   204,   204,   204,   204,   204,   204,   204,   203,   204,
   nil,   204,   nil,   201,   nil,   nil,   203,   203,   201,   203,
   203,   203,   203,   203,   203,   203,   nil,   203,   nil,   203,
   nil,   200,   202,   nil,   nil,   nil,   200,   nil,   nil,   nil,
   202,   202,   nil,   202,   202,   202,   202,   202,   202,   202,
   201,   202,   nil,   202,   nil,   198,   nil,   nil,   201,   201,
   198,   201,   201,   201,   201,   201,   201,   201,   200,   201,
   nil,   201,   nil,   196,   nil,   nil,   200,   200,   196,   200,
   200,   200,   200,   200,   200,   200,   nil,   200,   nil,   200,
   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   198,   nil,   198,   198,   198,   198,   198,   198,   198,
   196,   198,   194,   198,   nil,   nil,   nil,   194,   196,   196,
   nil,   196,   196,   196,   196,   196,   196,   196,   nil,   196,
   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,   189,   nil,
   nil,   194,   nil,   189,   nil,   nil,   nil,   nil,   194,   194,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,   194,   nil,
   194,   194,   194,   194,   194,   194,   194,   189,   194,   nil,
   194,   183,   nil,   nil,   189,   189,   183,   nil,   nil,   nil,
   nil,   nil,   nil,   189,   189,   nil,   189,   189,   189,   189,
   189,   189,   189,   nil,   189,   161,   189,   nil,   nil,   nil,
   161,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   183,   183,   nil,   183,
   183,   183,   183,   183,   183,   183,   nil,   183,   154,   183,
   nil,   161,   161,   154,   nil,   nil,   nil,   nil,   154,   nil,
   161,   161,   nil,   161,   161,   161,   161,   161,   161,   161,
   144,   161,   nil,   161,   nil,   144,   nil,   154,   nil,   nil,
   nil,   nil,   nil,   nil,   154,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   154,   154,   nil,   154,   154,   154,   154,
   154,   154,   154,   115,   154,   nil,   154,   144,   115,   nil,
   nil,   nil,   nil,   nil,   nil,   144,   144,   nil,   144,   144,
   144,   144,   144,   144,   144,   100,   144,   nil,   144,   nil,
   100,   nil,   115,   nil,   nil,   nil,   nil,   nil,   nil,   115,
   115,   nil,   nil,   nil,   nil,    70,   nil,   nil,   115,   115,
    70,   115,   115,   115,   115,   115,   115,   115,   nil,   115,
   nil,   115,   100,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   100,   100,   nil,   100,   100,   100,   100,   100,   100,   100,
   nil,   100,    70,   100,   nil,   nil,   nil,   nil,   nil,   nil,
    70,    70,   nil,    70,    70,    70,    70,    70,    70,    70,
   nil,    70,   nil,    70 ]

racc_action_pointer = [
    -2,   228,   nil,   nil,   nil,   206,   nil,   189,   104,   199,
   nil,   195,   154,   216,   238,   271,   156,   nil,   nil,   169,
   -12,   121,   nil,    -8,    11,   -12,   596,   nil,   nil,   nil,
   nil,   620,   nil,   nil,   nil,   nil,   118,   nil,   nil,   161,
   nil,   158,   156,   146,   143,    91,   nil,    96,   130,    71,
   nil,   nil,    16,   nil,   nil,    62,   nil,    -4,   562,   -14,
   nil,   nil,   nil,   nil,    86,    83,    62,   nil,   234,   205,
  1010,   190,   nil,   nil,   427,   445,   469,   487,   nil,   nil,
   220,   187,   560,    13,    -5,   505,   407,   240,   nil,     9,
   190,   nil,   nil,   248,   nil,    25,   nil,   nil,   nil,   242,
   990,   258,   -30,    -3,    24,   nil,    31,    39,    49,    37,
   nil,   nil,   nil,   nil,    48,   968,    88,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    82,    86,    87,    88,    89,
    91,   nil,   nil,   nil,    98,   nil,   nil,    -3,   nil,   nil,
   nil,   nil,    94,    99,   935,   nil,    66,    69,   nil,   nil,
   nil,   nil,    84,   115,   913,    76,   nil,   215,   114,    89,
   nil,   880,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   856,   116,   122,   nil,    -3,   126,   823,
    90,   123,    -8,   137,   797,    -6,   758,   142,   740,   -25,
   716,   698,   680,   656,   638,   578,   158,   nil,   nil,   385,
   nil,   nil,   nil,   330,   nil,   nil,   nil,   297,   170,   185,
   nil,   149,   187,   nil,   nil,   nil,   nil,   159,   183,   187,
   128,   159,   164,    86,   nil,   nil,   nil,   163,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   161,   163,    10,
   164,   171,   nil,   nil,    31,   200,   nil,   208,   216,   nil,
   219,   222,   nil,   352,   nil,   nil,   nil,   188,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -164,  -164,    -1,    -2,    -3,    -5,   -20,  -164,  -164,  -164,
    -4,  -164,  -164,  -164,  -164,  -164,   -34,   -35,   -36,   -38,
   -41,  -158,  -116,  -117,  -120,  -123,  -164,  -125,  -126,  -127,
  -128,  -164,  -130,  -131,  -132,  -134,  -164,  -136,  -137,  -164,
  -139,  -164,  -164,  -164,  -164,  -145,  -146,  -150,  -164,  -164,
  -156,  -157,  -164,  -161,  -162,  -164,   272,  -164,  -164,   -46,
   -47,   -49,   -50,   -89,   -28,   -30,   -32,   -33,   -66,  -164,
  -164,  -164,   -40,  -158,  -164,  -164,  -164,  -164,  -124,  -133,
  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -148,  -149,  -164,
  -164,  -160,  -163,    -6,   -12,   -16,   -14,   -15,   -21,  -164,
  -164,  -164,  -164,  -164,  -164,   -54,   -56,   -58,   -59,  -164,
   -45,   -27,   -29,   -31,   -68,  -164,   -43,   -37,   -39,  -118,
  -119,  -121,  -122,  -129,  -135,  -164,  -164,  -164,  -164,  -164,
  -164,  -147,  -151,  -153,  -164,  -155,  -159,  -164,   -13,   -17,
   -18,   -22,  -164,   -25,  -164,   -51,  -164,  -164,   -55,   -57,
   -60,   -44,   -73,  -164,  -164,   -67,   -75,  -164,  -164,   -92,
   -94,  -164,   -97,   -98,   -99,  -101,  -102,  -103,  -104,  -105,
  -106,  -113,  -114,  -115,  -138,  -140,  -141,  -142,  -143,  -144,
  -154,   -11,   -23,  -164,  -164,   -83,   -52,  -164,    -7,  -164,
  -164,  -164,  -164,  -115,  -164,  -164,  -164,  -164,  -164,  -164,
  -164,  -164,  -164,  -164,  -164,  -164,  -164,   -48,   -88,  -164,
   -96,   -24,   -26,  -164,   -53,   -61,   -62,  -164,  -164,  -164,
   -42,   -74,   -69,   -71,   -72,   -19,  -100,   -93,  -164,  -164,
  -164,  -164,  -164,  -164,   -79,   -80,   -85,  -164,   -87,  -107,
  -108,  -109,  -110,  -111,  -112,   -95,   -82,   -63,  -164,    -8,
  -164,  -164,   -78,   -84,  -164,  -164,   -86,  -164,   -65,   -91,
  -164,  -164,   -70,  -164,   -77,   -81,   -64,  -164,    -9,   -10,
   -76,   -90 ]

racc_goto_table = [
    72,    20,   184,    58,   142,    59,    20,    20,    20,   155,
    94,   207,   223,   224,    98,   234,    79,   121,   122,   258,
    16,   119,   120,   222,    80,    64,    65,    66,   227,   245,
   210,   134,    78,   132,   133,   216,   232,    96,   236,   110,
   239,   240,   241,   242,   243,   244,     2,   252,   192,    67,
   207,   118,     3,     4,     5,   141,    10,    93,   220,   138,
   116,   124,    59,    20,    79,    79,    79,    79,   251,    99,
   253,   246,   262,   224,   117,   126,   127,   128,   129,   130,
   114,   152,   207,   221,   188,   208,   214,   211,   215,   151,
   181,   255,     1,   143,   264,   145,   257,   111,   112,   113,
   nil,   nil,   nil,   270,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   247,   nil,   nil,   nil,   nil,   nil,    96,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   185,   187,   186,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   193,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   143,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    80,   nil,   185,   nil,   259,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   271 ]

racc_goto_check = [
    12,    19,    20,    15,    18,    29,    19,    19,    19,    38,
     9,    13,    42,    43,    16,    48,    60,    61,    61,    40,
    21,    59,    59,    41,    19,    21,    21,    21,    52,    53,
    54,    63,    64,    75,    76,    37,    46,    12,    46,    12,
    46,    46,    46,    46,    46,    46,     2,    48,    38,    22,
    13,    12,     3,     4,     5,    16,     6,     7,     8,    11,
    15,    12,    29,    19,    60,    60,    60,    60,    46,    17,
    46,    20,    42,    43,    23,    19,    19,    19,    19,    19,
    26,    27,    13,    38,    28,    31,    35,    18,    36,    12,
     9,    20,     1,    19,    46,    29,    39,    22,    22,    22,
   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    38,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,    15,    29,
    29,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,    19,   nil,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    92,    46,    52,    53,    54,    51,     0,  -130,   -47,
   nil,   -36,   -20,  -147,   nil,    -9,   -44,    11,   -96,    -7,
  -142,    12,    33,     4,   nil,   nil,    12,   -33,   -68,    -7,
   nil,   -73,   nil,   nil,   nil,  -101,   -99,  -152,  -106,  -152,
  -229,  -167,  -178,  -177,   nil,   nil,  -160,   nil,  -182,   nil,
   nil,   nil,  -166,  -180,  -131,   nil,   nil,   nil,   nil,   -53,
   -10,   -59,   nil,   -58,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -56,   -55,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,
    95,   nil,    37,   156,     6,   nil,   nil,   nil,   nil,   173,
   nil,   nil,   nil,    18,    19,    68,   nil,   nil,   nil,    38,
    60,   235,    61,    62,   104,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,   172,   166,   157,   167,   nil,   168,
   169,   170,   159,   160,   162,   163,   164,   165,   171,    22,
    23,    24,    25,    26,    27,    28,    30,    32,    33,    34,
    36,    40,    45,    46,    49,   nil,   nil,    53,    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 66, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  2, 68, :_reduce_4,
  0, 71, :_reduce_none,
  3, 71, :_reduce_6,
  0, 73, :_reduce_none,
  2, 73, :_reduce_8,
  4, 73, :_reduce_9,
  4, 73, :_reduce_10,
  3, 72, :_reduce_11,
  1, 72, :_reduce_none,
  2, 74, :_reduce_13,
  1, 75, :_reduce_none,
  1, 75, :_reduce_15,
  0, 76, :_reduce_16,
  1, 76, :_reduce_17,
  1, 76, :_reduce_18,
  3, 78, :_reduce_19,
  1, 70, :_reduce_none,
  4, 69, :_reduce_21,
  5, 69, :_reduce_22,
  3, 82, :_reduce_23,
  3, 83, :_reduce_24,
  1, 83, :_reduce_none,
  4, 81, :_reduce_26,
  4, 79, :_reduce_27,
  3, 79, :_reduce_28,
  4, 79, :_reduce_29,
  3, 79, :_reduce_30,
  4, 79, :_reduce_31,
  3, 79, :_reduce_32,
  3, 79, :_reduce_33,
  2, 79, :_reduce_34,
  1, 86, :_reduce_35,
  1, 86, :_reduce_36,
  3, 88, :_reduce_37,
  1, 88, :_reduce_none,
  3, 89, :_reduce_39,
  2, 89, :_reduce_40,
  1, 89, :_reduce_none,
  5, 87, :_reduce_42,
  2, 90, :_reduce_43,
  3, 80, :_reduce_44,
  2, 80, :_reduce_45,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 96, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  3, 97, :_reduce_51,
  4, 97, :_reduce_52,
  5, 98, :_reduce_53,
  1, 99, :_reduce_54,
  2, 99, :_reduce_55,
  1, 99, :_reduce_56,
  2, 99, :_reduce_57,
  1, 99, :_reduce_58,
  1, 99, :_reduce_59,
  2, 99, :_reduce_60,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  2, 101, :_reduce_63,
  4, 102, :_reduce_64,
  1, 104, :_reduce_none,
  0, 91, :_reduce_none,
  2, 91, :_reduce_67,
  0, 92, :_reduce_none,
  3, 92, :_reduce_69,
  3, 106, :_reduce_70,
  1, 106, :_reduce_none,
  1, 107, :_reduce_none,
  0, 93, :_reduce_none,
  2, 93, :_reduce_74,
  1, 109, :_reduce_none,
  6, 110, :_reduce_76,
  5, 110, :_reduce_77,
  4, 112, :_reduce_78,
  3, 112, :_reduce_79,
  1, 113, :_reduce_none,
  3, 113, :_reduce_81,
  3, 85, :_reduce_82,
  1, 85, :_reduce_none,
  4, 114, :_reduce_84,
  3, 114, :_reduce_85,
  4, 115, :_reduce_86,
  3, 115, :_reduce_87,
  2, 116, :_reduce_88,
  1, 94, :_reduce_89,
  3, 105, :_reduce_90,
  1, 105, :_reduce_none,
  1, 103, :_reduce_none,
  3, 103, :_reduce_93,
  1, 117, :_reduce_none,
  3, 117, :_reduce_95,
  2, 118, :_reduce_96,
  1, 118, :_reduce_none,
  1, 119, :_reduce_none,
  1, 120, :_reduce_none,
  3, 120, :_reduce_100,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 122, :_reduce_107,
  3, 122, :_reduce_108,
  3, 122, :_reduce_109,
  3, 122, :_reduce_110,
  3, 122, :_reduce_111,
  3, 122, :_reduce_112,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 123, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  3, 124, :_reduce_118,
  3, 124, :_reduce_119,
  1, 124, :_reduce_none,
  3, 126, :_reduce_121,
  3, 126, :_reduce_122,
  1, 126, :_reduce_none,
  2, 127, :_reduce_124,
  1, 127, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 129, :_reduce_129,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 133, :_reduce_134,
  3, 108, :_reduce_135,
  1, 108, :_reduce_none,
  1, 135, :_reduce_none,
  4, 131, :_reduce_138,
  1, 131, :_reduce_none,
  4, 136, :_reduce_140,
  4, 136, :_reduce_141,
  4, 136, :_reduce_142,
  4, 136, :_reduce_143,
  4, 136, :_reduce_144,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  3, 137, :_reduce_147,
  2, 137, :_reduce_148,
  2, 137, :_reduce_149,
  1, 137, :_reduce_150,
  3, 138, :_reduce_151,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  2, 141, :_reduce_154,
  1, 141, :_reduce_155,
  1, 128, :_reduce_156,
  1, 128, :_reduce_157,
  1, 77, :_reduce_158,
  3, 125, :_reduce_159,
  2, 125, :_reduce_160,
  1, 125, :_reduce_none,
  1, 142, :_reduce_none,
  2, 143, :_reduce_163 ]

racc_reduce_n = 164

racc_shift_n = 272

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :solidus => 52,
  :CURRENT_USER => 53,
  :period => 54,
  :COUNT => 55,
  :AVG => 56,
  :MAX => 57,
  :MIN => 58,
  :SUM => 59,
  :E => 60,
  :quote => 61,
  :character_string_literal => 62,
  :DATE => 63,
  :date_string => 64 }

racc_nt_base = 65

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_37(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_53(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_70(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_82(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_90(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_100(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_124(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_129(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_154(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
