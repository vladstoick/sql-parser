#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 344)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,  -136,   100,   100,   153,   160,   113,    79,    73,   241,
    47,    47,    58,     7,   154,   242,     8,   140,   232,    47,
   233,   234,   264,   265,   235,   155,   230,   156,    75,   167,
    75,    75,  -136,  -136,  -136,  -136,   164,    21,    47,    21,
    21,    80,   159,   235,    65,    50,    51,    21,    21,    35,
    48,    39,    41,    42,    43,    44,    21,    52,   199,    55,
    48,    48,    50,    51,    50,    51,    58,    58,    35,    48,
    39,    41,    42,    43,    44,    21,    52,    47,    55,    76,
    77,    78,   160,    50,    51,   144,   145,    35,    48,    39,
    41,    42,    43,    44,   142,    52,   180,    55,    65,    65,
   106,    94,    93,   181,    47,   182,   167,   183,   184,   160,
   185,   186,   141,   164,    21,   107,   188,   109,   110,   189,
   111,   112,    50,    51,   136,    65,    35,    48,    39,    41,
    42,    43,    44,   167,    52,    75,    55,    47,   195,   196,
   164,    21,    31,   128,   199,    75,    58,   213,   119,    50,
    51,    71,   216,    35,    48,    39,    41,    42,    43,    44,
   217,    52,    47,    55,    71,   200,   201,   160,   202,   203,
   204,   223,    71,     8,    21,   205,   206,   207,   208,   209,
   210,    95,    50,    51,   128,    75,    35,    48,    39,    41,
    42,    43,    44,    92,    52,    47,    55,   237,   164,    21,
    31,    91,    90,  -155,    89,    88,    87,    50,    51,    86,
    85,    35,    48,    39,    41,    42,    43,    44,    47,    52,
    84,    55,   -91,    31,   252,   253,   199,   254,   213,    72,
   237,    71,    21,    57,   258,    56,   260,    47,   199,    75,
    50,    51,    31,    12,    35,    48,    39,    41,    42,    43,
    44,   267,    52,    11,    55,    21,    47,   269,   270,   271,
   272,    31,   273,    50,    51,     9,   146,    35,    48,    39,
    41,    42,    43,    44,    21,    52,   105,    55,   150,    47,
    65,   152,    50,    51,    31,   nil,    35,    48,    39,    41,
    42,    43,    44,    21,    52,   nil,    55,   nil,    47,   nil,
   nil,    50,    51,    31,   nil,    35,    48,    39,    41,    42,
    43,    44,   nil,    52,   nil,    55,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    51,   nil,   nil,    35,    48,
    39,    41,    42,    43,    44,    21,    52,   nil,    55,   nil,
   nil,   nil,   nil,    50,    51,   106,   nil,    35,    48,    39,
    41,    42,    43,    44,    47,    52,   nil,    55,   nil,   160,
   107,   nil,   109,   110,     8,   111,   112,   221,   222,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,    31,   nil,
   nil,   nil,   nil,   167,   nil,   nil,   nil,   130,   nil,   nil,
   164,    21,    47,   nil,   nil,   nil,   nil,    31,   nil,    50,
    51,   nil,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
    31,   nil,    35,    48,    39,    41,    42,    43,    44,    21,
    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,    31,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    21,    47,   nil,   nil,   nil,   nil,    31,   nil,
    50,    51,   nil,   nil,    35,    48,    39,    41,    42,    43,
    44,    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,
    51,    31,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
    31,   nil,    35,    48,    39,    41,    42,    43,    44,   nil,
    52,   nil,    55,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,   nil,   nil,    35,    48,    39,    41,    42,
    43,    44,    21,    52,   nil,    55,   nil,   nil,   nil,   nil,
    50,    51,   nil,   nil,    35,    48,    39,    41,    42,    43,
    44,    47,    52,   nil,    55,   nil,    31,   nil,   nil,   nil,
   nil,   nil,    13,    14,    15,    17,   106,   nil,   nil,   104,
    47,   nil,   nil,   105,   nil,    31,   nil,   nil,   nil,   nil,
     8,   107,   nil,   109,   110,   nil,   111,   112,    21,    47,
   nil,   nil,   nil,   nil,    31,   nil,    50,    51,   nil,     8,
    35,    48,    39,    41,    42,    43,    44,    21,    52,   nil,
    55,   nil,   nil,   nil,   nil,    50,    51,   nil,   nil,    35,
    48,    39,    41,    42,    43,    44,    21,    52,   nil,    55,
   nil,    47,   nil,   nil,    50,    51,    31,   nil,    35,    48,
    39,    41,    42,    43,    44,    17,    52,   nil,    55,   nil,
    47,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    47,   nil,   nil,    50,    51,   235,   nil,
    35,    48,    39,    41,    42,    43,    44,    21,    52,   nil,
    55,   nil,    47,   nil,   nil,    50,    51,    31,   nil,    35,
    48,    39,    41,    42,    43,    44,    17,    52,   nil,    55,
    21,    47,   nil,   nil,   nil,   nil,   235,   nil,    50,    51,
   nil,   nil,    35,    48,    39,    41,    42,    43,    44,    21,
    52,   nil,    55,   nil,   nil,   nil,   nil,    50,    51,   nil,
   nil,    35,    48,    39,    41,    42,    43,    44,    21,    52,
    47,    55,   nil,   nil,   nil,   160,    50,    51,   nil,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,    47,
    55,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   167,
    47,   nil,   nil,   nil,   nil,    31,   164,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,   nil,    35,
    48,    39,    41,    42,    43,    44,    21,    52,    47,    55,
   nil,   nil,   nil,    31,    50,    51,   nil,    21,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,   nil,    55,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,   nil,    55,
   nil,    47,   nil,   nil,   nil,    21,   160,   nil,   nil,   nil,
   nil,   nil,   nil,    50,    51,   nil,   nil,    35,    48,    39,
    41,    42,    43,    44,    47,    52,   nil,    55,   nil,   235,
   167,   nil,   nil,   nil,   nil,   nil,   nil,   164,    21,   nil,
   nil,   nil,   nil,    47,   nil,   nil,    50,    51,   235,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,   nil,
    55,    21,    47,   nil,   nil,   nil,   nil,   235,   nil,    50,
    51,   nil,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
   235,   nil,    35,    48,    39,    41,    42,    43,    44,    21,
    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,   235,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    21,    47,   nil,   nil,   nil,   nil,   235,   nil,
    50,    51,   nil,   nil,    35,    48,    39,    41,    42,    43,
    44,    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,
    51,   235,   nil,    35,    48,    39,    41,    42,    43,    44,
    21,    52,   nil,    55,   nil,    47,   nil,   nil,    50,    51,
   235,   nil,    35,    48,    39,    41,    42,    43,    44,   nil,
    52,   nil,    55,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,   nil,   nil,    35,    48,    39,    41,    42,
    43,    44,    21,    52,   nil,    55,   nil,   nil,   nil,   nil,
    50,    51,   nil,   nil,    35,    48,    39,    41,    42,    43,
    44,   nil,    52,   nil,    55 ]

racc_action_check = [
   119,    23,   142,    57,   108,   119,    60,    25,    20,   204,
   254,   196,   153,     0,   110,   204,     0,    92,   200,   267,
   200,   200,   253,   253,   267,   111,   197,   112,    60,   119,
    20,   113,    23,    23,    23,    23,   119,   119,   258,   142,
    57,    25,   118,   258,   153,   119,   119,   254,   196,   119,
   119,   119,   119,   119,   119,   119,   267,   119,   197,   119,
   254,   196,    92,    92,   267,   267,    71,    12,   267,   267,
   267,   267,   267,   267,   267,   258,   267,   199,   267,    24,
    24,    24,   199,   258,   258,    98,    98,   258,   258,   258,
   258,   258,   258,   258,    96,   258,   130,   258,    71,    12,
   120,    52,    52,   131,   195,   132,   199,   133,   134,   195,
   135,   139,    93,   199,   199,   120,   148,   120,   120,   149,
   120,   120,   199,   199,    90,   152,   199,   199,   199,   199,
   199,   199,   199,   195,   199,    84,   199,   189,   158,   159,
   195,   195,   189,    83,   161,    73,   164,   165,    70,   195,
   195,    68,   190,   195,   195,   195,   195,   195,   195,   195,
   191,   195,   167,   195,    67,   163,   163,   167,   163,   163,
   163,   194,    66,    58,   189,   163,   163,   163,   163,   163,
   163,    55,   189,   189,   198,   271,   189,   189,   189,   189,
   189,   189,   189,    49,   189,    72,   189,   202,   167,   167,
    72,    48,    47,    45,    44,    43,    42,   167,   167,    41,
    39,   167,   167,   167,   167,   167,   167,   167,    76,   167,
    36,   167,    21,    76,   222,   223,   225,   226,   231,    19,
   233,    16,    72,    11,   236,     9,   241,    77,   251,   252,
    72,    72,    77,     7,    72,    72,    72,    72,    72,    72,
    72,   255,    72,     5,    72,    76,    78,   259,   261,   262,
   264,    78,   265,    76,    76,     1,   101,    76,    76,    76,
    76,    76,    76,    76,    77,    76,   103,    76,   105,    79,
   106,   107,    77,    77,    79,   nil,    77,    77,    77,    77,
    77,    77,    77,    78,    77,   nil,    77,   nil,    80,   nil,
   nil,    78,    78,    80,   nil,    78,    78,    78,    78,    78,
    78,    78,   nil,    78,   nil,    78,    79,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    79,    79,   nil,   nil,    79,    79,
    79,    79,    79,    79,    79,    80,    79,   nil,    79,   nil,
   nil,   nil,   nil,    80,    80,   193,   nil,    80,    80,    80,
    80,    80,    80,    80,   160,    80,   nil,    80,   nil,   160,
   193,   nil,   193,   193,   160,   193,   193,   193,   193,   nil,
   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,    85,   nil,
   nil,   nil,   nil,   160,   nil,   nil,   nil,    85,   nil,   nil,
   160,   160,    86,   nil,   nil,   nil,   nil,    86,   nil,   160,
   160,   nil,   nil,   160,   160,   160,   160,   160,   160,   160,
    85,   160,   nil,   160,   nil,    87,   nil,   nil,    85,    85,
    87,   nil,    85,    85,    85,    85,    85,    85,    85,    86,
    85,   nil,    85,   nil,    88,   nil,   nil,    86,    86,    88,
   nil,    86,    86,    86,    86,    86,    86,    86,   nil,    86,
   nil,    86,    87,    89,   nil,   nil,   nil,   nil,    89,   nil,
    87,    87,   nil,   nil,    87,    87,    87,    87,    87,    87,
    87,    88,    87,   nil,    87,   nil,   150,   nil,   nil,    88,
    88,   150,   nil,    88,    88,    88,    88,    88,    88,    88,
    89,    88,   nil,    88,   nil,   104,   nil,   nil,    89,    89,
   104,   nil,    89,    89,    89,    89,    89,    89,    89,   nil,
    89,   nil,    89,   150,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   150,   150,   nil,   nil,   150,   150,   150,   150,   150,
   150,   150,   104,   150,   nil,   150,   nil,   nil,   nil,   nil,
   104,   104,   nil,   nil,   104,   104,   104,   104,   104,   104,
   104,     8,   104,   nil,   104,   nil,     8,   nil,   nil,   nil,
   nil,   nil,     8,     8,     8,     8,    59,   nil,   nil,    59,
   237,   nil,   nil,    59,   nil,   237,   nil,   nil,   nil,   nil,
   237,    59,   nil,    59,    59,   nil,    59,    59,     8,   235,
   nil,   nil,   nil,   nil,   235,   nil,     8,     8,   nil,   235,
     8,     8,     8,     8,     8,     8,     8,   237,     8,   nil,
     8,   nil,   nil,   nil,   nil,   237,   237,   nil,   nil,   237,
   237,   237,   237,   237,   237,   237,   235,   237,   nil,   237,
   nil,    13,   nil,   nil,   235,   235,    13,   nil,   235,   235,
   235,   235,   235,   235,   235,    13,   235,   nil,   235,   nil,
    14,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,    13,   nil,
   nil,   nil,   nil,   234,   nil,   nil,    13,    13,   234,   nil,
    13,    13,    13,    13,    13,    13,    13,    14,    13,   nil,
    13,   nil,    15,   nil,   nil,    14,    14,    15,   nil,    14,
    14,    14,    14,    14,    14,    14,    15,    14,   nil,    14,
   234,   232,   nil,   nil,   nil,   nil,   232,   nil,   234,   234,
   nil,   nil,   234,   234,   234,   234,   234,   234,   234,    15,
   234,   nil,   234,   nil,   nil,   nil,   nil,    15,    15,   nil,
   nil,    15,    15,    15,    15,    15,    15,    15,   232,    15,
   221,    15,   nil,   nil,   nil,   221,   232,   232,   nil,   nil,
   232,   232,   232,   232,   232,   232,   232,   nil,   232,   217,
   232,   nil,   nil,   nil,   217,   nil,   nil,   nil,   nil,   221,
    26,   nil,   nil,   nil,   nil,    26,   221,   221,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   221,   221,   nil,   nil,   221,
   221,   221,   221,   221,   221,   221,   217,   221,    31,   221,
   nil,   nil,   nil,    31,   217,   217,   nil,    26,   217,   217,
   217,   217,   217,   217,   217,   nil,   217,   nil,   217,    26,
    26,    26,    26,    26,    26,    26,   nil,    26,   nil,    26,
   nil,   213,   nil,   nil,   nil,    31,   213,   nil,   nil,   nil,
   nil,   nil,   nil,    31,    31,   nil,   nil,    31,    31,    31,
    31,    31,    31,    31,   210,    31,   nil,    31,   nil,   210,
   213,   nil,   nil,   nil,   nil,   nil,   nil,   213,   213,   nil,
   nil,   nil,   nil,   209,   nil,   nil,   213,   213,   209,   nil,
   213,   213,   213,   213,   213,   213,   213,   nil,   213,   nil,
   213,   210,   208,   nil,   nil,   nil,   nil,   208,   nil,   210,
   210,   nil,   nil,   210,   210,   210,   210,   210,   210,   210,
   209,   210,   nil,   210,   nil,   207,   nil,   nil,   209,   209,
   207,   nil,   209,   209,   209,   209,   209,   209,   209,   208,
   209,   nil,   209,   nil,   206,   nil,   nil,   208,   208,   206,
   nil,   208,   208,   208,   208,   208,   208,   208,   nil,   208,
   nil,   208,   207,   205,   nil,   nil,   nil,   nil,   205,   nil,
   207,   207,   nil,   nil,   207,   207,   207,   207,   207,   207,
   207,   206,   207,   nil,   207,   nil,   203,   nil,   nil,   206,
   206,   203,   nil,   206,   206,   206,   206,   206,   206,   206,
   205,   206,   nil,   206,   nil,   201,   nil,   nil,   205,   205,
   201,   nil,   205,   205,   205,   205,   205,   205,   205,   nil,
   205,   nil,   205,   203,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   203,   203,   nil,   nil,   203,   203,   203,   203,   203,
   203,   203,   201,   203,   nil,   203,   nil,   nil,   nil,   nil,
   201,   201,   nil,   nil,   201,   201,   201,   201,   201,   201,
   201,   nil,   201,   nil,   201 ]

racc_action_pointer = [
     1,   265,   nil,   nil,   nil,   251,   nil,   230,   546,   235,
   nil,   230,    57,   626,   645,   687,   210,   nil,   nil,   222,
   -12,   167,   nil,   -18,    29,   -12,   775,   nil,   nil,   nil,
   nil,   803,   nil,   nil,   nil,   nil,   165,   nil,   nil,   200,
   nil,   199,   196,   195,   194,   142,   nil,   147,   196,   132,
   nil,   nil,    39,   nil,   nil,   116,   nil,    -2,   158,   559,
   -14,   nil,   nil,   nil,   nil,   nil,   151,   143,   130,   nil,
   117,    56,   190,   103,   nil,   nil,   213,   232,   251,   274,
   293,   nil,   nil,   132,    93,   368,   387,   410,   429,   448,
   119,   nil,    12,    50,   nil,   nil,    87,   nil,    77,   nil,
   nil,   255,   nil,   262,   490,   268,   238,   258,   -19,   nil,
   -12,    -1,     1,   -11,   nil,   nil,   nil,   nil,    10,    -5,
    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    85,    92,    94,    96,    97,    99,   nil,   nil,   nil,   106,
   nil,   nil,    -3,   nil,   nil,   nil,   nil,   nil,   105,   112,
   471,   nil,    83,     2,   nil,   nil,   nil,   nil,   105,   136,
   349,   101,   nil,   131,   136,   111,   nil,   157,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,
   141,   153,   nil,   338,   167,    99,     6,    15,   173,    72,
   -17,  1000,   187,   981,   -25,   958,   939,   920,   897,   878,
   859,   nil,   nil,   836,   nil,   nil,   nil,   764,   nil,   nil,
   nil,   745,   214,   220,   nil,   183,   220,   nil,   nil,   nil,
   nil,   192,   706,   220,   668,   584,   198,   565,   nil,   nil,
   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   195,   197,    16,     5,   215,   nil,   nil,    33,   246,
   nil,   247,   252,   nil,   255,   257,   nil,    14,   nil,   nil,
   nil,   143,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -167,  -167,    -1,    -2,    -3,    -5,   -20,  -167,  -167,  -167,
    -4,  -167,  -167,  -167,  -167,  -167,   -34,   -35,   -36,   -38,
   -41,  -161,  -118,  -119,  -123,  -126,  -167,  -128,  -129,  -130,
  -131,  -167,  -133,  -134,  -135,  -137,  -167,  -139,  -140,  -167,
  -142,  -167,  -167,  -167,  -167,  -148,  -149,  -153,  -167,  -167,
  -159,  -160,  -167,  -164,  -165,  -167,   276,  -167,  -167,  -167,
   -46,   -47,   -48,   -50,   -51,   -91,   -28,   -30,   -32,   -33,
   -67,  -167,  -167,  -167,   -40,  -161,  -167,  -167,  -167,  -167,
  -167,  -127,  -136,  -167,  -167,  -167,  -167,  -167,  -167,  -167,
  -151,  -152,  -167,  -167,  -163,  -166,    -6,   -12,   -16,   -14,
   -15,  -167,   -21,  -167,  -167,  -167,  -167,  -167,  -167,   -55,
   -57,   -59,   -60,  -167,   -45,   -27,   -29,   -31,   -69,  -167,
   -43,   -37,   -39,  -120,  -121,  -122,  -124,  -125,  -132,  -138,
  -167,  -167,  -167,  -167,  -167,  -167,  -150,  -154,  -156,  -167,
  -158,  -162,  -167,   -13,   -17,   -18,   -19,   -22,  -167,   -25,
  -167,   -52,  -167,  -167,   -56,   -58,   -61,   -44,   -75,  -167,
  -167,   -68,   -77,  -167,  -167,   -94,   -96,  -167,   -99,  -100,
  -101,  -103,  -104,  -105,  -106,  -107,  -108,  -115,  -116,  -117,
  -141,  -143,  -144,  -145,  -146,  -147,  -157,   -11,   -23,  -167,
  -167,   -85,   -53,  -167,    -7,  -167,  -167,  -167,  -117,  -167,
  -167,  -167,  -167,  -167,  -167,  -167,  -167,  -167,  -167,  -167,
  -167,   -49,   -90,  -167,   -98,   -24,   -26,  -167,   -54,   -62,
   -63,  -167,  -167,  -167,   -42,   -76,   -70,   -72,   -73,   -74,
  -102,   -95,  -167,  -167,  -167,  -167,  -167,  -167,   -81,   -82,
   -87,  -167,   -89,  -109,  -110,  -111,  -112,  -113,  -114,   -97,
   -84,   -64,  -167,    -8,  -167,  -167,   -80,   -86,  -167,  -167,
   -88,  -167,   -66,   -93,  -167,  -167,   -71,  -167,   -79,   -83,
   -65,  -167,    -9,   -10,   -78,   -92 ]

racc_goto_table = [
    74,    20,    99,    61,    59,   190,    20,    20,    20,    60,
   161,   148,   227,    97,   102,   228,   238,   123,   124,   125,
   126,   127,   121,   143,    83,    69,   118,   158,   236,   194,
   240,   224,   243,   244,   245,   246,   247,   248,    16,   212,
   114,   218,   219,    66,    67,    68,   220,   256,    96,   261,
   262,   197,   226,   122,    82,    10,     5,     4,   147,   255,
     3,   257,    61,   120,   129,    20,   231,   249,    60,   214,
   266,     1,   250,   228,     2,   115,   116,   117,   131,   132,
   133,   134,   135,   139,    81,   268,   225,    99,   137,   103,
   138,   nil,   259,   157,   274,   nil,   215,   149,   187,   nil,
   nil,   nil,   nil,   151,    82,    82,    82,    82,    82,   nil,
   nil,   nil,   251,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   229,   nil,   191,    61,   193,   nil,   nil,   nil,   192,
    60,   nil,   nil,   198,   nil,   211,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   149,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   211,   nil,   nil,   nil,   nil,   nil,   229,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   191,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   211,   nil,   nil,   nil,    83,   nil,
   191,   nil,   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   275 ]

racc_goto_check = [
    25,    19,    12,    13,    15,    20,    19,    19,    19,    30,
    39,    18,    43,     9,    16,    44,    49,    60,    60,    60,
    62,    62,    23,    11,    19,    22,    27,    28,    47,    29,
    47,     8,    47,    47,    47,    47,    47,    47,    21,    32,
    25,    36,    37,    21,    21,    21,    38,    49,     7,    40,
    41,    39,    42,    25,    61,     6,     5,     4,    16,    47,
     3,    47,    13,    15,    25,    19,    53,    54,    30,    55,
    43,     1,    20,    44,     2,    22,    22,    22,    19,    19,
    19,    19,    19,    64,    65,    47,    39,    12,    75,    17,
    76,   nil,    20,    25,    47,   nil,    18,    19,     9,   nil,
   nil,   nil,   nil,    30,    61,    61,    61,    61,    61,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,    19,    13,    15,   nil,   nil,   nil,    30,
    30,   nil,   nil,    19,   nil,    13,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,    19,   nil,
    19,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25 ]

racc_goto_pointer = [
   nil,    71,    74,    60,    57,    56,    50,    -9,  -163,   -44,
   nil,   -75,   -55,    -9,   nil,    -8,   -45,    30,   -93,    -7,
  -145,    30,     9,   -50,   nil,   -20,   nil,   -44,   -91,  -129,
    -3,   nil,  -125,   nil,   nil,   nil,  -152,  -151,  -147,  -109,
  -203,  -202,  -144,  -184,  -181,   nil,   nil,  -173,   nil,  -186,
   nil,   nil,   nil,  -133,  -146,   -98,   nil,   nil,   nil,   nil,
   -59,    28,   -59,   nil,    -9,    58,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    -4,    -2,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   101,   nil,   nil,   nil,   nil,
    98,   nil,    29,   162,     6,   nil,   nil,   nil,   nil,   179,
   nil,   nil,   nil,    18,    19,    37,    70,   nil,   nil,   nil,
    38,    62,   239,    63,    64,   108,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   178,   172,   163,   173,   nil,
   174,   175,   176,   165,   166,   168,   169,   170,   171,   177,
    22,    23,    24,    25,    26,    27,    28,    30,    32,    33,
    34,    36,    40,    46,    49,   nil,   nil,    53,    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 67, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  2, 69, :_reduce_4,
  0, 72, :_reduce_none,
  3, 72, :_reduce_6,
  0, 74, :_reduce_none,
  2, 74, :_reduce_8,
  4, 74, :_reduce_9,
  4, 74, :_reduce_10,
  3, 73, :_reduce_11,
  1, 73, :_reduce_none,
  2, 75, :_reduce_13,
  1, 76, :_reduce_none,
  1, 76, :_reduce_15,
  0, 77, :_reduce_16,
  1, 77, :_reduce_17,
  1, 77, :_reduce_18,
  3, 79, :_reduce_19,
  1, 71, :_reduce_none,
  4, 70, :_reduce_21,
  5, 70, :_reduce_22,
  3, 83, :_reduce_23,
  3, 84, :_reduce_24,
  1, 84, :_reduce_none,
  4, 82, :_reduce_26,
  4, 80, :_reduce_27,
  3, 80, :_reduce_28,
  4, 80, :_reduce_29,
  3, 80, :_reduce_30,
  4, 80, :_reduce_31,
  3, 80, :_reduce_32,
  3, 80, :_reduce_33,
  2, 80, :_reduce_34,
  1, 87, :_reduce_35,
  1, 87, :_reduce_36,
  3, 89, :_reduce_37,
  1, 89, :_reduce_none,
  3, 90, :_reduce_39,
  2, 90, :_reduce_40,
  1, 90, :_reduce_none,
  5, 88, :_reduce_42,
  2, 92, :_reduce_43,
  3, 81, :_reduce_44,
  2, 81, :_reduce_45,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 98, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  3, 99, :_reduce_52,
  4, 99, :_reduce_53,
  5, 100, :_reduce_54,
  1, 101, :_reduce_55,
  2, 101, :_reduce_56,
  1, 101, :_reduce_57,
  2, 101, :_reduce_58,
  1, 101, :_reduce_59,
  1, 101, :_reduce_60,
  2, 101, :_reduce_61,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  2, 103, :_reduce_64,
  4, 104, :_reduce_65,
  1, 106, :_reduce_none,
  0, 93, :_reduce_none,
  2, 93, :_reduce_68,
  0, 94, :_reduce_none,
  3, 94, :_reduce_70,
  3, 108, :_reduce_71,
  1, 108, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  0, 95, :_reduce_none,
  2, 95, :_reduce_76,
  1, 111, :_reduce_none,
  6, 112, :_reduce_78,
  5, 112, :_reduce_79,
  4, 114, :_reduce_80,
  3, 114, :_reduce_81,
  1, 115, :_reduce_none,
  3, 115, :_reduce_83,
  3, 86, :_reduce_84,
  1, 86, :_reduce_none,
  4, 116, :_reduce_86,
  3, 116, :_reduce_87,
  4, 117, :_reduce_88,
  3, 117, :_reduce_89,
  2, 118, :_reduce_90,
  1, 96, :_reduce_91,
  3, 107, :_reduce_92,
  1, 107, :_reduce_none,
  1, 105, :_reduce_none,
  3, 105, :_reduce_95,
  1, 119, :_reduce_none,
  3, 119, :_reduce_97,
  2, 120, :_reduce_98,
  1, 120, :_reduce_none,
  1, 121, :_reduce_none,
  1, 122, :_reduce_none,
  3, 122, :_reduce_102,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 124, :_reduce_109,
  3, 124, :_reduce_110,
  3, 124, :_reduce_111,
  3, 124, :_reduce_112,
  3, 124, :_reduce_113,
  3, 124, :_reduce_114,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 125, :_reduce_none,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  3, 126, :_reduce_120,
  3, 126, :_reduce_121,
  3, 126, :_reduce_122,
  1, 126, :_reduce_none,
  3, 128, :_reduce_124,
  3, 128, :_reduce_125,
  1, 128, :_reduce_none,
  2, 129, :_reduce_127,
  1, 129, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  3, 131, :_reduce_132,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 135, :_reduce_137,
  3, 78, :_reduce_138,
  1, 78, :_reduce_none,
  1, 137, :_reduce_none,
  4, 133, :_reduce_141,
  1, 133, :_reduce_none,
  4, 138, :_reduce_143,
  4, 138, :_reduce_144,
  4, 138, :_reduce_145,
  4, 138, :_reduce_146,
  4, 138, :_reduce_147,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  3, 110, :_reduce_150,
  2, 110, :_reduce_151,
  2, 110, :_reduce_152,
  1, 110, :_reduce_153,
  3, 139, :_reduce_154,
  1, 140, :_reduce_none,
  1, 141, :_reduce_none,
  2, 142, :_reduce_157,
  1, 142, :_reduce_158,
  1, 130, :_reduce_159,
  1, 130, :_reduce_160,
  1, 91, :_reduce_161,
  3, 127, :_reduce_162,
  2, 127, :_reduce_163,
  1, 127, :_reduce_none,
  1, 143, :_reduce_none,
  2, 144, :_reduce_166 ]

racc_reduce_n = 167

racc_shift_n = 276

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :LIMIT => 4,
  :unsigned_integer => 5,
  :OFFSET => 6,
  :comma => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :DISTINCTROW => 16,
  :DISTINCT => 17,
  :ALL => 18,
  :asterisk => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :modulo => 52,
  :solidus => 53,
  :CURRENT_USER => 54,
  :period => 55,
  :COUNT => 56,
  :AVG => 57,
  :MAX => 58,
  :MIN => 59,
  :SUM => 60,
  :E => 61,
  :quote => 62,
  :character_string_literal => 63,
  :DATE => 64,
  :date_string => 65 }

racc_nt_base = 66

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "LIMIT",
  "unsigned_integer",
  "OFFSET",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "DISTINCTROW",
  "DISTINCT",
  "ALL",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "modulo",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "limit_clause",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "exact_numeric_literal",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCTROW") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "DISTINCT") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], val[3], "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[2], nil, "ALL") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_37(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_54(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_71(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_84(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_92(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Modulo.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_127(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_132(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_157(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
